# build:
#   image: docker:20.10.16
#   stage: build
#   services:
#     - docker:20.10.16-dind
#   variables:
#     IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build -t $IMAGE_TAG .
#     - docker push $IMAGE_TAG
#   rules:
#     # Do no allow manually triggered pipelines to prevent duplicates!
#     # Instead rerun the pipeline created with the last push
#     - if: $CI_PIPELINE_SOURCE != "push"
#       when: never
#     # Only execute when a valid version tag like v1.0, 2.3 or similar is given
#     # Required is always one point like 1.0
#     - if: $CI_COMMIT_TAG =~ /^v?[0-9]+[.][0-9]+([.][0-9]+)?$/


variables:
  COMMIT_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  LATEST_TAG: $CI_REGISTRY_IMAGE:latest
  FF_TIMESTAMPS: true

stages:
  - build
  # - test
  - push
  
build_image:  
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build --no-cache -t $COMMIT_TAG -t $LATEST_TAG .
    
# test_notebooks_with_image:
#   stage: test
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#     - docker run --entrypoint /bin/test-notebook.sh $CI_REGISTRY_IMAGE

push_image_to_registry:
  stage: push
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind  
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE --all-tags 
