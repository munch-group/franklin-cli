[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Franklin",
    "section": "",
    "text": "Franklin\nFranklin takes care of the technical challenges in running jupyter notebook exercise on your computer. That way, you can focus on learning rather than library incompatibilities and platform specific dependencies.\nOnce installed, running lets you download the exercise you want.\nRunning this command, starts a jupyter notebook on your computer that\nYou can find more detail along with installation instructions and tutorials in the side bar.\nShould you come across a bug or find yourself missing some functionality, you are welcome to submit an issue.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Franklin</span>"
    ]
  },
  {
    "objectID": "index.html#franklin",
    "href": "index.html#franklin",
    "title": "Franklin",
    "section": "",
    "text": "Terminal\n\nfranklin download\n\n\n\n\nTerminal\n\nfranklin jupyter",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Franklin</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html",
    "href": "../computer_setup.html",
    "title": "Computer setup",
    "section": "",
    "text": "Install Python\nIf you have not done so already, you should install a distribution of Python called Anaconda. Anaconda is not only an easy way of installing Python on Windows, Mac, and Linux; it also comes with the conda package management system (more about that later). To install Anaconda, visit this page. When the download completes, you must follow the default installation.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#install-python",
    "href": "../computer_setup.html#install-python",
    "title": "Computer setup",
    "section": "",
    "text": "Warning\n\n\n\nTo be decided if we use miniforge, miniconda or anaconda…",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#install-chrome",
    "href": "../computer_setup.html#install-chrome",
    "title": "Computer setup",
    "section": "Install Chrome",
    "text": "Install Chrome\nFranklin is built to interact with the Chrome browser. So you need to make sure that is installed on your computer. If not, you can download it here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#install-docker-desktop",
    "href": "../computer_setup.html#install-docker-desktop",
    "title": "Computer setup",
    "section": "Install Docker Desktop",
    "text": "Install Docker Desktop\nDocker is a tool that can run a small linux world in your computer. Franklin uses it to make sure Jupyter runs your exercise in exactly the same way, no matter which kind of computer you have. You do not need to known anything about Docker. Franklin will take care of the whole thing for you. If you are interested, though, you can have a look at this brief introduction to Docker.\nBefore you to download docker, make sure the operating system on your computer has been updated. For docker to run on your device you will have to have Windows newer than Windows 10 or newer than macOS11 (Big Sur) on mac. If you are downloading docker on a AU computer remember to activate admin privileges by activating Heimdal.\nIf you are unsure of how to activate Heimdal, follow the instructions given on this page\nGo to this page and press on “Download Docker Desktop”. When you have done that you will be presented with different options which depends on which chip your computer has. On a Mac, you can find the name of your chip by clicking the apple icon in the upper left corner and choose “about this mac” in the dropdown menu. Apple silicon chips include M1, M2 and M3. Apple intel chips are named intel.\n\n\n\nalt text\n\n\nOn Windows, you can find the name of your chip by right clicking on the start button and click system. Under device specifications look for processor. This will tell you the chip name and whether it is a AMD chip or an ARM chip.\nDownload the version of Docker Desktop that matches your operating system and computer chip. Once downloaded, follow the installation instructions for your device. You have to click accept when your computer asks you if you trust the provider. When docker desktop opens, a window pops up and asks if you want to sign in or create and account. An account is not necessary for using docker with franklin, so you can just click “skip” when prompted.\nWhen the installation procedure is complete and Docker is done starting up, you must it down. Just closing the blue Docker Dashboard window does not shut down Docker. You need to explicitly quit the program. To make sure it has quit, you can look for the little docker whale icon. In Mac is it in the menu bar. On Windows it is in the small popup menu at the right end of you task bar. If you see a small whale, Docker is still running. Click the whale icon and quit Docker.\n\n\n\nalt text\n\n\n\n\n\n\n\n\nWSL\n\n\n\nOn Windows, Docker Desktop may give you an error message saying “WSL 2 is required”. In that case, install WSL by running the following command into your terminal:\n\n\nTerminal\n\nwsl --install\n\n\n\n\nThe Terminal\nFranklin is a command-line application. That means it is executed by writing its name and any arguments in a “terminal” rather than clicking on an icon and using a graphical user interface. Many different programs can serve as a terminal.If you have a Windows machine, use the Anaconda Powershell Prompt (not the Anaconda Prompt and not the CMD). You installed Anaconda Powershell Prompt along with Anaconda Python. If you have a Mac, the terminal you will use is called Terminal. The Terminal application is pre-installed on Mac. From now on, whenever I refer to the terminal, I mean Anaconda Powershell Prompt on Windows and Terminal on Mac.\nI will will assume some familiarity with using a terminal and executing commands on the command line. If you have not used a terminal before, or if you are a bit rusty, you should run through this introduction before you go on.\n\n\nCreate a conda environment for Franklin\n\nYou must install packages and programs for your analyses and pipelines. Sometimes, however, the packages you need for one project conflict with the ones you need for other projects you work on in parallel. Such conflicts seem like an unsolvable problem. Would it not be fantastic if you could create a small world insulated from the rest of your Anaconda installation? Then, that small world would only contain the packages you needed for a single project. If each project had its isolated world, then there would be no such conflicts.\nFortunately, a tool lets you do just that, and its name is Conda. Conda’s small worlds are called “environments,” and you can create as many as you like. You can then switch between them as you switch between your bioinformatics projects. Conda also downloads and installs the packages for you, ensuring that the packages you install in each environment are compatible. It even makes sure to install packages (dependencies) required by the packages you install. By creating an environment for each project, the libraries installed for each project do not interfere. You can read more about conda environments and how to use them in this introduction.\nCreate an environment called franklin with franklin installed.\n\n\nTerminal\n\nconda create -y -n franklin -c conda-forge -c munch-group franklin\n\n\n\n\n\n\n\nFor educators\n\n\n\nEducators should also install franklin-educator like this:\n\n\nTerminal\n\nconda create -y -n franklin -c conda-forge -c munch-group franklin franklin-educator",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#test-your-setup",
    "href": "../computer_setup.html#test-your-setup",
    "title": "Computer setup",
    "section": "Test your setup",
    "text": "Test your setup\nIf you succesfully completed all the above steps, you should now be able to activate your franklin environment:\n\n\nTerminal\n\nconda activate franklin\n\nand run this command to update franklin to its newest version:\n\n\nTerminal\n\nfranklin update\n\nYou can learn about how to use franklin on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../commands_core.html",
    "href": "../commands_core.html",
    "title": "Running exercises",
    "section": "",
    "text": "Download an exercise\nFranklin is a command line tool that your run from a terminal. If you are not famililiar with terminals, have a look at this brief introduction before you go on.\nFranklin uses the click library to define a hierarchy of commands and subcommands that you can run in the terminal. franklin is the main command and has the subcommands download, jupyter, update, show, and cleanup. To run each subcommand, you simply append it to franklin, E.g. franklin jupyter. The following sections explain what each subcommand do. Should you forget, you can always just run the main franklin command like this:\nThat will print the following help text to remind you.\nThe jupyter exercises are available for you to download onto your own computer. To do so, you just run the command below. You will be presented with menus to select the course and exercise you want to download. The downloaded exercise will appear as a subfolder in your current folder (you can run ls to see it). If the exercise is called cool-exercise, you can change to that folder by running cd cool-exercise.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#run-jupyter",
    "href": "../commands_core.html#run-jupyter",
    "title": "Running exercises",
    "section": "Run Jupyter",
    "text": "Run Jupyter\nIn order to open and run the downloaded jupyter notebook, you need a running jupyter with all the required dependencies installed. To spare you the trouble and to make sure everyone run the exercise the same way, franklin can run jupyter in way that exactly fits each exercise. To run jupyter for your downloaded exercise, first make sure you have navigated to the exercise folder using the terminal. Then run this command:\n\n\nTerminal\n\nfranklin jupyter\n\n\n\nClick to see what Franklin does\n\n\ncheck for updates\ncheck internet connection\ncheck enough disk space is available\nchecks that docker is installed\nstarts docker in the background\nFinds the course git repositories in the franklin group.\nPresents you with a list of courses to choose from.\nFinds the git repositories in the course group that are visible to students.\nMatch docker images in the registry to exercise repositories.\nPresents you with a list of exercises to choose from.\nStarts docker and waits for its engine boot up.\nPulls the docker image from the registry if it is not already on your computer.\nLaunches a Linux docker container running with all dependencies installed.\nMakes the container mount the folder with your local files so you can open them in JupyterLab.\nFind an open port if port 8888 is already in use.\nLaunches JupyterLab and forwards the display to a dedicated Google Chrome browser window.\nWaits until you close the Chrome window.\nStops jupyter and the docker container it runs in.\nCloses Docker Desktop\n\n\nJupyterLab opens in your browser. In the file menu in the right pane, you should be able to see your newly downloaded exercise. Open it by double-clicking it and you are ready to begin the exercise. To stop jupyter, simply close the browser window or press Ctrl-C in the terminal window (remember to save your notebook first).\n\n\n\n\n\n\nSubdirectories\n\n\n\nIf the your terminal shows a message saying “You have subdirectories in your current directory”, the folder (directory) from which you ran the franklin jupyter command has other directory in it. For security reasons, Franklin does not allow this. You need to either change to the exercise folder (which has no directory in it), or launch Franklin from another without any subdirectories.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#update-franklin",
    "href": "../commands_core.html#update-franklin",
    "title": "Running exercises",
    "section": "Update franklin",
    "text": "Update franklin\nFranklin should update automatically when you start it, but if you should need to update it manually you can do it running this command:\n\n\nTerminal\n\nfranklin update\n\n\n\nClick to see what Franklin does\n\n\nChecks for updates to franklin package using either Conda or Pixi dependeing on how franklin is installed.\nDetermines if you are a student or educator.\nUpdates franklin if a newer version exists.\nUpdates the franklin-educator package if you are an educator.\nCloses franklin reporting the update if any.\n\n\nYou can also see which version of franklin you have installed by running franklin --version.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#cleanup-after-franklin",
    "href": "../commands_core.html#cleanup-after-franklin",
    "title": "Running exercises",
    "section": "Cleanup after Franklin",
    "text": "Cleanup after Franklin\nTo free up disk space, you can run the command below. You will be prompted with a menu showing the “docker images” on your computer. Select all the ones you want to remove and press Enter. Deleting images will not delete any of your own files with saved work.\n\n\nTerminal\n\nfranklin cleanup\n\n\n\nClick to see what Franklin does\n\n\nStarts docker and waits for its engine boot up.\nFinds the exercise stored as docker images on your computer.\nPrompts you with the list of exercises (images), allowing you to select the ones you want to remove.\nCloses all docker containers for those images.\nRemoves the selected images\nPrunes all unused data cached by Docker.\n\n\nMake a habit of running franklin cleanup once in a while. This does not affect any of your own files. The only drawback is that you will have to wait a bit while Franklin downloads images again, should you need them at a later point.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#show-what-franklin-has-on-your-computer",
    "href": "../commands_core.html#show-what-franklin-has-on-your-computer",
    "title": "Running exercises",
    "section": "Show what Franklin has on your computer",
    "text": "Show what Franklin has on your computer\nIf you are curious, you can use the franklin show subcommands to see what Docker has stored on your computer. The sub commands are images, containers, and storage. To see a summary of how much disk space Docker takes up on your computer for what purpose, you can run this command:\n\n\nTerminal\n\nfranklin show storage\n\nFranklin downloads a linux “docker image” for every exercise. These can take up a lot of space on your computer. Fortunately, you only need each one, when you run the exercise it is made for. So you can delete the ones you are not using to free up space. Franklin will automatically download them again if you need them later. To see the images downloaded to your computer and how much space they take up, you can run this command:\n\n\nTerminal\n\nfranklin show images\n\nFranklin starts a Docker Linux container when you run franklin jupyter. These can take up a lot of space on your computer. Fortunately, you only need each one, when you run the exercise it is made for. So you can delete the ones you are not using to free up space. Franklin will automatically download them again if you need them later. To see the images downloaded to your computer and how much space they take up, you can run this command:\n\n\nTerminal\n\nfranklin show images",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#live-action",
    "href": "../commands_core.html#live-action",
    "title": "Running exercises",
    "section": "Live action",
    "text": "Live action",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../faq.html",
    "href": "../faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Under development\n\n\n\nThe content of this page is being developed.\n\n\n\nfranklin-educator is installed in my environemnt but I cannot see the exercise commands\nTry reinstalling franklin-educator:\n\n\nTerminal\n\nconda uninstall franklin-educator\n\nand then\n\n\nTerminal\n\nconda install -c conda-forge -c munch-group franklin-educator\n\n\n\nDocker is installed but franklin keeps complaining it is not\nWhen Docker Desktop is in Eco mode, franklin cannot get to it. If Docker Desktop is not running, franklin can start it for you. So Quit Docker Desktop and try running franklin again.\n\n\nI quit Docker Desktop but it is still running\nThe blue Docker Desktop window is the Docker dashboard. Closing that window will not close Docker Desktop. To close Docker Desktop find the small docker icon in the menu bar on Mac or in the bottom right taskbar on Windows. Look for a tiny whale with containers on its back.\n\n\nHow much space is frankling taking up on my hard disk?\n\n\nHow do I free up disk space used by franklin\n\n\nWhat happens if I delete an exercise in franklin\n\n\nHow do I rename an exercise\nChanges the display name using franklin exercise rename. Do not change the repository name on GitLab.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "../terminal.html",
    "href": "../terminal.html",
    "title": "Introduction to the Terminal",
    "section": "",
    "text": "What is a Terminal?\nA terminal (also called command line, shell, or console) is a text-based interface for interacting with your computer. Instead of clicking buttons and icons, you type commands to tell the computer what to do. While it might seem intimidating at first, the terminal is an incredibly powerful tool that gives you precise control over your system.",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#what-is-a-terminal",
    "href": "../terminal.html#what-is-a-terminal",
    "title": "Introduction to the Terminal",
    "section": "",
    "text": "Why Learn the Terminal?\n\nPower: Many tasks are faster and more efficient in the terminal\nAutomation: Chain commands together and create scripts\nRemote Access: Control servers and other computers remotely\nDevelopment: Essential for programming and data science\nFranklin: Many Franklin commands work best from the terminal",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#opening-your-terminal",
    "href": "../terminal.html#opening-your-terminal",
    "title": "Introduction to the Terminal",
    "section": "Opening Your Terminal",
    "text": "Opening Your Terminal\n\nmacOSWindowsLinux\n\n\n\nPress Cmd + Space to open Spotlight\nType “Terminal” and press Enter\nOr: Find Terminal in Applications → Utilities\n\nYou’ll see something like:\nusername@MacBook-Pro ~ %\n\n\n\nPress Windows Key\nType “PowerShell” or “Command Prompt”\nOr: Right-click Start Menu → Windows Terminal\n\nYou’ll see something like:\nPS C:\\Users\\username&gt;\n\n\n\nPress Ctrl + Alt + T (most distributions)\nOr: Find Terminal in your applications menu\n\nYou’ll see something like:\nusername@computer:~$",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#understanding-the-prompt",
    "href": "../terminal.html#understanding-the-prompt",
    "title": "Introduction to the Terminal",
    "section": "Understanding the Prompt",
    "text": "Understanding the Prompt\nThe prompt shows you important information:\nusername@hostname:current_directory$\n\nusername: Your user account name\nhostname: Your computer’s name\ncurrent_directory: Where you are in the file system\n$ or %: Indicates you can type a command",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#essential-navigation-commands",
    "href": "../terminal.html#essential-navigation-commands",
    "title": "Introduction to the Terminal",
    "section": "Essential Navigation Commands",
    "text": "Essential Navigation Commands\n\nWhere Am I? (pwd)\nThe pwd command (print working directory) shows your current location:\npwd\n# Output: /Users/username/Documents\n\n\nWhat’s Here? (ls)\nThe ls command lists files and folders:\n# Basic listing\nls\n\n# Detailed listing with sizes and dates\nls -l\n\n# Show hidden files (starting with .)\nls -a\n\n# Human-readable file sizes\nls -lh\n\n\nMoving Around (cd)\nThe cd command (change directory) moves between folders:\n# Go to a specific folder\ncd Documents\n\n# Go to home directory\ncd ~\n# or just\ncd\n\n# Go up one level\ncd ..\n\n# Go up two levels\ncd ../..\n\n# Go to previous directory\ncd -\n\n# Use absolute path\ncd /Users/username/Documents\n\n# Use relative path\ncd ./subfolder",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#working-with-files-and-folders",
    "href": "../terminal.html#working-with-files-and-folders",
    "title": "Introduction to the Terminal",
    "section": "Working with Files and Folders",
    "text": "Working with Files and Folders\n\nCreating Files and Folders\n# Create a new folder\nmkdir my_project\nmkdir -p projects/python/data_analysis  # Create nested folders\n\n# Create an empty file\ntouch notes.txt\n\n# Create and write to a file\necho \"Hello World\" &gt; greeting.txt\n\n# Append to a file\necho \"Another line\" &gt;&gt; greeting.txt\n\n\nViewing File Contents\n# View entire file\ncat filename.txt\n\n# View with pagination\nless filename.txt  # Press 'q' to quit\n\n# View first 10 lines\nhead filename.txt\n\n# View last 10 lines\ntail filename.txt\n\n# View last lines as file updates (great for logs)\ntail -f logfile.log\n\n\nCopying, Moving, and Deleting\n# Copy file\ncp source.txt destination.txt\n\n# Copy folder recursively\ncp -r source_folder destination_folder\n\n# Move/rename file or folder\nmv old_name.txt new_name.txt\nmv file.txt /path/to/destination/\n\n# Delete file\nrm file.txt\n\n# Delete empty folder\nrmdir empty_folder\n\n# Delete folder and contents (careful!)\nrm -r folder_name\n\n# Delete with confirmation\nrm -i file.txt",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#useful-shortcuts-and-tips",
    "href": "../terminal.html#useful-shortcuts-and-tips",
    "title": "Introduction to the Terminal",
    "section": "Useful Shortcuts and Tips",
    "text": "Useful Shortcuts and Tips\n\nKeyboard Shortcuts\n\n\n\nShortcut\nAction\n\n\n\n\nTab\nAuto-complete file/folder names\n\n\n↑ / ↓\nNavigate command history\n\n\nCtrl + C\nCancel current command\n\n\nCtrl + A\nGo to beginning of line\n\n\nCtrl + E\nGo to end of line\n\n\nCtrl + L\nClear screen (or use clear)\n\n\nCtrl + R\nSearch command history\n\n\nCtrl + D\nExit terminal\n\n\n\n\n\nCommand History\n# View command history\nhistory\n\n# Run previous command\n!!\n\n# Run command from history\n!123  # Run command number 123\n\n# Search history\nhistory | grep \"git\"\n\n\nWildcards and Patterns\n# * matches any characters\nls *.txt           # All .txt files\nrm temp_*          # All files starting with temp_\n\n# ? matches single character\nls file?.txt       # Matches file1.txt, file2.txt, etc.\n\n# [...] matches any character in brackets\nls file[123].txt   # Matches file1.txt, file2.txt, file3.txt",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#finding-things",
    "href": "../terminal.html#finding-things",
    "title": "Introduction to the Terminal",
    "section": "Finding Things",
    "text": "Finding Things\n\nFinding Files\n# Find files by name\nfind . -name \"*.py\"\n\n# Find folders\nfind . -type d -name \"data\"\n\n# Find files modified in last 24 hours\nfind . -mtime -1\n\n# Find and execute command\nfind . -name \"*.txt\" -exec cat {} \\;\n\n\nSearching File Contents\n# Search for text in file\ngrep \"search term\" file.txt\n\n# Search recursively in all files\ngrep -r \"TODO\" .\n\n# Case-insensitive search\ngrep -i \"python\" file.txt\n\n# Show line numbers\ngrep -n \"error\" logfile.log\n\n# Search for files containing text\ngrep -l \"import pandas\" *.py",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#working-with-processes",
    "href": "../terminal.html#working-with-processes",
    "title": "Introduction to the Terminal",
    "section": "Working with Processes",
    "text": "Working with Processes\n\nRunning Programs\n# Run a Python script\npython script.py\n\n# Run in background\npython long_script.py &\n\n# Run and disconnect from terminal\nnohup python script.py &\n\n\nManaging Processes\n# List running processes\nps aux\n\n# Find specific process\nps aux | grep python\n\n# Kill a process\nkill 1234  # Kill process with ID 1234\n\n# Force kill\nkill -9 1234\n\n# Interactive process viewer\ntop  # Press 'q' to quit",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#inputoutput-redirection",
    "href": "../terminal.html#inputoutput-redirection",
    "title": "Introduction to the Terminal",
    "section": "Input/Output Redirection",
    "text": "Input/Output Redirection\n\nRedirecting Output\n# Redirect output to file\nls &gt; file_list.txt\n\n# Append to file\nls &gt;&gt; file_list.txt\n\n# Redirect errors\ncommand 2&gt; errors.txt\n\n# Redirect both output and errors\ncommand &&gt; all_output.txt\n\n\nPipes\nChain commands together:\n# Count Python files\nls | grep \".py\" | wc -l\n\n# Find and sort\nfind . -name \"*.txt\" | sort\n\n# View processes using most memory\nps aux | sort -k4 -r | head",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#environment-variables",
    "href": "../terminal.html#environment-variables",
    "title": "Introduction to the Terminal",
    "section": "Environment Variables",
    "text": "Environment Variables\n# View all environment variables\nenv\n\n# View specific variable\necho $PATH\necho $HOME\n\n# Set temporary variable\nexport MY_VAR=\"value\"\n\n# Add to PATH\nexport PATH=$PATH:/new/path",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#franklin-in-the-terminal",
    "href": "../terminal.html#franklin-in-the-terminal",
    "title": "Introduction to the Terminal",
    "section": "Franklin in the Terminal",
    "text": "Franklin in the Terminal\nFranklin is designed to work seamlessly from the terminal:\n# Check Franklin installation\nfranklin --version\n\n# Download exercises\nfranklin download\n\n# Start Jupyter\nfranklin jupyter\n\n# Get help\nfranklin --help\nfranklin jupyter --help\n\nCommon Franklin Workflows\n# Student workflow\ncd ~/Documents/Courses\nfranklin download\ncd \"Exercise Name\"\nfranklin jupyter\n\n# Educator workflow\nfranklin exercise new\ncd my-exercise\nfranklin exercise edit\nfranklin exercise test\nfranklin exercise publish",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#terminal-for-different-shells",
    "href": "../terminal.html#terminal-for-different-shells",
    "title": "Introduction to the Terminal",
    "section": "Terminal for Different Shells",
    "text": "Terminal for Different Shells\n\nBash (Linux/Mac)Zsh (Mac default)PowerShell (Windows)\n\n\nMost common shell with extensive features:\n# Check current shell\necho $SHELL\n\n# Bash-specific features\nalias ll='ls -la'\nsource ~/.bashrc\n\n\nEnhanced Bash with better completion:\n# Zsh configuration\n~/.zshrc\n\n# Powerful tab completion\ncd /u/l/b&lt;Tab&gt;  # Expands to /usr/local/bin\n\n\nObject-oriented shell:\n# PowerShell commands\nGet-ChildItem  # Like ls\nSet-Location   # Like cd\nGet-Content    # Like cat\n\n# Aliases work too\nls\ncd\ncat",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#terminal-customization",
    "href": "../terminal.html#terminal-customization",
    "title": "Introduction to the Terminal",
    "section": "Terminal Customization",
    "text": "Terminal Customization\n\nCreating Aliases\nMake shortcuts for common commands:\n# Add to ~/.bashrc or ~/.zshrc\nalias ll='ls -la'\nalias gs='git status'\nalias jp='franklin jupyter'\nalias py='python'\n\n# Reload configuration\nsource ~/.bashrc\n\n\nCustomizing Prompt\n# Simple prompt\nPS1='\\u@\\h:\\w\\$ '\n\n# Colorful prompt\nPS1='\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#best-practices",
    "href": "../terminal.html#best-practices",
    "title": "Introduction to the Terminal",
    "section": "Best Practices",
    "text": "Best Practices\n\nSafety First\n\n✅ Use ls before rm to verify what you’re deleting\n✅ Use -i flag with rm for confirmation\n✅ Make backups before major operations\n✅ Test commands on sample data first\n\n\n\nEfficiency Tips\n\n✅ Use Tab completion extensively\n✅ Create aliases for repetitive commands\n✅ Learn keyboard shortcuts\n✅ Use command history\n\n\n\nOrganization\n\n✅ Use descriptive file and folder names\n✅ Organize projects in dedicated directories\n✅ Keep your home directory clean\n✅ Use version control (Git) for code",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#common-terminal-tasks",
    "href": "../terminal.html#common-terminal-tasks",
    "title": "Introduction to the Terminal",
    "section": "Common Terminal Tasks",
    "text": "Common Terminal Tasks\n\nQuick File Backup\n# Backup single file\ncp important.txt important_backup.txt\n\n# Backup with date\ncp important.txt important_$(date +%Y%m%d).txt\n\n# Backup entire folder\ntar -czf backup.tar.gz my_folder/\n\n\nBatch Operations\n# Rename multiple files\nfor file in *.txt; do\n    mv \"$file\" \"backup_$file\"\ndone\n\n# Convert all CSV to lowercase names\nfor file in *.CSV; do\n    mv \"$file\" \"${file,,}\"\ndone\n\n\nQuick System Info\n# Disk usage\ndf -h\n\n# Folder sizes\ndu -sh *\n\n# Memory usage\nfree -h  # Linux\ntop      # Mac/Linux\n\n# Network info\nifconfig  # or ip addr",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#troubleshooting-common-issues",
    "href": "../terminal.html#troubleshooting-common-issues",
    "title": "Introduction to the Terminal",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nPermission Denied\n# Check permissions\nls -l file.txt\n\n# Make executable\nchmod +x script.sh\n\n# Change ownership\nsudo chown username file.txt\n\n\nCommand Not Found\n# Check if program installed\nwhich python\n\n# Check PATH\necho $PATH\n\n# Install missing command\n# Mac: brew install program\n# Linux: apt install program\n# Windows: winget install program\n\n\nStuck Terminal\n\nCtrl + C: Stop current command\nCtrl + D: Exit/logout\nCtrl + Z: Suspend process (use fg to resume)\nCtrl + L: Clear screen",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#resources-for-learning-more",
    "href": "../terminal.html#resources-for-learning-more",
    "title": "Introduction to the Terminal",
    "section": "Resources for Learning More",
    "text": "Resources for Learning More\n\nInteractive Tutorials\n\nCommand Line Tutorial\nLearn Shell\nBash Guide\n\n\n\nPractice\n\nStart with navigation: pwd, ls, cd\nCreate and manipulate files\nLearn one new command per day\nAutomate repetitive tasks",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../terminal.html#summary",
    "href": "../terminal.html#summary",
    "title": "Introduction to the Terminal",
    "section": "Summary",
    "text": "Summary\nThe terminal is your direct line of communication with the computer. While graphical interfaces are convenient, the terminal offers:\n\nSpeed: Type faster than you can click\nPower: Access to thousands of commands\nAutomation: Script repetitive tasks\nRemote Access: Work on distant servers\nDevelopment: Essential for programming\n\nStart with basic navigation, gradually add commands to your toolkit, and soon you’ll wonder how you ever lived without it!",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to the Terminal</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html",
    "href": "../jupyterlab.html",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "",
    "text": "Starting JupyterLabThere are several ways to start JupyterLab:\n—title: “JupyterLab Tutorial”subtitle: “Interactive Computing with Notebooks”—",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#starting-jupyterlabthere-are-several-ways-to-start-jupyterlab",
    "href": "../jupyterlab.html#starting-jupyterlabthere-are-several-ways-to-start-jupyterlab",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "",
    "text": "With Franklin (Recommended)The easiest way for Franklin users:\n\n# Navigate to your exercise foldercd \"My Exercise\"# Start JupyterLab through Franklinfranklin jupyter",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#keyboard-shortcuts",
    "href": "../jupyterlab.html#keyboard-shortcuts",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\n\nCommand Mode in Jupyter Notebooks\nIn Jupyter Notebooks, Command Mode is one of the two main interaction modes—the other being Edit Mode. Command Mode is active when the cell border is blue, indicating that keyboard commands will be interpreted as notebook-level operations rather than editing the cell’s content.\nCommand Mode allows users to manage cells and perform structural modifications without using the mouse. This enhances efficiency, especially when working with large notebooks. Pressing Esc while in a cell activates Command Mode.\n\nCommon Keyboard Shortcuts in Command Mode\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nEnter\nSwitch to Edit Mode in the selected cell\n\n\nA\nInsert a new cell above the current cell\n\n\nB\nInsert a new cell below the current cell\n\n\nD, D\nDelete the selected cell (press D twice quickly)\n\n\nZ\nUndo the last cell deletion\n\n\nY\nChange cell type to code\n\n\nM\nChange cell type to Markdown\n\n\nC\nCopy the selected cell\n\n\nX\nCut the selected cell\n\n\nV\nPaste cell below\n\n\nShift + V\nPaste cell above\n\n\nShift + Up/Down\nExtend selection to multiple cells\n\n\nCtrl + S (or Cmd + S on macOS)\nSave the notebook\n\n\nH\nShow all keyboard shortcuts\n\n\n0, 0\nRestart the kernel (press 0 twice quickly)\n\n\nShift + M (in Command Mode)\nMerge selected cells\n\n\n\nThese shortcuts make navigation and cell management significantly faster, enabling an efficient coding and documentation workflow within Jupyter Notebooks.\n\n\n\nEdit Mode in Jupyter Notebooks\nEdit Mode is activated when a cell’s border turns green, allowing the user to directly modify the contents of the cell. You can enter Edit Mode by pressing Enter while a cell is selected in Command Mode. This mode is primarily used for writing and editing code or Markdown content within cells.\n\nCommon Keyboard Shortcuts in Edit Mode\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nCtrl + Enter\nRun the current cell and remain in Edit Mode\n\n\nShift + Enter\nRun the current cell and move to the next cell\n\n\nAlt + Enter\nRun the current cell and insert a new cell below\n\n\nEsc\nSwitch to Command Mode\n\n\nCtrl + /\nToggle comment on selected lines (code cells only)\n\n\nTab\nCode completion or indent\n\n\nShift + Tab\nShow tooltip/help for the object under cursor\n\n\nCtrl + ]\nIndent the current line or selection\n\n\nCtrl + [\nDedent the current line or selection\n\n\nCtrl + A\nSelect all content in the cell\n\n\nCtrl + Z\nUndo the last change\n\n\nCtrl + Y\nRedo the last undone change\n\n\nCtrl + Shift + -\nSplit the current cell at cursor position into two cells\n\n\nCtrl + S (or Cmd + S)\nSave the notebook\n\n\nCtrl + Shift + -\nSplit the cell at the current cursor position\n\n\n\nThese shortcuts are optimized for efficient coding and content editing, significantly reducing reliance on the mouse and improving productivity within Jupyter Notebooks.",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#menu-toolbar-context-menu",
    "href": "../jupyterlab.html#menu-toolbar-context-menu",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Menu, Toolbar, Context menu",
    "text": "Menu, Toolbar, Context menu",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#command-palette-commandctrl-shift-c",
    "href": "../jupyterlab.html#command-palette-commandctrl-shift-c",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Command palette: Command/Ctrl Shift C",
    "text": "Command palette: Command/Ctrl Shift C",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "href": "../jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Keyboard short-cuts: Command/Ctrl Shift H",
    "text": "Keyboard short-cuts: Command/Ctrl Shift H",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#code-blocks",
    "href": "../jupyterlab.html#code-blocks",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Code blocks",
    "text": "Code blocks\n\nx = 0",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#last-value-is-displayed",
    "href": "../jupyterlab.html#last-value-is-displayed",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Last value is displayed",
    "text": "Last value is displayed\n\nx = 1\nx",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#everything-is-one-python-process",
    "href": "../jupyterlab.html#everything-is-one-python-process",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Everything is one Python process",
    "text": "Everything is one Python process\n\nx += 1\nx",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#restarting-the-kernel",
    "href": "../jupyterlab.html#restarting-the-kernel",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Restarting the kernel",
    "text": "Restarting the kernel",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#lists",
    "href": "../jupyterlab.html#lists",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Lists",
    "text": "Lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#numbered-lists",
    "href": "../jupyterlab.html#numbered-lists",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Numbered lists",
    "text": "Numbered lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#quotes",
    "href": "../jupyterlab.html#quotes",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Quotes",
    "text": "Quotes\n\nThis is a quote",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#formulas",
    "href": "../jupyterlab.html#formulas",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)\n\nHTML",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#header-2",
    "href": "../jupyterlab.html#header-2",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#formulas-1",
    "href": "../jupyterlab.html#formulas-1",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#tables",
    "href": "../jupyterlab.html#tables",
    "title": "What is JupyterLab?JupyterLab is a powerful web-based interactive development environment for working with notebooks, code, and data. It’s the next-generation interface for Project Jupyter, offering a flexible and extensible environment for computational work.### Key Features- Notebooks: Interactive documents combining code, text, and outputs- Multiple Languages: Support for Python, R, Julia, and 100+ other languages- Rich Outputs: Display plots, tables, images, videos, and interactive widgets- Flexible Interface: Arrange multiple documents and activities side by side- Extensions: Customize with a growing ecosystem of extensions### JupyterLab vs Jupyter Notebook| Feature | JupyterLab | Classic Notebook ||———|————|——————|| Interface | Multi-document, IDE-like | Single document || File Browser | Built-in | Limited || Terminal | Integrated | Separate || Text Editor | Full-featured | Basic || Extensions | Modern system | Legacy || Layout | Flexible, draggable | Fixed |Franklin uses JupyterLab by default because it provides the most comprehensive environment for learning and research.",
    "section": "Tables",
    "text": "Tables\n\n\n\nName\nValue\n\n\n\n\nfoo\n2\n\n\nbar\n3",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>JupyterLab Tutorial</span>"
    ]
  },
  {
    "objectID": "../numpy_and_pandas.html",
    "href": "../numpy_and_pandas.html",
    "title": "NumPy and Pandas",
    "section": "",
    "text": "Numpy\nFast computation using vectors and matrices\nlist1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\nsummed = []\nfor i in range(len(list1)):\n    summed.append(list1[i] + list2[i])\nsummed",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NumPy and Pandas</span>"
    ]
  },
  {
    "objectID": "../numpy_and_pandas.html#numpy",
    "href": "../numpy_and_pandas.html#numpy",
    "title": "NumPy and Pandas",
    "section": "",
    "text": "Arrays\n\nimport numpy as np\n\n\na = np.array(list1)\nb = np.array(list2)\na, b\n\n\n\nBroadcasting\n\na + b\n\n\na * b\n\n\na - 10\n\n\na.sum()\n\n\na.mean()\n\n\n\nMultidimentional arrays\n\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist_of_lists\n\n\nlist_of_lists[1][1]\n\n\nmatrix = np.array(list_of_lists)\nmatrix\n\n\nmatrix[1][1] # not efficient\n\n\nmatrix[1, 1] # efficient\n\n\nmatrix - 10\n\n\nmatrix.sum()\n\n\nlist_of_lists_of_lists = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\nlist_of_lists_of_lists\n\n\ntensor = np.array(list_of_lists_of_lists)\ntensor\n\n\ntensor[1, 1, 1]",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NumPy and Pandas</span>"
    ]
  },
  {
    "objectID": "../numpy_and_pandas.html#pandas",
    "href": "../numpy_and_pandas.html#pandas",
    "title": "NumPy and Pandas",
    "section": "Pandas",
    "text": "Pandas\nFast computations on data tables (on top of Numpy).\n\nimport pandas as pd\n\n\nDataFrame\n\ndf = pd.DataFrame({'name': ['Mike', 'Mia', 'Jake'], 'weight': [82, 62, 75]})\ndf\n\n\ntype(df)\n\n\ndf = pd.DataFrame(dict(name=['Mike', 'Mia', 'Jake'], weight=[82, 62, 75]))\ndf\n\n\nrecords = [('Mike', 82), ('Mia', 62), ('Jake', 75)]\n\ndf = pd.DataFrame().from_records(records, columns=['age', 'weight'])\ndf\n\n\ndf.index\n\n\ndf.index.values\n\n\ndf.columns\n\n\ndf.dtypes\n\nAdd a column to an existing dataframe:\n\ndf['height'] = [182.5, 173.0, 192.5]\ndf\n\nAdd another, categorical, column:\n\ndf['sex'] = pd.Categorical(['male', 'female', 'male'], categories=['female', 'male'], ordered=True)\ndf\n\n\ndf.dtypes\n\nA Series just wraps an array:\n\ndf.height.to_numpy()\n\n\n\nExample penguin data set\n\nimport seaborn as sns\n\npenguins = sns.load_dataset('penguins')\n\n\npenguins\n\n\npenguins.dtypes\n\n\npenguins.head()\n\n\npenguins.tail()\n\n\n\nSeries\n\npenguins['flipper_length_mm']\n\n\npenguins.flipper_length_mm\n\n\ntype(penguins.flipper_length_mm)\n\n\n\nBroadcasting\n\npenguins.bill_depth_mm - 1000\n\n\npenguins.bill_depth_mm * penguins.flipper_length_mm\n\n\n\nIndexing\n\nGet a cell\n\npenguins.loc[4, 'island']\n\n\n\nGet a row\n\npenguins.loc[4]\n\n\n\nGet a column\n\npenguins['bill_depth_mm']\n\n\npenguins.bill_depth_mm\n\n\n\nGet a range of rows and multiple columns\n\npenguins.loc[40:45, ['island', 'body_mass_g']]\n\n\n\nUse boolean series as index to subset data\n\nidx = penguins.bill_length_mm &gt; 55\nidx\n\n\npenguins.loc[idx]\n\n\npenguins.loc[(penguins.bill_length_mm &gt; 55) & (penguins.sex == 'Female')]\n\n\n\nSetting and resetting the index\n\npenguins\n\n\ndf = penguins.set_index(['species', 'sex', 'island'])\ndf.head(10)\n\n\ndf.reset_index()\n\n\n\n\nSorting rows\n\nsorted_df = penguins.sort_values(by=\"bill_length_mm\")\nsorted_df.head()\n\n\nsorted_df.index.values\n\nClick to the left of an output cell to enable/disable scrolling of the output (usefull for large amounts of output).\n\nsorted_df.loc[0]\n\n\nsorted_df.flipper_length_mm[0]\n\n\nsorted_df.iloc[0] # iloc !!!\n\n\nsorted_df.flipper_length_mm.iloc[0]\n\n\n\nSummary stats\n\npenguins.describe()\n\n\npenguins.bill_length_mm.mean()\n\n\npenguins.bill_length_mm.count()\n\n\n\nGroup\n\npenguins.groupby('island')\n\n\n\nAggregate\nAggregating produces a single value for each variable in each group:\nMeans for all numeric variables for each island:\n\npenguins.groupby('island').aggregate(\"mean\", numeric_only=True)\n\n\npenguins.groupby('island').mean(numeric_only=True)\n\nMeans for bill_length_mm and flipper_length_mm:\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].mean()\n\nJust for flipper_length_mm:\n\npenguins.groupby('island').flipper_length_mm.mean()\n\n\n\nTransform\nTransforming produces new colums with the same length as the input:\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].transform(\"mean\")\n\n\ndef z_value(sr):\n    return (sr - sr.mean()) / sr.std()\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].transform(z_value)\n\n\n\nApply\nFlexible method allowing any operation on grouped data.\nReturn a single value:\n\ndef fun(df):\n    return df.bill_length_mm + df.flipper_length_mm.mean() / df.body_mass_g\n\npenguins.groupby('island').apply(fun)#.to_frame('my_stat')\n\nReturn a dataframe:\n\ndef fun(df):\n    return pd.DataFrame({'sqrt_bill': np.sqrt(df.bill_length_mm),\n                         'bill_squared': df.bill_length_mm**2})\n\npenguins.groupby('island').apply(fun)",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NumPy and Pandas</span>"
    ]
  },
  {
    "objectID": "../plotting.html",
    "href": "../plotting.html",
    "title": "Plotting with Python",
    "section": "",
    "text": "Better plotting with seaborn (on top of matplotlib)\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\") ;\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\") ;\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\", style=\"sex\") ;\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\", \n                style=\"sex\", size=\"body_mass_g\") ;\ndef legend_outside():\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\", style=\"sex\", size=\"body_mass_g\") ;\n\nlegend_outside()\n\nplt.title(\"Penguin measurements\")\nplt.ylabel(\"flipper length (mm)\")\nplt.xlabel(\"bill length in (mm)\") ;",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Plotting with Python</span>"
    ]
  },
  {
    "objectID": "../plotting.html#facetgrid.map-vs.-facetgrid.map_dataframe",
    "href": "../plotting.html#facetgrid.map-vs.-facetgrid.map_dataframe",
    "title": "Plotting with Python",
    "section": "FacetGrid.map vs. FacetGrid.map_dataframe",
    "text": "FacetGrid.map vs. FacetGrid.map_dataframe\nWhen you use FacetGrid.map(func, \"col1\", \"col2\", ...), the function func is passed the values of the columns \"col1\" and \"col2\" (and more if needed) as parameters 1 and 2 (args[0], args[1], …). In addition, the function always receives a keyword argument named color=.\n\ndef scatter(*args, **kwargs):\n    return plt.scatter(args[0], args[1], **kwargs)\n    \ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(scatter, \"bill_length_mm\", \"flipper_length_mm\") ;\n\nWhen you use FacetGrid.map_dataframe(func, \"col1\", \"col2\", ...), the function func is passed the names \"col1\" and \"col2\" (and more if needed) as parameters 1 and 2 (args[0], args[1], …), and the filtered dataframe as keyword argument data=. In addition, the function always receives a keyword argument named color=.\n\ndef scatterplot(*args, **kwargs):\n    return sns.scatterplot(x=args[0], y=args[1], **kwargs)\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map_dataframe(scatterplot, \"bill_length_mm\", \"flipper_length_mm\") ;\n\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(sns.histplot, \"bill_length_mm\") ;\n\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(sns.kdeplot, \"bill_length_mm\") ;\n\n\nsns.pairplot(penguins, hue=\"species\") ;\n\n\nsns.pairplot(penguins, hue=\"sex\") ;",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Plotting with Python</span>"
    ]
  },
  {
    "objectID": "../conda.html",
    "href": "../conda.html",
    "title": "Conda",
    "section": "",
    "text": "Conda enviroments\nIn bioinformatics, we install packages and programs so we can use them in our analyses and pipelines. Sometimes, however, the versions of packages you need for one project conflicts with the versions you need for other projects that you work on in parallel. Such conflicts seem like an unsolvable problem. Would it not be fantastic if you could create a small insulated world for each project, which then only contained the packages you needed for that particular project?. If each project had its own isolated world, then there would be no such version conflicts. Fortunately, there is a tool that lets you do just that, and its name is Conda.\n“Conda is an open source package management system and environment management system for installing multiple versions of software packages and their dependencies and switching easily between them.”\nThe small worlds that Conda creates are called “environments”. You can create as many environments as you like, and then use each one for a separate bioinformatics project, a course, a bachelor project, or whatever you would like to insulate from everything else. Conda also downloads and installs the packages for you and it makes sure that the software packages you install in each environment are compatible. It even makes sure that packages needed by packages (dependencies) are also installed. Conda is truly awesome.\nIn this case you need to create a new enviroment where you install franklin\nYou will need franklin for downloading assignments. You will also be able to choose a enviroment in franklin that specifially fits the assignment you want to make.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conda</span>"
    ]
  },
  {
    "objectID": "../gitlab.html",
    "href": "../gitlab.html",
    "title": "Introduction to GitLab",
    "section": "",
    "text": "What is GitLab?\nGitLab is a complete DevOps platform that combines Git repository hosting with powerful collaboration and automation tools. While GitHub might be more familiar, GitLab offers unique advantages for educational environments, especially when self-hosted by universities.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#what-is-gitlab",
    "href": "../gitlab.html#what-is-gitlab",
    "title": "Introduction to GitLab",
    "section": "",
    "text": "GitLab vs GitHub\n\n\n\nFeature\nGitLab\nGitHub\n\n\n\n\nHosting\nSelf-hosted or cloud\nPrimarily cloud\n\n\nCI/CD\nBuilt-in, unlimited\nActions with limits\n\n\nPrivacy\nComplete control (self-hosted)\nMicrosoft-owned\n\n\nFree Features\nMore generous\nMore limited\n\n\nIntegration\nAll-in-one platform\nRequires multiple tools",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#why-gitlab-for-education",
    "href": "../gitlab.html#why-gitlab-for-education",
    "title": "Introduction to GitLab",
    "section": "Why GitLab for Education?",
    "text": "Why GitLab for Education?\nEducational institutions often choose GitLab because:\n\nData Control: Self-hosted instances keep student work on university servers\nUnlimited CI/CD: No minute limits for automated testing and deployment\nPrivate Projects: Free private repositories for all students\nIntegration: Works seamlessly with university authentication (LDAP, SAML)\nCompliance: Meets educational privacy requirements",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#core-gitlab-features",
    "href": "../gitlab.html#core-gitlab-features",
    "title": "Introduction to GitLab",
    "section": "Core GitLab Features",
    "text": "Core GitLab Features\n\nRepository Management\nGitLab hosts Git repositories with additional features:\ngraph LR\n    A[Local Code] --&gt;|git push| B[GitLab Repo]\n    B --&gt;|git pull| C[Collaborator]\n    B --&gt;|Merge Request| D[Code Review]\n    D --&gt;|Approved| E[Main Branch]\n\n\nProject Organization\nGitLab Instance\n├── Groups (Courses)\n│   ├── Subgroups (Semesters)\n│   └── Projects (Exercises)\n└── Personal Projects\n    └── Student Work\n\n\nCI/CD Pipelines\nAutomatic testing and deployment:\n# .gitlab-ci.yml\ntest:\n  script:\n    - python -m pytest\n    - pixi run test-notebook\n  \ndeploy:\n  script:\n    - franklin exercise publish",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#getting-started-with-gitlab",
    "href": "../gitlab.html#getting-started-with-gitlab",
    "title": "Introduction to GitLab",
    "section": "Getting Started with GitLab",
    "text": "Getting Started with GitLab\n\nStep 1: Access Your GitLab Instance\nUniversities typically host GitLab at: - gitlab.university.edu - git.university.edu - code.university.edu\n# Example URLs\nhttps://gitlab.au.dk        # Aarhus University\nhttps://gitlab.ethz.ch      # ETH Zurich\nhttps://gitlab.com          # Public GitLab\n\n\nStep 2: Sign In\nMost university GitLab instances use Single Sign-On (SSO):\n\nNavigate to your GitLab instance\nClick “Sign in with SSO” or “University Login”\nEnter your university credentials\nAuthorize GitLab access\n\n\n\n\n\n\n\nFirst Time Login\n\n\n\nOn first login, GitLab may ask to: - Confirm your email - Set up two-factor authentication - Complete your profile\n\n\n\n\nStep 3: Set Up SSH Keys\nSSH keys enable secure, password-less access to GitLab.\n\nGenerate SSH Keys\n# Check for existing keys\nls -la ~/.ssh\n\n# Generate new Ed25519 key (recommended)\nssh-keygen -t ed25519 -C \"your.email@university.edu\"\n\n# Or RSA key (fallback)\nssh-keygen -t rsa -b 4096 -C \"your.email@university.edu\"\nWhen prompted: 1. Press Enter for default location 2. Enter a passphrase (optional but recommended) 3. Confirm passphrase\n\n\nAdd SSH Key to GitLab\n\nCopy your public key:\n# For Ed25519\ncat ~/.ssh/id_ed25519.pub\n\n# For RSA\ncat ~/.ssh/id_rsa.pub\nAdd to GitLab:\n\nClick your avatar → Preferences\nNavigate to SSH Keys in sidebar\nPaste your public key\nGive it a title (e.g., “Laptop”)\nSet expiration (optional)\nClick Add key\n\nTest connection:\nssh -T git@gitlab.university.edu\n# Should see: \"Welcome to GitLab, @username!\"",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#working-with-gitlab-projects",
    "href": "../gitlab.html#working-with-gitlab-projects",
    "title": "Introduction to GitLab",
    "section": "Working with GitLab Projects",
    "text": "Working with GitLab Projects\n\nCreating a Project\n\nClick New project button\nChoose creation method:\n\nCreate blank project: Start from scratch\nCreate from template: Use predefined templates\nImport project: From GitHub, Bitbucket, etc.\n\nConfigure project:\nProject name: my-assignment\nProject URL: gitlab.university.edu/username/\nVisibility: Private (default for coursework)\nInitialize with README: Yes\n\n\n\nCloning a Project\n# With SSH (recommended)\ngit clone git@gitlab.university.edu:username/project.git\n\n# With HTTPS (requires password)\ngit clone https://gitlab.university.edu/username/project.git\n\n# Clone into specific folder\ngit clone git@gitlab.university.edu:username/project.git my-folder\n\n\nBasic GitLab Workflow\n# 1. Clone project\ngit clone git@gitlab.university.edu:course/exercise.git\ncd exercise\n\n# 2. Create feature branch\ngit checkout -b my-solution\n\n# 3. Make changes\necho \"Solution code\" &gt; solution.py\n\n# 4. Commit changes\ngit add solution.py\ngit commit -m \"Add solution for problem 1\"\n\n# 5. Push to GitLab\ngit push origin my-solution\n\n# 6. Create Merge Request in GitLab UI",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#merge-requests-mrs",
    "href": "../gitlab.html#merge-requests-mrs",
    "title": "Introduction to GitLab",
    "section": "Merge Requests (MRs)",
    "text": "Merge Requests (MRs)\nMerge Requests are GitLab’s way of proposing changes:\n\nCreating a Merge Request\n\nPush your branch to GitLab\nGitLab shows banner: “Create merge request”\nFill in details:\n\nTitle: Clear description of changes\nDescription: Detailed explanation\nAssignee: Person to review\nMilestone: Related deadline\nLabels: Categories (bug, feature, etc.)\n\n\n\n\nMerge Request Features\n\nCode Review: Line-by-line comments\nCI/CD Integration: Automatic testing\nDiscussions: Threaded conversations\nApprovals: Require reviews before merging\nDiffs: Visual comparison of changes",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#gitlab-cicd",
    "href": "../gitlab.html#gitlab-cicd",
    "title": "Introduction to GitLab",
    "section": "GitLab CI/CD",
    "text": "GitLab CI/CD\n\nUnderstanding Pipelines\nGitLab CI/CD runs automated tasks when you push code:\ngraph LR\n    A[Push Code] --&gt; B[Pipeline Triggers]\n    B --&gt; C[Build Stage]\n    C --&gt; D[Test Stage]\n    D --&gt; E[Deploy Stage]\n    E --&gt; F[Success/Failure]\n\n\nBasic Pipeline Configuration\nCreate .gitlab-ci.yml in your repository:\n# Define stages\nstages:\n  - build\n  - test\n  - deploy\n\n# Build job\nbuild:\n  stage: build\n  script:\n    - echo \"Building project...\"\n    - pip install -r requirements.txt\n\n# Test job\ntest:\n  stage: test\n  script:\n    - echo \"Running tests...\"\n    - python -m pytest\n    - python -m mypy .\n\n# Deploy job (only on main branch)\ndeploy:\n  stage: deploy\n  script:\n    - echo \"Deploying...\"\n    - franklin exercise publish\n  only:\n    - main\n\n\nPipeline Status\nView pipeline status: - Green checkmark ✓ = Passed - Red X = Failed - Yellow circle = Running - Gray circle = Pending",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#gitlab-for-franklin-users",
    "href": "../gitlab.html#gitlab-for-franklin-users",
    "title": "Introduction to GitLab",
    "section": "GitLab for Franklin Users",
    "text": "GitLab for Franklin Users\n\nStudent Workflow\nFranklin integrates seamlessly with GitLab:\n# Download exercise from GitLab\nfranklin download\n# → Automatically uses GitLab API\n# → Clones with proper authentication\n\n# Work on exercise\nfranklin jupyter\n\n# Commit changes\ngit add -A\ngit commit -m \"Complete exercise\"\ngit push\n\n\nEducator Workflow\n# Create exercise repository\nfranklin exercise new\n\n# Set up GitLab project\ngit remote add origin git@gitlab.university.edu:course/exercise.git\ngit push -u origin main\n\n# Configure CI/CD\ncat &gt; .gitlab-ci.yml &lt;&lt; EOF\ntest:\n  image: python:3.10\n  script:\n    - pip install pixi\n    - pixi run test-notebook\nEOF\n\n# Publish to students\nfranklin exercise publish\n\n\nGitLab Groups for Courses\nOrganize courses using GitLab groups:\ngitlab.university.edu/\n├── cs101-fall2024/          # Course group\n│   ├── exercises/            # Subgroup\n│   │   ├── week1/           # Exercise project\n│   │   ├── week2/\n│   │   └── final-project/\n│   └── solutions/            # Private subgroup\n└── cs102-spring2025/",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#advanced-gitlab-features",
    "href": "../gitlab.html#advanced-gitlab-features",
    "title": "Introduction to GitLab",
    "section": "Advanced GitLab Features",
    "text": "Advanced GitLab Features\n\nIssue Tracking\nTrack tasks, bugs, and questions:\n# Issue Template\n## Problem Description\nDescribe the issue...\n\n## Steps to Reproduce\n1. Run `franklin jupyter`\n2. Open notebook\n3. Error appears\n\n## Expected Behavior\nWhat should happen...\n\n## Environment\n- OS: Windows 11\n- Franklin: 0.24.165\n\n\nWiki Pages\nDocument your project: - Project overview - API documentation - Installation guide - Troubleshooting\n\n\nProtected Branches\nPrevent accidental changes: 1. Settings → Repository → Protected branches 2. Select branch (e.g., main) 3. Configure: - Allowed to merge: Maintainers - Allowed to push: No one\n\n\nAccess Tokens\nFor automation and scripts:\n# Create personal access token\n# GitLab → Settings → Access Tokens\n\n# Use in scripts\ngit clone https://oauth2:YOUR_TOKEN@gitlab.university.edu/project.git\n\n# Or with Franklin\nexport GITLAB_TOKEN=YOUR_TOKEN\nfranklin download --token",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#troubleshooting-gitlab",
    "href": "../gitlab.html#troubleshooting-gitlab",
    "title": "Introduction to GitLab",
    "section": "Troubleshooting GitLab",
    "text": "Troubleshooting GitLab\n\nSSH Connection Issues\n# Debug SSH connection\nssh -vvv git@gitlab.university.edu\n\n# Common fixes:\n# 1. Check SSH agent\nssh-add -l\n\n# 2. Add key to agent\nssh-add ~/.ssh/id_ed25519\n\n# 3. Check permissions\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/id_ed25519\n\n\nAuthentication Problems\n# HTTPS credentials\ngit config --global credential.helper store\n\n# SSH configuration\ncat &gt;&gt; ~/.ssh/config &lt;&lt; EOF\nHost gitlab.university.edu\n    User git\n    IdentityFile ~/.ssh/id_ed25519\n    Port 22\nEOF\n\n\nPush Rejected\nCommon reasons and solutions:\n\nProtected branch: Create merge request instead\nNo permissions: Check project access level\nLarge files: Use Git LFS for files &gt;100MB\nOutdated branch: Pull and merge first\n\n# Update your branch\ngit pull origin main\ngit merge main\ngit push",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#gitlab-best-practices",
    "href": "../gitlab.html#gitlab-best-practices",
    "title": "Introduction to GitLab",
    "section": "GitLab Best Practices",
    "text": "GitLab Best Practices\n\nFor Students\n✅ Do: - Use descriptive commit messages - Create merge requests for review - Keep repositories organized - Use issues for questions - Tag releases for submissions\n❌ Don’t: - Commit sensitive data (passwords, keys) - Force push to shared branches - Delete other people’s branches - Ignore CI/CD failures\n\n\nFor Educators\n✅ Do: - Use templates for consistency - Set up CI/CD for auto-grading - Create protected branches - Document requirements in README - Use milestones for deadlines\n❌ Don’t: - Store solutions in public repos - Forget to test pipelines - Ignore student access issues - Skip documentation",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#gitlab-vs-local-git",
    "href": "../gitlab.html#gitlab-vs-local-git",
    "title": "Introduction to GitLab",
    "section": "GitLab vs Local Git",
    "text": "GitLab vs Local Git\n\n\n\nOperation\nLocal Git\nGitLab\n\n\n\n\nVersion control\n✓\n✓\n\n\nBranching\n✓\n✓\n\n\nCollaboration\n✗\n✓\n\n\nBackup\n✗\n✓\n\n\nCI/CD\n✗\n✓\n\n\nIssue tracking\n✗\n✓\n\n\nCode review\n✗\n✓\n\n\nWiki/Docs\n✗\n✓",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#quick-reference",
    "href": "../gitlab.html#quick-reference",
    "title": "Introduction to GitLab",
    "section": "Quick Reference",
    "text": "Quick Reference\n\nEssential GitLab Commands\n# Clone project\ngit clone git@gitlab.university.edu:project.git\n\n# Add GitLab remote\ngit remote add origin git@gitlab.university.edu:project.git\n\n# Push new branch\ngit push -u origin feature-branch\n\n# Update from GitLab\ngit pull origin main\n\n# Check remote\ngit remote -v\n\n\nGitLab CLI (Optional)\n# Install GitLab CLI\nbrew install glab        # macOS\nwinget install glab      # Windows\n\n# Authenticate\nglab auth login\n\n# Create MR from terminal\nglab mr create --title \"Add feature\"\n\n# View pipelines\nglab pipeline list",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#resources",
    "href": "../gitlab.html#resources",
    "title": "Introduction to GitLab",
    "section": "Resources",
    "text": "Resources\n\nDocumentation\n\nGitLab Docs\nGitLab University\nGit Basics\n\n\n\nLearning\n\nGitLab 101\nCI/CD Examples\nGitLab Flow",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#summary",
    "href": "../gitlab.html#summary",
    "title": "Introduction to GitLab",
    "section": "Summary",
    "text": "Summary\nGitLab is more than just Git hosting—it’s a complete platform for: - Version Control: Track all changes to your code - Collaboration: Work with classmates and instructors - Automation: Test and deploy automatically - Organization: Manage projects, issues, and documentation\nFor Franklin users, GitLab provides the infrastructure for distributing exercises, submitting solutions, and automated grading. Master these GitLab basics, and you’ll be ready for both academic work and professional software development!",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Introduction to GitLab</span>"
    ]
  },
  {
    "objectID": "../docker.html",
    "href": "../docker.html",
    "title": "Introduction to Docker",
    "section": "",
    "text": "What is Docker?\nDocker is a platform that packages applications and their dependencies into portable containers. Think of a container as a lightweight, self-contained box that includes everything needed to run your software—the code, runtime, system tools, libraries, and settings. This ensures your application runs identically on any computer, regardless of the operating system or installed software.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#what-is-docker",
    "href": "../docker.html#what-is-docker",
    "title": "Introduction to Docker",
    "section": "",
    "text": "The Problem Docker Solves\nWithout Docker: - “It works on my machine!” but fails on yours - Different versions of Python, libraries, or system tools - Complex installation instructions that vary by OS - Conflicts between projects requiring different dependencies - Difficulty reproducing research or coursework\nWith Docker: - Same environment everywhere - No installation conflicts - One command to run complex applications - Perfect reproducibility - Isolation between projects",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#how-docker-works",
    "href": "../docker.html#how-docker-works",
    "title": "Introduction to Docker",
    "section": "How Docker Works",
    "text": "How Docker Works\n\nContainers vs Virtual Machines\ngraph TB\n    subgraph \"Virtual Machine\"\n        VM[Guest OS&lt;br/&gt;20GB+] --&gt; APP1[App A]\n        VM --&gt; APP2[App B]\n        HOST1[Host OS] --&gt; HYP[Hypervisor] --&gt; VM\n    end\n    \n    subgraph \"Docker Container\"\n        HOST2[Host OS] --&gt; DOC[Docker Engine]\n        DOC --&gt; CON1[Container A&lt;br/&gt;~100MB]\n        DOC --&gt; CON2[Container B&lt;br/&gt;~100MB]\n    end\nVirtual Machines: - Full operating system per VM - Heavy resource usage (GB of RAM) - Slow to start (minutes) - Complete isolation\nDocker Containers: - Share host OS kernel - Lightweight (MB of RAM) - Fast to start (seconds) - Process-level isolation\n\n\nCore Docker Concepts\n\nImage: A blueprint or template for creating containers (like a recipe)\nContainer: A running instance of an image (like a cooked meal)\nDockerfile: Instructions for building an image (like writing a recipe)\nRegistry: Storage for sharing images (like a cookbook library)",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#docker-for-franklin-users",
    "href": "../docker.html#docker-for-franklin-users",
    "title": "Introduction to Docker",
    "section": "Docker for Franklin Users",
    "text": "Docker for Franklin Users\nFranklin uses Docker to ensure exercises run identically for all students:\n\nHow Franklin Uses Docker\ngraph LR\n    A[Franklin Exercise] --&gt; B[Docker Image]\n    B --&gt; C[Container Starts]\n    C --&gt; D[JupyterLab Runs]\n    D --&gt; E[Student Works]\n    E --&gt; F[Work Saved Locally]\n\nExercise includes Docker configuration\nFranklin pulls required image\nCreates isolated container\nMounts your files inside\nRuns JupyterLab in container\nYour work is saved on your computer\n\n\n\nStudent Perspective\nAs a Franklin student, Docker works behind the scenes:\n# Franklin handles Docker automatically\nfranklin jupyter\n# → Downloads Docker image if needed\n# → Starts container\n# → Opens JupyterLab\n# → Everything just works!\nYou don’t need to know Docker commands—Franklin manages everything.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#installing-docker",
    "href": "../docker.html#installing-docker",
    "title": "Introduction to Docker",
    "section": "Installing Docker",
    "text": "Installing Docker\n\nWindowsmacOSLinux\n\n\n\nDownload Docker Desktop:\n\nVisit docker.com/products/docker-desktop\nDownload for Windows\nRun installer\n\nSystem Requirements:\n\nWindows 10/11 Pro, Enterprise, or Education\nWSL 2 enabled\n4GB RAM minimum\n\nPost-Installation:\n\nStart Docker Desktop\nWait for “Docker is running” status\nTest: docker --version\n\n\n\n\n\nDownload Docker Desktop:\n\nVisit docker.com/products/docker-desktop\nChoose Intel or Apple Silicon version\nRun installer\n\nSystem Requirements:\n\nmacOS 10.15 or newer\n4GB RAM minimum\n\nPost-Installation:\n\nStart Docker Desktop from Applications\nGrant necessary permissions\nTest: docker --version\n\n\n\n\n# Ubuntu/Debian\nsudo apt update\nsudo apt install docker.io\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n# Log out and back in\n\n# Fedora\nsudo dnf install docker\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n# Log out and back in\n\n# Test installation\ndocker --version\ndocker run hello-world",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#basic-docker-commands",
    "href": "../docker.html#basic-docker-commands",
    "title": "Introduction to Docker",
    "section": "Basic Docker Commands",
    "text": "Basic Docker Commands\nWhile Franklin handles Docker automatically, understanding basic commands helps troubleshooting:\n\nWorking with Images\n# List local images\ndocker images\n\n# Pull an image\ndocker pull python:3.10\n\n# Remove an image\ndocker rmi python:3.10\n\n# Search for images\ndocker search jupyter\n\n\nWorking with Containers\n# List running containers\ndocker ps\n\n# List all containers\ndocker ps -a\n\n# Stop a container\ndocker stop container_name\n\n# Remove a container\ndocker rm container_name\n\n# View container logs\ndocker logs container_name\n\n\nRunning Containers\n# Basic run\ndocker run python:3.10 python --version\n\n# Interactive mode\ndocker run -it python:3.10 bash\n\n# Run with port mapping\ndocker run -p 8888:8888 jupyter/base-notebook\n\n# Run with volume mount\ndocker run -v /local/path:/container/path python:3.10\n\n# Run in background\ndocker run -d nginx",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#understanding-dockerfiles",
    "href": "../docker.html#understanding-dockerfiles",
    "title": "Introduction to Docker",
    "section": "Understanding Dockerfiles",
    "text": "Understanding Dockerfiles\nA Dockerfile defines how to build an image:\n# Start from base image\nFROM python:3.10-slim\n\n# Set working directory\nWORKDIR /app\n\n# Copy requirements file\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Define startup command\nCMD [\"python\", \"app.py\"]\n\nFranklin Exercise Dockerfile\nFranklin exercises typically use:\n# Base scientific Python image\nFROM munchgroup/franklin-jupyter:latest\n\n# Install exercise-specific packages\nRUN pip install pandas numpy matplotlib\n\n# Copy exercise files\nCOPY exercise.ipynb /home/jovyan/\n\n# Set up environment\nENV PYTHONPATH=/home/jovyan\n\n# Start JupyterLab\nCMD [\"jupyter\", \"lab\"]",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#docker-compose",
    "href": "../docker.html#docker-compose",
    "title": "Introduction to Docker",
    "section": "Docker Compose",
    "text": "Docker Compose\nFor multi-container applications:\n# docker-compose.yml\nversion: '3'\n\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n  \n  database:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: secret\n    volumes:\n      - db-data:/var/lib/postgresql/data\n\nvolumes:\n  db-data:\nRun with:\ndocker-compose up    # Start services\ndocker-compose down  # Stop services",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#docker-for-development",
    "href": "../docker.html#docker-for-development",
    "title": "Introduction to Docker",
    "section": "Docker for Development",
    "text": "Docker for Development\n\nCreating Development Environments\n# Python development\ndocker run -it -v $(pwd):/workspace python:3.10 bash\n\n# Node.js development\ndocker run -it -v $(pwd):/app node:18 bash\n\n# Data science environment\ndocker run -p 8888:8888 -v $(pwd):/home/jovyan jupyter/scipy-notebook\n\n\nBuilding Custom Images\n\nCreate Dockerfile:\n\nFROM python:3.10\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\n\nBuild image:\n\ndocker build -t my-app .\n\nRun container:\n\ndocker run my-app",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#docker-best-practices",
    "href": "../docker.html#docker-best-practices",
    "title": "Introduction to Docker",
    "section": "Docker Best Practices",
    "text": "Docker Best Practices\n\nImage Optimization\n✅ Do: - Use specific version tags (python:3.10, not python:latest) - Minimize layers by combining RUN commands - Use .dockerignore to exclude unnecessary files - Start with minimal base images (alpine, slim) - Clean up after installations\n❌ Don’t: - Include sensitive data in images - Run as root unnecessarily - Use large base images when smaller ones work - Ignore security updates\n\n\nContainer Management\n✅ Do: - Name your containers meaningfully - Use volumes for persistent data - Set resource limits - Use health checks - Clean up stopped containers\n❌ Don’t: - Store data inside containers - Expose unnecessary ports - Run multiple processes per container - Ignore container logs",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#troubleshooting-docker",
    "href": "../docker.html#troubleshooting-docker",
    "title": "Introduction to Docker",
    "section": "Troubleshooting Docker",
    "text": "Troubleshooting Docker\n\nCommon Issues\n\nDocker Daemon Not Running\n# Check status\ndocker version\n\n# Start Docker\n# macOS/Windows: Start Docker Desktop app\n# Linux:\nsudo systemctl start docker\n\n\nPermission Denied\n# Linux: Add user to docker group\nsudo usermod -aG docker $USER\n# Log out and back in\n\n# Or use sudo (not recommended)\nsudo docker run hello-world\n\n\nPort Already in Use\n# Find process using port\nlsof -i :8888  # macOS/Linux\nnetstat -ano | findstr :8888  # Windows\n\n# Use different port\ndocker run -p 8889:8888 image_name\n\n\nOut of Disk Space\n# Clean up unused resources\ndocker system prune -a\n\n# Remove unused images\ndocker image prune -a\n\n# Remove stopped containers\ndocker container prune\n\n# Remove unused volumes\ndocker volume prune\n\n\n\nFranklin-Specific Issues\n\nContainer Won’t Start\n# Check Franklin logs\nfranklin jupyter --debug\n\n# Manually pull image\ndocker pull munchgroup/franklin-jupyter:latest\n\n# Reset Franklin Docker settings\nfranklin docker reset\n\n\nFiles Not Visible\n# Check mount points\ndocker inspect container_name | grep Mounts\n\n# Verify permissions\nls -la exercise_folder/\n\n# Run with explicit mount\ndocker run -v $(pwd):/home/jovyan image_name",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#docker-in-research",
    "href": "../docker.html#docker-in-research",
    "title": "Introduction to Docker",
    "section": "Docker in Research",
    "text": "Docker in Research\n\nReproducible Research\nDocker ensures your research is reproducible:\n# Reproducible analysis environment\nFROM rocker/tidyverse:4.2.0\n\n# Install specific package versions\nRUN R -e \"install.packages('ggplot2', version='3.4.0')\"\n\n# Copy analysis scripts\nCOPY analysis.R /home/rstudio/\n\n# Document environment\nCOPY README.md /home/rstudio/\n\n\nSharing Research\n# Save image to file\ndocker save my-research &gt; research-env.tar\n\n# Load on another computer\ndocker load &lt; research-env.tar\n\n# Or push to registry\ndocker tag my-research username/research:v1\ndocker push username/research:v1",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#advanced-docker-topics",
    "href": "../docker.html#advanced-docker-topics",
    "title": "Introduction to Docker",
    "section": "Advanced Docker Topics",
    "text": "Advanced Docker Topics\n\nMulti-Stage Builds\nOptimize image size:\n# Build stage\nFROM python:3.10 AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip wheel --no-cache-dir --wheel-dir /wheels -r requirements.txt\n\n# Runtime stage\nFROM python:3.10-slim\nWORKDIR /app\nCOPY --from=builder /wheels /wheels\nRUN pip install --no-cache /wheels/*\nCOPY . .\nCMD [\"python\", \"app.py\"]\n\n\nDocker Networks\nConnect containers:\n# Create network\ndocker network create mynet\n\n# Run containers on network\ndocker run --network mynet --name db postgres\ndocker run --network mynet --name app my-app\n\n# Containers can now reach each other by name\n\n\nDocker Volumes\nPersist data:\n# Create named volume\ndocker volume create mydata\n\n# Use volume\ndocker run -v mydata:/data my-app\n\n# Backup volume\ndocker run --rm -v mydata:/source -v $(pwd):/backup \\\n  alpine tar czf /backup/backup.tar.gz -C /source .",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#docker-security",
    "href": "../docker.html#docker-security",
    "title": "Introduction to Docker",
    "section": "Docker Security",
    "text": "Docker Security\n\nSecurity Best Practices\n\nKeep Docker Updated: Regular security patches\nScan Images: Use docker scan image_name\nDon’t Run as Root: Use USER directive in Dockerfile\nLimit Resources: Set memory and CPU limits\nUse Official Images: Verified and maintained\nSign Images: Docker Content Trust\n\n\n\nSecurity Scanning\n# Scan for vulnerabilities\ndocker scan my-image\n\n# Check image layers\ndocker history my-image\n\n# Inspect image\ndocker inspect my-image",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#quick-reference",
    "href": "../docker.html#quick-reference",
    "title": "Introduction to Docker",
    "section": "Quick Reference",
    "text": "Quick Reference\n\nEssential Commands\n\n\n\nCommand\nPurpose\n\n\n\n\ndocker run image\nRun container from image\n\n\ndocker ps\nList running containers\n\n\ndocker images\nList local images\n\n\ndocker stop container\nStop container\n\n\ndocker rm container\nRemove container\n\n\ndocker rmi image\nRemove image\n\n\ndocker logs container\nView container logs\n\n\ndocker exec -it container bash\nEnter running container\n\n\ndocker build -t name .\nBuild image from Dockerfile\n\n\ndocker-compose up\nStart services\n\n\n\n\n\nUseful Flags\n\n\n\nFlag\nPurpose\n\n\n\n\n-d\nRun in background (detached)\n\n\n-it\nInteractive terminal\n\n\n-p 8080:80\nMap ports (host:container)\n\n\n-v /path:/path\nMount volume\n\n\n--rm\nRemove container after exit\n\n\n--name myname\nName container\n\n\n-e VAR=value\nSet environment variable",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#resources",
    "href": "../docker.html#resources",
    "title": "Introduction to Docker",
    "section": "Resources",
    "text": "Resources\n\nDocumentation\n\nDocker Docs\nDocker Hub\nDocker Compose\n\n\n\nLearning\n\nDocker 101 Tutorial\nPlay with Docker\nDocker for Data Science",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  },
  {
    "objectID": "../docker.html#summary",
    "href": "../docker.html#summary",
    "title": "Introduction to Docker",
    "section": "Summary",
    "text": "Summary\nDocker revolutionizes software deployment by: - Ensuring Consistency: Same environment everywhere - Simplifying Setup: One command to run complex stacks - Enabling Isolation: No conflicts between projects - Supporting Reproducibility: Perfect for research and education\nFor Franklin users, Docker works invisibly to provide a consistent, reliable environment for all exercises. While you don’t need to be a Docker expert, understanding the basics helps you troubleshoot issues and leverage Docker for your own projects beyond Franklin.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introduction to Docker</span>"
    ]
  }
]