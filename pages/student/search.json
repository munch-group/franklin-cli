[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Franklin",
    "section": "",
    "text": "The student runs a jupyter notebook on their own computer in a way that lets them focus on content and learning without the frustration by library incompatibilities and platform specific dependencies.\nOn both Mac and Windows, running the following command, prompts the student to select course and exercise and then downloads a folder with a jupyter notebook.\n\n\nTerminal\n\nfranklin download\n\nThe student runs the following command, which again prompts for course and exercise and launches JupyterLab from an environment on the student’s computer with all required dependencies preinstalled.\n\n\nTerminal\n\nfranklin jupyter\n\nThe environment and notebook is exactly the same, wether on Mac or Windows, allowing them to work together, compare results, and receive uniform and unambiguous feedback from instructors.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index.html</span>"
    ]
  },
  {
    "objectID": "../tutorials/terminal.html",
    "href": "../tutorials/terminal.html",
    "title": "2  The terminal",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nA terminal is a text-based interface that allows users to interact with the operating system by typing commands. It provides direct access to the system shell—a program that interprets user input and executes corresponding instructions.\nHistorically, “terminals” referred to physical devices (e.g., teletypewriters or CRT monitors) connected to mainframe computers. In modern computing, a terminal is typically a software application (e.g., Terminal on macOS, GNOME Terminal on Linux, Command Prompt or PowerShell on Windows) that emulates this interface.\nKey characteristics of a terminal include:\nCommand-Line Interface (CLI): Unlike graphical user interfaces (GUIs), a terminal requires textual input and returns textual output. Shell Access: The terminal runs a shell such as bash, zsh, or fish, which interprets and executes user commands (e.g., file manipulation, process control, networking). Script Execution: Users can run scripts, automate tasks, and chain commands using control operators (e.g., &&, |, &gt;, etc.). Remote Access: Terminals can be used to log into remote systems via protocols such as SSH, providing a low-overhead method for remote system administration and programming. The terminal is a powerful tool, particularly in software development, system administration, and high-performance computing. It enables reproducibility, fine-grained control, and automation, though it requires users to become familiar with a command language and often lacks the immediate feedback and discoverability of graphical interfaces.\nCtrl-C for abort",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The terminal</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html",
    "href": "../tutorials/jupyterlab.html",
    "title": "3  Jupyterlab",
    "section": "",
    "text": "4 Starting jupyter lab\nIntroduction to JupyterLab\nJupyterLab is the next-generation web-based user interface for Project Jupyter, designed to offer a flexible and extensible environment for interactive computing. It builds upon the classic Jupyter Notebook interface by integrating a wide range of tools—code consoles, terminals, text editors, data file viewers, and notebooks—into a unified workspace.\nThe JupyterLab interface is organized into a multi-tab layout, resembling an integrated development environment (IDE). Users can open multiple documents side by side (e.g., a Python script next to a Markdown file and a terminal), drag-and-drop tabs, and link interactive views of the same dataset. It supports live code execution, output rendering (including plots and LaTeX equations), and seamless integration with kernels for many languages, though Python is most common.\nKey features of JupyterLab include:\nNotebook authoring: Full support for .ipynb notebooks with executable code cells, Markdown, and rich outputs. Code consoles: Interactive REPLs connected to notebooks or scripts for testing code snippets. Text and code editing: Built-in editor with syntax highlighting, version control integration, and support for many file types. Terminal access: Direct command-line interface within the browser for shell-level operations. Extensibility: Modular architecture that supports plugins for additional language kernels, visualizations, or custom workflows. JupyterLab preserves all the functionality of the classic notebook interface while offering a more powerful and customizable platform suitable for complex data science workflows, scientific research, and reproducible computing. It is widely used in academia, industry, and education due to its interactive nature and support for literate programming principles.\nJupyterLab is a highly extensible, feature-rich notebook authoring application and editing environment, and is a part of Project Jupyter, a large umbrella project centered around the goal of providing tools (and standards) for interactive computing with computational notebooks.\nA computational notebook is a shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, graphs and figures, and interactive controls. A notebook, along with an editor like JupyterLab, provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others.\nJupyterLab is a sibling to other notebook authoring applications under the Project Jupyter umbrella, like Jupyter Notebook and Jupyter Desktop. JupyterLab offers a more advanced, feature rich, customizable experience compared to Jupyter Notebook.MM\nTerminal commands:\nIt then appears in your default browser.|",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#keyboard-shortcuts",
    "href": "../tutorials/jupyterlab.html#keyboard-shortcuts",
    "title": "3  Jupyterlab",
    "section": "5.1 Keyboard shortcuts",
    "text": "5.1 Keyboard shortcuts\n\n5.1.1 Command Mode in Jupyter Notebooks\nIn Jupyter Notebooks, Command Mode is one of the two main interaction modes—the other being Edit Mode. Command Mode is active when the cell border is blue, indicating that keyboard commands will be interpreted as notebook-level operations rather than editing the cell’s content.\nCommand Mode allows users to manage cells and perform structural modifications without using the mouse. This enhances efficiency, especially when working with large notebooks. Pressing Esc while in a cell activates Command Mode.\n\nCommon 5.1.1.1\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nEnter\nSwitch to Edit Mode in the selected cell\n\n\nA\nInsert a new cell above the current cell\n\n\nB\nInsert a new cell below the current cell\n\n\nD, D\nDelete the selected cell (press D twice quickly)\n\n\nZ\nUndo the last cell deletion\n\n\nY\nChange cell type to code\n\n\nM\nChange cell type to Markdown\n\n\nC\nCopy the selected cell\n\n\nX\nCut the selected cell\n\n\nV\nPaste cell below\n\n\nShift + V\nPaste cell above\n\n\nShift + Up/Down\nExtend selection to multiple cells\n\n\nCtrl + S (or Cmd + S on macOS)\nSave the notebook\n\n\nH\nShow all keyboard shortcuts\n\n\n0, 0\nRestart the kernel (press 0 twice quickly)\n\n\nShift + M (in Command Mode)\nMerge selected cells\n\n\n\nThese shortcuts make navigation and cell management significantly faster, enabling an efficient coding and documentation workflow within Jupyter Notebooks.\n\n\n\n5.1.2 Edit Mode in Jupyter Notebooks\nEdit Mode is activated when a cell’s border turns green, allowing the user to directly modify the contents of the cell. You can enter Edit Mode by pressing Enter while a cell is selected in Command Mode. This mode is primarily used for writing and editing code or Markdown content within cells.\n\nCommon 5.1.2.1\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nCtrl + Enter\nRun the current cell and remain in Edit Mode\n\n\nShift + Enter\nRun the current cell and move to the next cell\n\n\nAlt + Enter\nRun the current cell and insert a new cell below\n\n\nEsc\nSwitch to Command Mode\n\n\nCtrl + /\nToggle comment on selected lines (code cells only)\n\n\nTab\nCode completion or indent\n\n\nShift + Tab\nShow tooltip/help for the object under cursor\n\n\nCtrl + ]\nIndent the current line or selection\n\n\nCtrl + [\nDedent the current line or selection\n\n\nCtrl + A\nSelect all content in the cell\n\n\nCtrl + Z\nUndo the last change\n\n\nCtrl + Y\nRedo the last undone change\n\n\nCtrl + Shift + -\nSplit the current cell at cursor position into two cells\n\n\nCtrl + S (or Cmd + S)\nSave the notebook\n\n\nCtrl + Shift + -\nSplit the cell at the current cursor position\n\n\n\nThese shortcuts are optimized for efficient coding and content editing, significantly reducing reliance on the mouse and improving productivity within Jupyter Notebooks.",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#menu-toolbar-context-menu",
    "href": "../tutorials/jupyterlab.html#menu-toolbar-context-menu",
    "title": "3  Jupyterlab",
    "section": "9.1 Menu, Toolbar, Context menu",
    "text": "9.1 Menu, Toolbar, Context menu",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#command-palette-commandctrl-shift-c",
    "href": "../tutorials/jupyterlab.html#command-palette-commandctrl-shift-c",
    "title": "3  Jupyterlab",
    "section": "9.2 Command palette: Command/Ctrl Shift C",
    "text": "9.2 Command palette: Command/Ctrl Shift C",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "href": "../tutorials/jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "title": "3  Jupyterlab",
    "section": "9.3 Keyboard short-cuts: Command/Ctrl Shift H",
    "text": "9.3 Keyboard short-cuts: Command/Ctrl Shift H",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#code-blocks",
    "href": "../tutorials/jupyterlab.html#code-blocks",
    "title": "3  Jupyterlab",
    "section": "11.1 Code blocks",
    "text": "11.1 Code blocks\n\nx = 0",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#last-value-is-displayed",
    "href": "../tutorials/jupyterlab.html#last-value-is-displayed",
    "title": "3  Jupyterlab",
    "section": "11.2 Last value is displayed",
    "text": "11.2 Last value is displayed\n\nx = 1\nx\n\n1",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#everything-is-one-python-process",
    "href": "../tutorials/jupyterlab.html#everything-is-one-python-process",
    "title": "3  Jupyterlab",
    "section": "11.3 Everything is one Python process",
    "text": "11.3 Everything is one Python process\n\nx += 1\nx\n\n2",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#restarting-the-kernel",
    "href": "../tutorials/jupyterlab.html#restarting-the-kernel",
    "title": "3  Jupyterlab",
    "section": "11.4 Restarting the kernel",
    "text": "11.4 Restarting the kernel",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#lists",
    "href": "../tutorials/jupyterlab.html#lists",
    "title": "3  Jupyterlab",
    "section": "15.1 Lists",
    "text": "15.1 Lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#numbered-lists",
    "href": "../tutorials/jupyterlab.html#numbered-lists",
    "title": "3  Jupyterlab",
    "section": "15.2 Numbered lists",
    "text": "15.2 Numbered lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#quotes",
    "href": "../tutorials/jupyterlab.html#quotes",
    "title": "3  Jupyterlab",
    "section": "15.3 Quotes",
    "text": "15.3 Quotes\n\nThis is a quote",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#formulas",
    "href": "../tutorials/jupyterlab.html#formulas",
    "title": "3  Jupyterlab",
    "section": "15.4 Formulas",
    "text": "15.4 Formulas\n\\(\\sum_{i=0}^n i\\)\n\nHTML",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#header-2",
    "href": "../tutorials/jupyterlab.html#header-2",
    "title": "3  Jupyterlab",
    "section": "15.5 Header 2",
    "text": "15.5 Header 2\n\n15.5.1 Header 3\n\nHeader 15.5.1.1",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#formulas-1",
    "href": "../tutorials/jupyterlab.html#formulas-1",
    "title": "3  Jupyterlab",
    "section": "15.6 Formulas",
    "text": "15.6 Formulas\n\\(\\sum_{i=0}^n i\\)",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../tutorials/jupyterlab.html#tables",
    "href": "../tutorials/jupyterlab.html#tables",
    "title": "3  Jupyterlab",
    "section": "15.7 Tables",
    "text": "15.7 Tables\n\n\n\nName\nValue\n\n\n\n\nfoo\n2\n\n\nbar\n3",
    "crumbs": [
      "Jupyter",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  }
]