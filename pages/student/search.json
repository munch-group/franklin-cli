[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Franklin",
    "section": "",
    "text": "Franklin\nFranklin takes care of the technical challenges in running jupyter notebook exercise on your computer. That way, you can focus on learning rather than library incompatibilities and platform specific dependencies.\nOnce installed, running lets you download the exercise you want.\nRunning this command, starts a jupyter notebook on your computer that\nYou can find more detail along with installation instructions and tutorials in the side bar.\nShould you come across a bug or find yourself missing some functionality, you are welcome to submit an issue.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Franklin</span>"
    ]
  },
  {
    "objectID": "index.html#franklin",
    "href": "index.html#franklin",
    "title": "Franklin",
    "section": "",
    "text": "Terminal\n\nfranklin download\n\n\n\n\nTerminal\n\nfranklin jupyter",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Franklin</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html",
    "href": "../computer_setup.html",
    "title": "Computer setup",
    "section": "",
    "text": "Install Python\nIf you have not done so already, you should install a distribution of Python called Anaconda. Anaconda is not only an easy way of installing Python on Windows, Mac, and Linux; it also comes with the conda package management system (more about that later). To install Anaconda, visit this page. When the download completes, you must follow the default installation.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#install-python",
    "href": "../computer_setup.html#install-python",
    "title": "Computer setup",
    "section": "",
    "text": "Warning\n\n\n\nTo be decided if we use miniforge, miniconda or anaconda…",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#install-chrome",
    "href": "../computer_setup.html#install-chrome",
    "title": "Computer setup",
    "section": "Install Chrome",
    "text": "Install Chrome\nFranklin is built to interact with the Chrome browser. So you need to make sure that is installed on your computer. If not, you can download it here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#install-docker-desktop",
    "href": "../computer_setup.html#install-docker-desktop",
    "title": "Computer setup",
    "section": "Install Docker Desktop",
    "text": "Install Docker Desktop\nDocker is a tool that can run a small linux world in your computer. Franklin uses it to make sure Jupyter runs your exercise in exactly the same way, no matter which kind of computer you have. You do not need to known anything about Docker. Franklin will take care of the whole thing for you. If you are interested, though, you can have a look at this brief introduction to Docker.\nBefore you to download docker, make sure the operating system on your computer has been updated. For docker to run on your device you will have to have Windows newer than Windows 10 or newer than macOS11 (Big Sur) on mac. If you are downloading docker on a AU computer remember to activate admin privileges by activating Heimdal.\nIf you are unsure of how to activate Heimdal, follow the instructions given on this page\nGo to this page and press on “Download Docker Desktop”. When you have done that you will be presented with different options which depends on which chip your computer has. On a Mac, you can find the name of your chip by clicking the apple icon in the upper left corner and choose “about this mac” in the dropdown menu. Apple silicon chips include M1, M2 and M3. Apple intel chips are named intel.\n\n\n\nalt text\n\n\nOn Windows, you can find the name of your chip by right clicking on the start button and click system. Under device specifications look for processor. This will tell you the chip name and whether it is a AMD chip or an ARM chip.\nDownload the version of Docker Desktop that matches your operating system and computer chip. Once downloaded, follow the installation instructions for your device. You have to click accept when your computer asks you if you trust the provider. When docker desktop opens, a window pops up and asks if you want to sign in or create and account. An account is not necessary for using docker with franklin, so you can just click “skip” when prompted.\nWhen the installation procedure is complete and Docker is done starting up, you must it down. Just closing the blue Docker Dashboard window does not shut down Docker. You need to explicitly quit the program. To make sure it has quit, you can look for the little docker whale icon. In Mac is it in the menu bar. On Windows it is in the small popup menu at the right end of you task bar. If you see a small whale, Docker is still running. Click the whale icon and quit Docker.\n\n\n\nalt text\n\n\n\n\n\n\n\n\nWSL\n\n\n\nOn Windows, Docker Desktop may give you an error message saying “WSL 2 is required”. In that case, install WSL by running the following command into your terminal:\n\n\nTerminal\n\nwsl --install\n\n\n\n\nThe Terminal\nFranklin is a command-line application. That means it is executed by writing its name and any arguments in a “terminal” rather than clicking on an icon and using a graphical user interface. Many different programs can serve as a terminal.If you have a Windows machine, use the Anaconda Powershell Prompt (not the Anaconda Prompt and not the CMD). You installed Anaconda Powershell Prompt along with Anaconda Python. If you have a Mac, the terminal you will use is called Terminal. The Terminal application is pre-installed on Mac. From now on, whenever I refer to the terminal, I mean Anaconda Powershell Prompt on Windows and Terminal on Mac.\nI will will assume some familiarity with using a terminal and executing commands on the command line. If you have not used a terminal before, or if you are a bit rusty, you should run through this introduction before you go on.\n\n\nCreate a conda environment for Franklin\n\nYou must install packages and programs for your analyses and pipelines. Sometimes, however, the packages you need for one project conflict with the ones you need for other projects you work on in parallel. Such conflicts seem like an unsolvable problem. Would it not be fantastic if you could create a small world insulated from the rest of your Anaconda installation? Then, that small world would only contain the packages you needed for a single project. If each project had its isolated world, then there would be no such conflicts.\nFortunately, a tool lets you do just that, and its name is Conda. Conda’s small worlds are called “environments,” and you can create as many as you like. You can then switch between them as you switch between your bioinformatics projects. Conda also downloads and installs the packages for you, ensuring that the packages you install in each environment are compatible. It even makes sure to install packages (dependencies) required by the packages you install. By creating an environment for each project, the libraries installed for each project do not interfere. You can read more about conda environments and how to use them in this introduction.\nCreate an environment called franklin with franklin installed.\n\n\nTerminal\n\nconda create -y -n franklin -c conda-forge -c munch-group franklin\n\n\n\n\n\n\n\nFor educators\n\n\n\nEducators should also install franklin-educator like this:\n\n\nTerminal\n\nconda create -y -n franklin -c conda-forge -c munch-group franklin franklin-educator",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../computer_setup.html#test-your-setup",
    "href": "../computer_setup.html#test-your-setup",
    "title": "Computer setup",
    "section": "Test your setup",
    "text": "Test your setup\nIf you succesfully completed all the above steps, you should now be able to activate your franklin environment:\n\n\nTerminal\n\nconda activate franklin\n\nand run this command to update franklin to its newest version:\n\n\nTerminal\n\nfranklin update\n\nYou can learn about how to use franklin on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Computer setup</span>"
    ]
  },
  {
    "objectID": "../commands_core.html",
    "href": "../commands_core.html",
    "title": "Running exercises",
    "section": "",
    "text": "Download an exercise\nFranklin is a command line tool that your run from a terminal. If you are not famililiar with terminals, have a look at this brief introduction before you go on.\nFranklin uses the click library to define a hierarchy of commands and subcommands that you can run in the terminal. franklin is the main command and has the subcommands download, jupyter, update, show, and cleanup. Should you forget, you can always just run the franklin command like this:\nto print the following help message:\nTo run each subcommand, you simply append it to franklin, E.g. franklin jupyter. The following sections explain what each subcommand do.\nThe jupyter exercises are available for you to download onto your own computer. To do so, you just run the command below. You will be presented with menus to select the course and exercise you want to download. The downloaded exercise will appear as a folder in your current folder (you can run ls to see it). If the exercise is called cool-exercise, you can change to that folder by running cd cool-exercise.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#download-an-exercise",
    "href": "../commands_core.html#download-an-exercise",
    "title": "Running exercises",
    "section": "",
    "text": "Terminal\n\nfranklin download\n\n\n\nClick to see what happens under the hood\n\n\nThis is what the franklin does for you\n\nFinds the course git repositories in the franklin group.\nPresents you with a list of courses to choose from.\nFinds the git repositories in the course group that are visible to students.\nMatch docker images in the registry to exercise repositories.\nPresents you with a list of exercises to choose from.\nClones the git repository for the exercise from the AU GitLab website\nGives the downloaded folder the name of the exercise.\nRemoves the repository files not relevant to students.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#run-jupyter",
    "href": "../commands_core.html#run-jupyter",
    "title": "Running exercises",
    "section": "Run Jupyter",
    "text": "Run Jupyter\nIn order to open and run the downloaded jupyter notebook, you need a running jupyter with all the required dependencies installed. To spare you the trouble and to make sure everyone run the exercise the same way, franklin can run jupyter in way that exactly fits each exercise. To run jupyter for your downloaded exercise, first make sure you have navigated to the exercise folder using the terminal. Then run this command:\n\n\nTerminal\n\nfranklin jupyter\n\n\n\nClick to see what happens under the hood\n\n\nThis is what the franklin does for you\n\ncheck for updates\ncheck internet connection\ncheck enough disk space is available\nchecks that docker is installed\nstarts docker in the background\nFinds the course git repositories in the franklin group.\nPresents you with a list of courses to choose from.\nFinds the git repositories in the course group that are visible to students.\nMatch docker images in the registry to exercise repositories.\nPresents you with a list of exercises to choose from.\nStarts docker and waits for its engine boot up.\nPulls the docker image from the registry if it is not already on your computer.\nLaunches a Linux docker container running with all dependencies installed.\nMakes the container mount the folder with your local files so you can open them in JupyterLab.\nFind an open port if port 8888 is already in use.\nLaunches JupyterLab and forwards the display to a dedicated Google Chrome browser window.\nWaits until you press Ctrl-C in the terminal or close the Chrome window.\nStops jupyter and the docker container it runs in.\nCloses Docker Desktop\n\n\nJupyterLab opens in your browser. In the file menu in the right pane, you should be able to see your newly downloaded exercise. Open it by double-clicking it and you are ready to begin the exercise. To stop jupyter, simply close the browser window or press Ctrl-C in the terminal window (remember to save your notebook first).\nNote: If the message below pops up, the folder you started franklin in was either not empty or you may have forgotten to go to the exercise subfolder",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#update-franklin",
    "href": "../commands_core.html#update-franklin",
    "title": "Running exercises",
    "section": "Update franklin",
    "text": "Update franklin\nFranklin should update automaticaly when you start it, but if you should need to update it manually you can do it running this command:\n\n\nTerminal\n\nfranklin update\n\n\n\nClick to see what happens under the hood\n\n\nThis is what the franklin does for you\n\nChecks for updates to franklin package using either Conda or Pixi dependeing on how franlin is installed.\nDetermines if you are a student or educator.\nUpdates franklin if a newer version exists.\nUpdates the franklin-educator package if you are an educator.\nCloses franklin reporting the update if any.\n\n\nYou can also see which version of franklin you have installed by running this command:\n\n\nTerminal\n\nfranklin --version\n\n\n\nClick to see what happens under the hood",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#cleanup-docker-disk-usage",
    "href": "../commands_core.html#cleanup-docker-disk-usage",
    "title": "Running exercises",
    "section": "Cleanup Docker disk usage",
    "text": "Cleanup Docker disk usage\nTo free up disk space, you can run the command below. You will be prompted with a menu showing the “docker images” on your computer. Select all the ones you want to remove and press Enter. Deleting images will not delete any of your own files with saved work.\n\n\nTerminal\n\nfranklin cleanup\n\n\n\nClick to see what happens under the hood\n\n\nThis is what the franklin does for you\n\nStarts docker and waits for its engine boot up.\nFinds the exercise stored as docker images on your computer.\nPrompts you with the list of exercises (images), allowing you to select the ones you want to remove.\nCloses all docker containers for those images.\nRemoves the selected images\nPrunes all unused data cached by Docker.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#show-docker-disk-usage",
    "href": "../commands_core.html#show-docker-disk-usage",
    "title": "Running exercises",
    "section": "Show Docker disk usage",
    "text": "Show Docker disk usage\nThe franklin show subcommand itself has the subcommands images, containers, and storage:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#show-docker-images",
    "href": "../commands_core.html#show-docker-images",
    "title": "Running exercises",
    "section": "Show Docker images",
    "text": "Show Docker images\nFranklin downloads a linux “docker image” for every exercise. These can take up a lot of space on your computer. Fortunately, you only need each one, when you run the exercise it is made for. So you can delete the ones you are not using to free up space. Franklin will automatically download them again if you need them later.\nTo see the images downloaded to your computer and how much space they take up, you can run this command:\n\n\nTerminal\n\nfranklin show images",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#show-docker-containers",
    "href": "../commands_core.html#show-docker-containers",
    "title": "Running exercises",
    "section": "Show Docker containers",
    "text": "Show Docker containers\nFranklin starts a Docker Linux container when you run franklin jupyter. These can take up a lot of space on your computer. Fortunately, you only need each one, when you run the exercise it is made for. So you can delete the ones you are not using to free up space. Franklin will automatically download them again if you need them later.\nTo see the images downloaded to your computer and how much space they take up, you can run this command:\n\n\nTerminal\n\nfranklin show images",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#show-docker-storage",
    "href": "../commands_core.html#show-docker-storage",
    "title": "Running exercises",
    "section": "Show Docker storage",
    "text": "Show Docker storage\nTo see a summary of how much disk space Docker takes up on your computer for what purpose, you can run this command:\n\n\nTerminal\n\nfranklin show storage",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../commands_core.html#live-action",
    "href": "../commands_core.html#live-action",
    "title": "Running exercises",
    "section": "Live action",
    "text": "Live action",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Running exercises</span>"
    ]
  },
  {
    "objectID": "../faq.html",
    "href": "../faq.html",
    "title": "FAQ",
    "section": "",
    "text": "franklin-educator is installed in my environemnt but I cannot see the exercise commands\nTry reinstalling franklin-educator:\n\n\nTerminal\n\nconda uninstall franklin-educator\n\nand then\n\n\nTerminal\n\nconda install -c conda-forge -c munch-group franklin-educator\n\n\n\nDocker is installed but franklin keeps complaining it is not\nWhen Docker Desktop is in Eco mode, franklin cannot get to it. If Docker Desktop is not running, franklin can start it for you. So Quit Docker Desktop and try running franklin again.\n\n\nI quit Docker Desktop but it is still running\nThe blue Docker Desktop window is the Docker dashboard. Closing that window will not close Docker Desktop. To close Docker Desktop find the small docker icon in the menu bar on Mac or in the bottom right taskbar on Windows. Look for a tiny whale with containers on its back.\n\n\nHow much space is frankling taking up on my hard disk?\n\n\nHow do I free up disk space used by franklin\n\n\nWhat happens if I delete an exercise in franklin\n\n\nHow do I rename an exercise\nChanges the display name using franklin exercise rename. Do not change the repository name on GitLab.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "../terminal.html",
    "href": "../terminal.html",
    "title": "The terminal",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nthis primer before you go on.\nA terminal is a text-based interface that allows users to interact with the operating system by typing commands. It provides direct access to the system shell—a program that interprets user input and executes corresponding instructions.\nHistorically, “terminals” referred to physical devices (e.g., teletypewriters or CRT monitors) connected to mainframe computers. In modern computing, a terminal is typically a software application (e.g., Terminal on macOS, GNOME Terminal on Linux, Command Prompt or PowerShell on Windows) that emulates this interface.\nKey characteristics of a terminal include:\nCommand-Line Interface (CLI): Unlike graphical user interfaces (GUIs), a terminal requires textual input and returns textual output. Shell Access: The terminal runs a shell such as bash, zsh, or fish, which interprets and executes user commands (e.g., file manipulation, process control, networking). Script Execution: Users can run scripts, automate tasks, and chain commands using control operators (e.g., &&, |, &gt;, etc.). Remote Access: Terminals can be used to log into remote systems via protocols such as SSH, providing a low-overhead method for remote system administration and programming. The terminal is a powerful tool, particularly in software development, system administration, and high-performance computing. It enables reproducibility, fine-grained control, and automation, though it requires users to become familiar with a command language and often lacks the immediate feedback and discoverability of graphical interfaces.\nCtrl-C for abort\nYou also need a tool to open files and start jupyter notebook. It is also here that you will run franklin in order to download exercises. The terminal will already be installed and is called Terminal on OSX and Anaconda powershell on mac. When you open the terminal it should look like fig 1.1 on mac and fig 1.2 on windows’\n\n\n\nFigure 1.1\n\n\n\n\n\nFigure 1.2\n\n\nWhat is Anaconda powershell and this Terminal thing, you ask. Both programs are what we call terminal emulators. They are programs used to run other programs, like the ones you are going to write yourself. In this guide both Terminal and Anaconda Powershel will be refered to as “the terminal”\n\nNavigating folders via the terminal\nThe terminal is a very useful tool. To use it, howevever, you need to know a few basics. First of all, a terminal lets you execute commands on your computer. You simply type the command you want and then hit enter. The place where you type is called a prompt.\nWhen you open the terminal you’ll be located in a folder you are in by typing pwd and then press Enter on the keyboard. When you press Enter you tell the terminal to execute the command you just wrote. In this case, the command you typed simply tells you the path to the folder we are in. It would look something like this:\npwd /Users/kasper/programming\nIf the path above was your output you would be in the folder programming. /Users/kasper/programmingis the path or “full address” of the folder with dashes (or backslashes on windows) separating nested folders. So programmingis a subfolder of kasper which is a subfolder of Users. That way you not only know which folder you are in but also where that folder is. Let us see what is in this folder. On OSX you type the ls command (l as in Lima and s as in Sierra)\nls notes projects\nIt seems that there are two other folders, one called notes and another called projects. If you are curious about what is inside the notes folder, you can “walk” into the folder with the cd command. To use this command you must specify which folder you want to walk into (in this case notes). We do this by typing cd, then a space and the then name of the folder. When you press enter you then get:\ncd notes\nIt seems that nothing really happened, but if I run the pwd command now to see which folder I am in, I get:\npwd /Users/kasper/programming/notes",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>The terminal</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html",
    "href": "../jupyterlab.html",
    "title": "Jupyterlab",
    "section": "",
    "text": "Starting jupyter lab\nSandbox\nIntroduction to JupyterLab\nJupyterLab is the next-generation web-based user interface for Project Jupyter, designed to offer a flexible and extensible environment for interactive computing. It builds upon the classic Jupyter Notebook interface by integrating a wide range of tools—code consoles, terminals, text editors, data file viewers, and notebooks—into a unified workspace.\nThe JupyterLab interface is organized into a multi-tab layout, resembling an integrated development environment (IDE). Users can open multiple documents side by side (e.g., a Python script next to a Markdown file and a terminal), drag-and-drop tabs, and link interactive views of the same dataset. It supports live code execution, output rendering (including plots and LaTeX equations), and seamless integration with kernels for many languages, though Python is most common.\nKey features of JupyterLab include:\nNotebook authoring: Full support for .ipynb notebooks with executable code cells, Markdown, and rich outputs. Code consoles: Interactive REPLs connected to notebooks or scripts for testing code snippets. Text and code editing: Built-in editor with syntax highlighting, version control integration, and support for many file types. Terminal access: Direct command-line interface within the browser for shell-level operations. Extensibility: Modular architecture that supports plugins for additional language kernels, visualizations, or custom workflows. JupyterLab preserves all the functionality of the classic notebook interface while offering a more powerful and customizable platform suitable for complex data science workflows, scientific research, and reproducible computing. It is widely used in academia, industry, and education due to its interactive nature and support for literate programming principles.\nJupyterLab is a highly extensible, feature-rich notebook authoring application and editing environment, and is a part of Project Jupyter, a large umbrella project centered around the goal of providing tools (and standards) for interactive computing with computational notebooks.\nA computational notebook is a shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, graphs and figures, and interactive controls. A notebook, along with an editor like JupyterLab, provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others.\nJupyterLab is a sibling to other notebook authoring applications under the Project Jupyter umbrella, like Jupyter Notebook and Jupyter Desktop. JupyterLab offers a more advanced, feature rich, customizable experience compared to Jupyter Notebook.MM\nTerminal commands:\nIt then appears in your default browser.|",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#keyboard-shortcuts",
    "href": "../jupyterlab.html#keyboard-shortcuts",
    "title": "Jupyterlab",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\n\nCommand Mode in Jupyter Notebooks\nIn Jupyter Notebooks, Command Mode is one of the two main interaction modes—the other being Edit Mode. Command Mode is active when the cell border is blue, indicating that keyboard commands will be interpreted as notebook-level operations rather than editing the cell’s content.\nCommand Mode allows users to manage cells and perform structural modifications without using the mouse. This enhances efficiency, especially when working with large notebooks. Pressing Esc while in a cell activates Command Mode.\n\nCommon Keyboard Shortcuts in Command Mode\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nEnter\nSwitch to Edit Mode in the selected cell\n\n\nA\nInsert a new cell above the current cell\n\n\nB\nInsert a new cell below the current cell\n\n\nD, D\nDelete the selected cell (press D twice quickly)\n\n\nZ\nUndo the last cell deletion\n\n\nY\nChange cell type to code\n\n\nM\nChange cell type to Markdown\n\n\nC\nCopy the selected cell\n\n\nX\nCut the selected cell\n\n\nV\nPaste cell below\n\n\nShift + V\nPaste cell above\n\n\nShift + Up/Down\nExtend selection to multiple cells\n\n\nCtrl + S (or Cmd + S on macOS)\nSave the notebook\n\n\nH\nShow all keyboard shortcuts\n\n\n0, 0\nRestart the kernel (press 0 twice quickly)\n\n\nShift + M (in Command Mode)\nMerge selected cells\n\n\n\nThese shortcuts make navigation and cell management significantly faster, enabling an efficient coding and documentation workflow within Jupyter Notebooks.\n\n\n\nEdit Mode in Jupyter Notebooks\nEdit Mode is activated when a cell’s border turns green, allowing the user to directly modify the contents of the cell. You can enter Edit Mode by pressing Enter while a cell is selected in Command Mode. This mode is primarily used for writing and editing code or Markdown content within cells.\n\nCommon Keyboard Shortcuts in Edit Mode\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nCtrl + Enter\nRun the current cell and remain in Edit Mode\n\n\nShift + Enter\nRun the current cell and move to the next cell\n\n\nAlt + Enter\nRun the current cell and insert a new cell below\n\n\nEsc\nSwitch to Command Mode\n\n\nCtrl + /\nToggle comment on selected lines (code cells only)\n\n\nTab\nCode completion or indent\n\n\nShift + Tab\nShow tooltip/help for the object under cursor\n\n\nCtrl + ]\nIndent the current line or selection\n\n\nCtrl + [\nDedent the current line or selection\n\n\nCtrl + A\nSelect all content in the cell\n\n\nCtrl + Z\nUndo the last change\n\n\nCtrl + Y\nRedo the last undone change\n\n\nCtrl + Shift + -\nSplit the current cell at cursor position into two cells\n\n\nCtrl + S (or Cmd + S)\nSave the notebook\n\n\nCtrl + Shift + -\nSplit the cell at the current cursor position\n\n\n\nThese shortcuts are optimized for efficient coding and content editing, significantly reducing reliance on the mouse and improving productivity within Jupyter Notebooks.",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#menu-toolbar-context-menu",
    "href": "../jupyterlab.html#menu-toolbar-context-menu",
    "title": "Jupyterlab",
    "section": "Menu, Toolbar, Context menu",
    "text": "Menu, Toolbar, Context menu",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#command-palette-commandctrl-shift-c",
    "href": "../jupyterlab.html#command-palette-commandctrl-shift-c",
    "title": "Jupyterlab",
    "section": "Command palette: Command/Ctrl Shift C",
    "text": "Command palette: Command/Ctrl Shift C",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "href": "../jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "title": "Jupyterlab",
    "section": "Keyboard short-cuts: Command/Ctrl Shift H",
    "text": "Keyboard short-cuts: Command/Ctrl Shift H",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#code-blocks",
    "href": "../jupyterlab.html#code-blocks",
    "title": "Jupyterlab",
    "section": "Code blocks",
    "text": "Code blocks\n\nx = 0",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#last-value-is-displayed",
    "href": "../jupyterlab.html#last-value-is-displayed",
    "title": "Jupyterlab",
    "section": "Last value is displayed",
    "text": "Last value is displayed\n\nx = 1\nx\n\n1",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#everything-is-one-python-process",
    "href": "../jupyterlab.html#everything-is-one-python-process",
    "title": "Jupyterlab",
    "section": "Everything is one Python process",
    "text": "Everything is one Python process\n\nx += 1\nx\n\n2",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#restarting-the-kernel",
    "href": "../jupyterlab.html#restarting-the-kernel",
    "title": "Jupyterlab",
    "section": "Restarting the kernel",
    "text": "Restarting the kernel",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#lists",
    "href": "../jupyterlab.html#lists",
    "title": "Jupyterlab",
    "section": "Lists",
    "text": "Lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#numbered-lists",
    "href": "../jupyterlab.html#numbered-lists",
    "title": "Jupyterlab",
    "section": "Numbered lists",
    "text": "Numbered lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#quotes",
    "href": "../jupyterlab.html#quotes",
    "title": "Jupyterlab",
    "section": "Quotes",
    "text": "Quotes\n\nThis is a quote",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#formulas",
    "href": "../jupyterlab.html#formulas",
    "title": "Jupyterlab",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)\n\nHTML",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#header-2",
    "href": "../jupyterlab.html#header-2",
    "title": "Jupyterlab",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#formulas-1",
    "href": "../jupyterlab.html#formulas-1",
    "title": "Jupyterlab",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../jupyterlab.html#tables",
    "href": "../jupyterlab.html#tables",
    "title": "Jupyterlab",
    "section": "Tables",
    "text": "Tables\n\n\n\nName\nValue\n\n\n\n\nfoo\n2\n\n\nbar\n3",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Jupyterlab</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html",
    "href": "../data_analysis.html",
    "title": "Data analysis in Python and R",
    "section": "",
    "text": "Numpy and Pandas\nFast computation using vectors and matrices\nlist1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\nsummed = []\nfor i in range(len(list1)):\n    summed.append(list1[i] + list2[i])\nsummed\n\n[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#arrays",
    "href": "../data_analysis.html#arrays",
    "title": "Data analysis in Python and R",
    "section": "Arrays",
    "text": "Arrays\n\nimport numpy as np\n\n\na = np.array(list1)\nb = np.array(list2)\na, b\n\n(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#broadcasting",
    "href": "../data_analysis.html#broadcasting",
    "title": "Data analysis in Python and R",
    "section": "Broadcasting",
    "text": "Broadcasting\n\na + b\n\narray([9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\n\n\na * b\n\narray([ 0,  8, 14, 18, 20, 20, 18, 14,  8,  0])\n\n\n\na - 10\n\narray([-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1])\n\n\n\na.sum()\n\n45\n\n\n\na.mean()\n\n4.5",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#multidimentional-arrays",
    "href": "../data_analysis.html#multidimentional-arrays",
    "title": "Data analysis in Python and R",
    "section": "Multidimentional arrays",
    "text": "Multidimentional arrays\n\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist_of_lists\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nlist_of_lists[1][1]\n\n5\n\n\n\nmatrix = np.array(list_of_lists)\nmatrix\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nmatrix[1][1] # not efficient\n\n5\n\n\n\nmatrix[1, 1] # efficient\n\n5\n\n\n\nmatrix - 10\n\narray([[-9, -8, -7],\n       [-6, -5, -4],\n       [-3, -2, -1]])\n\n\n\nmatrix.sum()\n\n45\n\n\n\nlist_of_lists_of_lists = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\nlist_of_lists_of_lists\n\n[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\n\n\ntensor = np.array(list_of_lists_of_lists)\ntensor\n\narray([[[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]],\n\n       [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]])\n\n\n\ntensor[1, 1, 1]\n\n5",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#dataframe",
    "href": "../data_analysis.html#dataframe",
    "title": "Data analysis in Python and R",
    "section": "DataFrame",
    "text": "DataFrame\n\ndf = pd.DataFrame({'name': ['Mike', 'Mia', 'Jake'], 'weight': [82, 62, 75]})\ndf\n\n\n\n\n\n\n\n\nname\nweight\n\n\n\n\n0\nMike\n82\n\n\n1\nMia\n62\n\n\n2\nJake\n75\n\n\n\n\n\n\n\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n\ndf = pd.DataFrame(dict(name=['Mike', 'Mia', 'Jake'], weight=[82, 62, 75]))\ndf\n\n\n\n\n\n\n\n\nname\nweight\n\n\n\n\n0\nMike\n82\n\n\n1\nMia\n62\n\n\n2\nJake\n75\n\n\n\n\n\n\n\n\nrecords = [('Mike', 82), ('Mia', 62), ('Jake', 75)]\n\ndf = pd.DataFrame().from_records(records, columns=['age', 'weight'])\ndf\n\n\n\n\n\n\n\n\nage\nweight\n\n\n\n\n0\nMike\n82\n\n\n1\nMia\n62\n\n\n2\nJake\n75\n\n\n\n\n\n\n\n\ndf.index\n\nRangeIndex(start=0, stop=3, step=1)\n\n\n\ndf.index.values\n\narray([0, 1, 2])\n\n\n\ndf.columns\n\nIndex(['age', 'weight'], dtype='object')\n\n\n\ndf.dtypes\n\nage       object\nweight     int64\ndtype: object\n\n\nAdd a column to an existing dataframe:\n\ndf['height'] = [182.5, 173.0, 192.5]\ndf\n\n\n\n\n\n\n\n\nage\nweight\nheight\n\n\n\n\n0\nMike\n82\n182.5\n\n\n1\nMia\n62\n173.0\n\n\n2\nJake\n75\n192.5\n\n\n\n\n\n\n\nAdd another, categorical, column:\n\ndf['sex'] = pd.Categorical(['male', 'female', 'male'], categories=['female', 'male'], ordered=True)\ndf\n\n\n\n\n\n\n\n\nage\nweight\nheight\nsex\n\n\n\n\n0\nMike\n82\n182.5\nmale\n\n\n1\nMia\n62\n173.0\nfemale\n\n\n2\nJake\n75\n192.5\nmale\n\n\n\n\n\n\n\n\ndf.dtypes\n\nage         object\nweight       int64\nheight     float64\nsex       category\ndtype: object\n\n\nA Series just wraps an array:\n\ndf.height.to_numpy()\n\narray([182.5, 173. , 192.5])",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#example-penguin-data-set",
    "href": "../data_analysis.html#example-penguin-data-set",
    "title": "Data analysis in Python and R",
    "section": "Example penguin data set",
    "text": "Example penguin data set\n\nimport seaborn as sns\n\npenguins = sns.load_dataset('penguins')\n\n\npenguins\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFemale\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMale\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFemale\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMale\n\n\n\n\n344 rows × 7 columns\n\n\n\n\npenguins.dtypes\n\nspecies               object\nisland                object\nbill_length_mm       float64\nbill_depth_mm        float64\nflipper_length_mm    float64\nbody_mass_g          float64\nsex                   object\ndtype: object\n\n\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\n\n\n\n\n\n\n\n\npenguins.tail()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFemale\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMale\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFemale\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMale",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#series",
    "href": "../data_analysis.html#series",
    "title": "Data analysis in Python and R",
    "section": "Series",
    "text": "Series\n\npenguins['flipper_length_mm']\n\n0      181.0\n1      186.0\n2      195.0\n3        NaN\n4      193.0\n       ...  \n339      NaN\n340    215.0\n341    222.0\n342    212.0\n343    213.0\nName: flipper_length_mm, Length: 344, dtype: float64\n\n\n\npenguins.flipper_length_mm\n\n0      181.0\n1      186.0\n2      195.0\n3        NaN\n4      193.0\n       ...  \n339      NaN\n340    215.0\n341    222.0\n342    212.0\n343    213.0\nName: flipper_length_mm, Length: 344, dtype: float64\n\n\n\ntype(penguins.flipper_length_mm)\n\npandas.core.series.Series",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#broadcasting-1",
    "href": "../data_analysis.html#broadcasting-1",
    "title": "Data analysis in Python and R",
    "section": "Broadcasting",
    "text": "Broadcasting\n\npenguins.bill_depth_mm - 1000\n\n0     -981.3\n1     -982.6\n2     -982.0\n3        NaN\n4     -980.7\n       ...  \n339      NaN\n340   -985.7\n341   -984.3\n342   -985.2\n343   -983.9\nName: bill_depth_mm, Length: 344, dtype: float64\n\n\n\npenguins.bill_depth_mm * penguins.flipper_length_mm\n\n0      3384.7\n1      3236.4\n2      3510.0\n3         NaN\n4      3724.9\n        ...  \n339       NaN\n340    3074.5\n341    3485.4\n342    3137.6\n343    3429.3\nLength: 344, dtype: float64",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#indexing",
    "href": "../data_analysis.html#indexing",
    "title": "Data analysis in Python and R",
    "section": "Indexing",
    "text": "Indexing\n\nGet a cell\n\npenguins.loc[4, 'island']\n\n'Torgersen'\n\n\n\n\nGet a row\n\npenguins.loc[4]\n\nspecies                 Adelie\nisland               Torgersen\nbill_length_mm            36.7\nbill_depth_mm             19.3\nflipper_length_mm        193.0\nbody_mass_g             3450.0\nsex                     Female\nName: 4, dtype: object\n\n\n\n\nGet a column\n\npenguins['bill_depth_mm']\n\n0      18.7\n1      17.4\n2      18.0\n3       NaN\n4      19.3\n       ... \n339     NaN\n340    14.3\n341    15.7\n342    14.8\n343    16.1\nName: bill_depth_mm, Length: 344, dtype: float64\n\n\n\npenguins.bill_depth_mm\n\n0      18.7\n1      17.4\n2      18.0\n3       NaN\n4      19.3\n       ... \n339     NaN\n340    14.3\n341    15.7\n342    14.8\n343    16.1\nName: bill_depth_mm, Length: 344, dtype: float64\n\n\n\n\nGet a range of rows and multiple columns\n\npenguins.loc[40:45, ['island', 'body_mass_g']]\n\n\n\n\n\n\n\n\nisland\nbody_mass_g\n\n\n\n\n40\nDream\n3150.0\n\n\n41\nDream\n3900.0\n\n\n42\nDream\n3100.0\n\n\n43\nDream\n4400.0\n\n\n44\nDream\n3000.0\n\n\n45\nDream\n4600.0\n\n\n\n\n\n\n\n\n\nUse boolean series as index to subset data\n\nidx = penguins.bill_length_mm &gt; 55\nidx\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n339    False\n340    False\n341    False\n342    False\n343    False\nName: bill_length_mm, Length: 344, dtype: bool\n\n\n\npenguins.loc[idx]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n169\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nFemale\n\n\n215\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nMale\n\n\n253\nGentoo\nBiscoe\n59.6\n17.0\n230.0\n6050.0\nMale\n\n\n321\nGentoo\nBiscoe\n55.9\n17.0\n228.0\n5600.0\nMale\n\n\n335\nGentoo\nBiscoe\n55.1\n16.0\n230.0\n5850.0\nMale\n\n\n\n\n\n\n\n\npenguins.loc[(penguins.bill_length_mm &gt; 55) & (penguins.sex == 'Female')]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n169\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nFemale\n\n\n\n\n\n\n\n\n\nSetting and resetting the index\n\npenguins\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFemale\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMale\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFemale\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMale\n\n\n\n\n344 rows × 7 columns\n\n\n\n\ndf = penguins.set_index(['species', 'sex', 'island'])\ndf.head(10)\n\n\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\nspecies\nsex\nisland\n\n\n\n\n\n\n\n\nAdelie\nMale\nTorgersen\n39.1\n18.7\n181.0\n3750.0\n\n\nFemale\nTorgersen\n39.5\n17.4\n186.0\n3800.0\n\n\nTorgersen\n40.3\n18.0\n195.0\n3250.0\n\n\nNaN\nTorgersen\nNaN\nNaN\nNaN\nNaN\n\n\nFemale\nTorgersen\n36.7\n19.3\n193.0\n3450.0\n\n\nMale\nTorgersen\n39.3\n20.6\n190.0\n3650.0\n\n\nFemale\nTorgersen\n38.9\n17.8\n181.0\n3625.0\n\n\nMale\nTorgersen\n39.2\n19.6\n195.0\n4675.0\n\n\nNaN\nTorgersen\n34.1\n18.1\n193.0\n3475.0\n\n\nTorgersen\n42.0\n20.2\n190.0\n4250.0\n\n\n\n\n\n\n\n\ndf.reset_index()\n\n\n\n\n\n\n\n\nspecies\nsex\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\n0\nAdelie\nMale\nTorgersen\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie\nFemale\nTorgersen\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie\nFemale\nTorgersen\n40.3\n18.0\n195.0\n3250.0\n\n\n3\nAdelie\nNaN\nTorgersen\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nFemale\nTorgersen\n36.7\n19.3\n193.0\n3450.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nGentoo\nNaN\nBiscoe\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nFemale\nBiscoe\n46.8\n14.3\n215.0\n4850.0\n\n\n341\nGentoo\nMale\nBiscoe\n50.4\n15.7\n222.0\n5750.0\n\n\n342\nGentoo\nFemale\nBiscoe\n45.2\n14.8\n212.0\n5200.0\n\n\n343\nGentoo\nMale\nBiscoe\n49.9\n16.1\n213.0\n5400.0\n\n\n\n\n344 rows × 7 columns",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#sorting-rows",
    "href": "../data_analysis.html#sorting-rows",
    "title": "Data analysis in Python and R",
    "section": "Sorting rows",
    "text": "Sorting rows\n\nsorted_df = penguins.sort_values(by=\"bill_length_mm\")\nsorted_df.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n142\nAdelie\nDream\n32.1\n15.5\n188.0\n3050.0\nFemale\n\n\n98\nAdelie\nDream\n33.1\n16.1\n178.0\n2900.0\nFemale\n\n\n70\nAdelie\nTorgersen\n33.5\n19.0\n190.0\n3600.0\nFemale\n\n\n92\nAdelie\nDream\n34.0\n17.1\n185.0\n3400.0\nFemale\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n\n\n\n\n\n\n\n\nsorted_df.index.values\n\narray([142,  98,  70,  92,   8,  18,  54,  80,  14, 100,  52,  83, 124,\n        25,  66,  74, 136,  60,  90, 118,  68,  22,  42,  48, 150, 148,\n        78,  94, 120,  86,  34,  64,  58,  40,  15, 147,   4,  82, 132,\n        87,  44, 138,  77,  31, 144, 117,  84,  47, 133,  62,  38,  59,\n        21, 121, 102, 103,  10,  20,  11, 149, 104,  28,  96, 108, 134,\n       110, 107,  23,  88, 130,  13, 106, 116,  16,  24, 126,  36,  89,\n         6, 128, 145,  56,   0,  35, 146,   7,   5,  30,   1,  32, 114,\n        45,  50,  72,  93, 112, 105, 139,  71,  39,  51, 137, 140, 122,\n        97,   2,  27,  29, 125, 141,  26,  57, 143,  95,  41, 230, 182,\n        33,  76, 101, 135, 119,  46,  63,  91,  67,  12,  61,  85, 123,\n        55, 127, 151,  65, 326,  69, 236,  53,   9,  79, 113,  37,  49,\n       172, 184, 206,  17, 256, 115, 260,  75, 251,  81, 244, 131, 278,\n       109, 174,  99, 228, 328, 306, 216, 332, 288, 265, 276, 258, 129,\n        43, 257, 246, 336, 314, 268, 304, 275, 241, 252, 272, 208, 298,\n       299, 269, 342, 157, 280, 262, 226, 155, 232, 277, 195, 312, 266,\n       111, 211, 214, 204, 282,  73, 284, 234, 166, 160,  19, 158, 245,\n       220, 286, 238, 334, 281, 193, 243, 170, 180, 291, 294, 293, 225,\n       274, 152, 242, 162, 270, 227, 176, 325, 229, 340, 213, 317, 190,\n       164, 338, 322, 324, 250, 302, 310, 296, 187, 308, 188, 224, 290,\n       247, 329, 202, 248, 292, 318, 233, 255, 271, 173, 320, 295, 259,\n       239, 222, 337, 192, 199, 231, 300, 323, 254, 171, 237, 235, 209,\n       316, 313, 179, 287, 263, 261, 217, 186, 331, 201, 285, 343, 303,\n       153, 221, 223, 249, 198, 273, 210, 219, 240, 168, 279, 341, 267,\n       330, 167, 178, 264, 175, 289, 205, 305, 218, 197, 315, 196, 194,\n       185, 297, 319, 154, 159, 161, 307, 203, 333, 200, 163, 212, 165,\n       177, 189, 309, 207, 311, 301, 156, 181, 327, 191, 183, 283, 335,\n       215, 321, 169, 253,   3, 339])\n\n\nClick to the left of an output cell to enable/disable scrolling of the output (usefull for large amounts of output).\n\nsorted_df.loc[0]\n\nspecies                 Adelie\nisland               Torgersen\nbill_length_mm            39.1\nbill_depth_mm             18.7\nflipper_length_mm        181.0\nbody_mass_g             3750.0\nsex                       Male\nName: 0, dtype: object\n\n\n\nsorted_df.flipper_length_mm[0]\n\n181.0\n\n\n\nsorted_df.iloc[0] # iloc !!!\n\nspecies              Adelie\nisland                Dream\nbill_length_mm         32.1\nbill_depth_mm          15.5\nflipper_length_mm     188.0\nbody_mass_g          3050.0\nsex                  Female\nName: 142, dtype: object\n\n\n\nsorted_df.flipper_length_mm.iloc[0]\n\n188.0",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#summary-stats",
    "href": "../data_analysis.html#summary-stats",
    "title": "Data analysis in Python and R",
    "section": "Summary stats",
    "text": "Summary stats\n\npenguins.describe()\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\ncount\n342.000000\n342.000000\n342.000000\n342.000000\n\n\nmean\n43.921930\n17.151170\n200.915205\n4201.754386\n\n\nstd\n5.459584\n1.974793\n14.061714\n801.954536\n\n\nmin\n32.100000\n13.100000\n172.000000\n2700.000000\n\n\n25%\n39.225000\n15.600000\n190.000000\n3550.000000\n\n\n50%\n44.450000\n17.300000\n197.000000\n4050.000000\n\n\n75%\n48.500000\n18.700000\n213.000000\n4750.000000\n\n\nmax\n59.600000\n21.500000\n231.000000\n6300.000000\n\n\n\n\n\n\n\n\npenguins.bill_length_mm.mean()\n\n43.9219298245614\n\n\n\npenguins.bill_length_mm.count()\n\n342",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../data_analysis.html#grouping",
    "href": "../data_analysis.html#grouping",
    "title": "Data analysis in Python and R",
    "section": "Grouping",
    "text": "Grouping\n\npenguins.groupby('island')\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x15cc9e5e0&gt;\n\n\n\nAggregate\nAggregating produces a single value for each variable in each group:\nMeans for all numeric variables for each island:\n\npenguins.groupby('island').aggregate(\"mean\", numeric_only=True)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\nisland\n\n\n\n\n\n\n\n\nBiscoe\n45.257485\n15.874850\n209.706587\n4716.017964\n\n\nDream\n44.167742\n18.344355\n193.072581\n3712.903226\n\n\nTorgersen\n38.950980\n18.429412\n191.196078\n3706.372549\n\n\n\n\n\n\n\n\npenguins.groupby('island').mean(numeric_only=True)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\nisland\n\n\n\n\n\n\n\n\nBiscoe\n45.257485\n15.874850\n209.706587\n4716.017964\n\n\nDream\n44.167742\n18.344355\n193.072581\n3712.903226\n\n\nTorgersen\n38.950980\n18.429412\n191.196078\n3706.372549\n\n\n\n\n\n\n\nMeans for bill_length_mm and flipper_length_mm:\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].mean()\n\n\n\n\n\n\n\n\nbill_length_mm\nflipper_length_mm\n\n\nisland\n\n\n\n\n\n\nBiscoe\n45.257485\n209.706587\n\n\nDream\n44.167742\n193.072581\n\n\nTorgersen\n38.950980\n191.196078\n\n\n\n\n\n\n\nJust for flipper_length_mm:\n\npenguins.groupby('island').flipper_length_mm.mean()\n\nisland\nBiscoe       209.706587\nDream        193.072581\nTorgersen    191.196078\nName: flipper_length_mm, dtype: float64\n\n\n\n\nTransform\nTransforming produces new colums with the same length as the input:\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].transform(\"mean\")\n\n\n\n\n\n\n\n\nbill_length_mm\nflipper_length_mm\n\n\n\n\n0\n38.950980\n191.196078\n\n\n1\n38.950980\n191.196078\n\n\n2\n38.950980\n191.196078\n\n\n3\n38.950980\n191.196078\n\n\n4\n38.950980\n191.196078\n\n\n...\n...\n...\n\n\n339\n45.257485\n209.706587\n\n\n340\n45.257485\n209.706587\n\n\n341\n45.257485\n209.706587\n\n\n342\n45.257485\n209.706587\n\n\n343\n45.257485\n209.706587\n\n\n\n\n344 rows × 2 columns\n\n\n\n\ndef z_value(sr):\n    return (sr - sr.mean()) / sr.std()\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].transform(z_value)\n\n\n\n\n\n\n\n\nbill_length_mm\nflipper_length_mm\n\n\n\n\n0\n0.049258\n-1.636022\n\n\n1\n0.181475\n-0.833742\n\n\n2\n0.445910\n0.610362\n\n\n3\nNaN\nNaN\n\n\n4\n-0.744048\n0.289450\n\n\n...\n...\n...\n\n\n339\nNaN\nNaN\n\n\n340\n0.323193\n0.374297\n\n\n341\n1.077478\n0.869267\n\n\n342\n-0.012044\n0.162167\n\n\n343\n0.972717\n0.232877\n\n\n\n\n344 rows × 2 columns\n\n\n\n\n\nApply\nFlexible method allowing any operation on grouped data.\nReturn a single value:\n\ndef fun(df):\n    return df.bill_length_mm + df.flipper_length_mm.mean() / df.body_mass_g\n\npenguins.groupby('island').apply(fun)#.to_frame('my_stat')\n\nisland        \nBiscoe     20     37.861678\n           21     37.758252\n           22     35.955186\n           23     38.253090\n           24     38.855186\n                    ...    \nTorgersen  127    41.544464\n           128    39.062687\n           129    44.147799\n           130    38.557503\n           131    43.154627\nLength: 344, dtype: float64\n\n\nReturn a dataframe:\n\ndef fun(df):\n    return pd.DataFrame({'sqrt_bill': np.sqrt(df.bill_length_mm),\n                         'bill_squared': df.bill_length_mm**2})\n\npenguins.groupby('island').apply(fun)\n\n\n\n\n\n\n\n\n\nsqrt_bill\nbill_squared\n\n\nisland\n\n\n\n\n\n\n\nBiscoe\n20\n6.148170\n1428.84\n\n\n21\n6.140033\n1421.29\n\n\n22\n5.991661\n1288.81\n\n\n23\n6.180615\n1459.24\n\n\n24\n6.228965\n1505.44\n\n\n...\n...\n...\n...\n\n\nTorgersen\n127\n6.442049\n1722.25\n\n\n128\n6.244998\n1521.00\n\n\n129\n6.640783\n1944.81\n\n\n130\n6.204837\n1482.25\n\n\n131\n6.565059\n1857.61\n\n\n\n\n344 rows × 2 columns",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data analysis in Python and R</span>"
    ]
  },
  {
    "objectID": "../plotting.html",
    "href": "../plotting.html",
    "title": "Plots with matplotlib",
    "section": "",
    "text": "Better plotting with seaborn (on top of matplotlib)\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\") ;\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\") ;\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\", style=\"sex\") ;\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\", \n                style=\"sex\", size=\"body_mass_g\") ;\ndef legend_outside():\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\nsns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\", hue=\"species\", style=\"sex\", size=\"body_mass_g\") ;\n\nlegend_outside()\n\nplt.title(\"Penguin measurements\")\nplt.ylabel(\"flipper length (mm)\")\nplt.xlabel(\"bill length in (mm)\") ;",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Plots with matplotlib</span>"
    ]
  },
  {
    "objectID": "../plotting.html#facetgrid.map-vs.-facetgrid.map_dataframe",
    "href": "../plotting.html#facetgrid.map-vs.-facetgrid.map_dataframe",
    "title": "Plots with matplotlib",
    "section": "FacetGrid.map vs. FacetGrid.map_dataframe",
    "text": "FacetGrid.map vs. FacetGrid.map_dataframe\nWhen you use FacetGrid.map(func, \"col1\", \"col2\", ...), the function func is passed the values of the columns \"col1\" and \"col2\" (and more if needed) as parameters 1 and 2 (args[0], args[1], …). In addition, the function always receives a keyword argument named color=.\n\ndef scatter(*args, **kwargs):\n    return plt.scatter(args[0], args[1], **kwargs)\n    \ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(scatter, \"bill_length_mm\", \"flipper_length_mm\") ;\n\nWhen you use FacetGrid.map_dataframe(func, \"col1\", \"col2\", ...), the function func is passed the names \"col1\" and \"col2\" (and more if needed) as parameters 1 and 2 (args[0], args[1], …), and the filtered dataframe as keyword argument data=. In addition, the function always receives a keyword argument named color=.\n\ndef scatterplot(*args, **kwargs):\n    return sns.scatterplot(x=args[0], y=args[1], **kwargs)\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map_dataframe(scatterplot, \"bill_length_mm\", \"flipper_length_mm\") ;\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(sns.histplot, \"bill_length_mm\") ;\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(sns.kdeplot, \"bill_length_mm\") ;\n\n\n\n\n\n\n\n\n\nsns.pairplot(penguins, hue=\"species\") ;\n\n\n\n\n\n\n\n\n\nsns.pairplot(penguins, hue=\"sex\") ;",
    "crumbs": [
      "Tutorials",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Plots with matplotlib</span>"
    ]
  },
  {
    "objectID": "../conda.html",
    "href": "../conda.html",
    "title": "Conda",
    "section": "",
    "text": "Conda enviroments\nIn bioinformatics, we install packages and programs so we can use them in our analyses and pipelines. Sometimes, however, the versions of packages you need for one project conflicts with the versions you need for other projects that you work on in parallel. Such conflicts seem like an unsolvable problem. Would it not be fantastic if you could create a small insulated world for each project, which then only contained the packages you needed for that particular project?. If each project had its own isolated world, then there would be no such version conflicts. Fortunately, there is a tool that lets you do just that, and its name is Conda.\n“Conda is an open source package management system and environment management system for installing multiple versions of software packages and their dependencies and switching easily between them.”\nThe small worlds that Conda creates are called “environments”. You can create as many environments as you like, and then use each one for a separate bioinformatics project, a course, a bachelor project, or whatever you would like to insulate from everything else. Conda also downloads and installs the packages for you and it makes sure that the software packages you install in each environment are compatible. It even makes sure that packages needed by packages (dependencies) are also installed. Conda is truly awesome.\nIn this case you need to create a new enviroment where you install franklin\nYou will need franklin for downloading assignments. You will also be able to choose a enviroment in franklin that specifially fits the assignment you want to make.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conda</span>"
    ]
  },
  {
    "objectID": "../gitlab.html",
    "href": "../gitlab.html",
    "title": "Gitlab server",
    "section": "",
    "text": "set up gitlab\nIntroduction to GitLab\nGitLab is a web-based DevOps platform that provides a complete suite of tools for software development, version control, and continuous integration/continuous deployment (CI/CD). At its core, GitLab is built around Git, a distributed version control system, but extends far beyond code hosting to support the full software development lifecycle in a single application.\nGitLab enables individuals and teams to collaborate on code by providing:\nGit repository management: Users can host, clone, branch, and merge Git repositories, with integrated access controls and audit trails. Issue tracking and project planning: Built-in tools for task management, including issue boards, milestones, labels, and epics, support Agile and Scrum workflows. CI/CD pipelines: GitLab CI/CD allows automatic building, testing, and deployment of code changes using pipelines defined in .gitlab-ci.yml. These pipelines are deeply integrated with the repository. Code review and collaboration: Merge requests (similar to pull requests) facilitate peer review, code discussion, and automated checks before integration. Security and compliance: GitLab offers features like container scanning, dependency scanning, and license compliance to support secure software supply chains. GitLab is available both as a hosted service (GitLab.com) and as a self-managed solution, which organizations can install on-premises or in private cloud environments. Its open-core model offers a free community edition and paid enterprise features.\nIn summary, GitLab is a comprehensive platform that combines source code management with DevOps capabilities, enabling teams to manage their entire development workflow—from planning and coding to testing, security, and deployment—in a single, cohesive environment.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Gitlab server</span>"
    ]
  },
  {
    "objectID": "../gitlab.html#set-up-gitlab",
    "href": "../gitlab.html#set-up-gitlab",
    "title": "Gitlab server",
    "section": "",
    "text": "sign in\nGo to gitlab by following this link On the sign-in page, choose the login option called login with Uni-add.\n\n\nSSH keys - what is that and why do i need it?\nSSH keys are a secure way to log in to remote systems or services without needing to enter a password each time. An SSH key works like a digital lock and key system. The private key is kept safely on your computer, while the matching public key is shared with the service you want to access. When you try to connect, the service checks that your private key matches the public one it has on file. If they match, access is granted automatically—no password required.\n\n\nHow do i get a SSH key?\nkaspers guide\n\n\ninsert SSH key to gitlab\nTo access your SSH keys you use the command: cat ~/.ssh/id_rsa.pub\nIt is very important that you choose the rsa.pub version.\nAfter you have run the command cat ~/.ssh/id_rsa.pub in your terminal a long line of letters and number will appear in your terminal. This is your SSH key. Now copy it and go back to the gitlab webpage\nThen press the icon on the top beside the picture that represent your profile and find the option called “edit profile” in the dropdown menu It should look like this: \nNow you should be able to see an option in the left side menu called ‘add new ssh key’. You press that and then you insert the copied ssh-key in the box.\nThe page should look something like the figure below: \nIn the bottom of the page, you can write an expiration date of your SSH key. In order to not have to enter a new SSH key, you can remove this.\nYou are now ready to use gitlab!",
    "crumbs": [
      "About",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Gitlab server</span>"
    ]
  },
  {
    "objectID": "../docker.html",
    "href": "../docker.html",
    "title": "Docker virtualization",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nHow Docker Bridges Operating Systems (Layman’s Explanation)\nImagine you have a piece of software that works perfectly on your computer, but when you give it to someone else, it breaks—maybe because they use a different version of Windows, macOS, or Linux, or they’re missing some necessary software. This is a common problem in software development, and Docker solves it by creating a kind of “portable box” for software.\nHere’s how it works in simple terms:\nDocker puts your software, along with everything it needs to run (like tools, libraries, and settings), into a container. Think of it like packing a suitcase that has exactly what your app needs—no more, no less. This container always behaves the same, no matter where you run it: your laptop, a colleague’s machine, a server in the cloud. That’s because Docker doesn’t rely on the local operating system to provide the right setup—it brings its own setup. Even if your computer runs macOS and someone else uses Linux, the Docker container will still work, because Docker acts like a translator. It uses the host system’s resources (CPU, memory, etc.), but keeps the software environment inside the container separate and consistent. Unlike virtual machines, which need to boot an entire operating system, Docker shares the core parts of the host OS, making containers much faster and lighter. In short: Docker bridges operating systems by wrapping your software in a self-contained box that includes everything it needs to run, and then letting that box run on almost any computer without worrying about differences between systems.\nDocker is an open-source platform that automates the deployment, scaling, and management of applications using containerization. Containers are lightweight, standalone, and executable software packages that include everything needed to run an application—code, runtime, system tools, libraries, and settings. This ensures that software behaves the same regardless of the environment in which it is executed.\nUnlike virtual machines, which replicate entire operating systems, Docker containers share the host OS kernel and isolate applications at the process level. This makes containers more efficient in terms of performance and resource utilization. Docker uses a layered filesystem and image caching to further optimize deployment speed and storage.\nDocker’s core components include:\nDocker Engine: The runtime that builds and runs containers. Docker Images: Immutable templates used to create containers, typically defined via Dockerfile scripts. Docker Containers: Instances of images that are executed with an isolated filesystem and environment. Docker Hub: A public registry for sharing and retrieving Docker images. Docker Compose: A tool for defining and running multi-container applications using YAML configuration. Docker is widely adopted in both development and production environments due to its ability to ensure reproducibility, simplify dependency management, and support scalable microservice architectures. It integrates with orchestration systems like Kubernetes and is a foundational technology in continuous integration and deployment (CI/CD) pipelines.\nDespite its benefits, Docker introduces complexity related to security, networking, and persistent storage, especially in distributed settings. Nonetheless, it remains a key tool for encapsulating environments and streamlining software delivery across heterogeneous computing platforms.",
    "crumbs": [
      "About",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Docker virtualization</span>"
    ]
  }
]