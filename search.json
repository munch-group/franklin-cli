[
  {
    "objectID": "pages/plotting.html",
    "href": "pages/plotting.html",
    "title": "Plots with matplotlib",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set_style(\"darkgrid\")\n\n# make graphics sharper on a good screen\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nset_matplotlib_formats('retina', 'png')\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\nplt.scatter(penguins.bill_length_mm, penguins.flipper_length_mm) ;  # semi colon makes last value None\nsns.set_style(\"ticks\")\n# sns.set_style(\"darkgrid\")\n# sns.set_style(\"whitegrid\")\n# sns.set_style(\"white\")\n# sns.set_style(\"dark\")\n\nplt.scatter(penguins.bill_length_mm, penguins.flipper_length_mm)\nsns.despine()\nplt.hist(penguins.bill_length_mm) ;",
    "crumbs": [
      "Tutorials",
      "Plots with matplotlib"
    ]
  },
  {
    "objectID": "pages/plotting.html#facetgrid.map-vs.-facetgrid.map_dataframe",
    "href": "pages/plotting.html#facetgrid.map-vs.-facetgrid.map_dataframe",
    "title": "Plots with matplotlib",
    "section": "FacetGrid.map vs. FacetGrid.map_dataframe",
    "text": "FacetGrid.map vs. FacetGrid.map_dataframe\nWhen you use FacetGrid.map(func, \"col1\", \"col2\", ...), the function func is passed the values of the columns \"col1\" and \"col2\" (and more if needed) as parameters 1 and 2 (args[0], args[1], …). In addition, the function always receives a keyword argument named color=.\n\ndef scatter(*args, **kwargs):\n    return plt.scatter(args[0], args[1], **kwargs)\n    \ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(scatter, \"bill_length_mm\", \"flipper_length_mm\") ;\n\nWhen you use FacetGrid.map_dataframe(func, \"col1\", \"col2\", ...), the function func is passed the names \"col1\" and \"col2\" (and more if needed) as parameters 1 and 2 (args[0], args[1], …), and the filtered dataframe as keyword argument data=. In addition, the function always receives a keyword argument named color=.\n\ndef scatterplot(*args, **kwargs):\n    return sns.scatterplot(x=args[0], y=args[1], **kwargs)\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map_dataframe(scatterplot, \"bill_length_mm\", \"flipper_length_mm\") ;\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(sns.histplot, \"bill_length_mm\") ;\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(penguins, row=\"sex\", col=\"island\", hue=\"species\") ;\ng.map(sns.kdeplot, \"bill_length_mm\") ;\n\n\n\n\n\n\n\n\n\nsns.pairplot(penguins, hue=\"species\") ;\n\n\n\n\n\n\n\n\n\nsns.pairplot(penguins, hue=\"sex\") ;",
    "crumbs": [
      "Tutorials",
      "Plots with matplotlib"
    ]
  },
  {
    "objectID": "pages/terminal.html",
    "href": "pages/terminal.html",
    "title": "The terminal",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nA terminal is a text-based interface that allows users to interact with the operating system by typing commands. It provides direct access to the system shell—a program that interprets user input and executes corresponding instructions.\nHistorically, “terminals” referred to physical devices (e.g., teletypewriters or CRT monitors) connected to mainframe computers. In modern computing, a terminal is typically a software application (e.g., Terminal on macOS, GNOME Terminal on Linux, Command Prompt or PowerShell on Windows) that emulates this interface.\nKey characteristics of a terminal include:\nCommand-Line Interface (CLI): Unlike graphical user interfaces (GUIs), a terminal requires textual input and returns textual output. Shell Access: The terminal runs a shell such as bash, zsh, or fish, which interprets and executes user commands (e.g., file manipulation, process control, networking). Script Execution: Users can run scripts, automate tasks, and chain commands using control operators (e.g., &&, |, &gt;, etc.). Remote Access: Terminals can be used to log into remote systems via protocols such as SSH, providing a low-overhead method for remote system administration and programming. The terminal is a powerful tool, particularly in software development, system administration, and high-performance computing. It enables reproducibility, fine-grained control, and automation, though it requires users to become familiar with a command language and often lacks the immediate feedback and discoverability of graphical interfaces.",
    "crumbs": [
      "Key concepts",
      "The terminal"
    ]
  },
  {
    "objectID": "pages/ssh.html",
    "href": "pages/ssh.html",
    "title": "SSH keys",
    "section": "",
    "text": "Firstly, you have to understand what public/private encryption keys are. A private key is a very long, random sequence of bits. A private key is kept secret and never leaves your laptop. A public key is another string of bits that is a derivative of the private key.\nYou can generate a unique public key from the private key but cannot get the private key from a public key: It is a one-way process. You can encrypt (or sign) any message using the public key, and it will only be possible to decrypt it using the private key it is derived from. In other words, anyone with your public key can send you encrypted messages that only you will be able to read.\nSo, if the cluster has your public key saved, it can authenticate you like this: The cluster sends your laptop a message encrypted using the public key. Your laptop then decrypts the message using its private key and sends it back. If the cluster receives a correctly decrypted message it knows it is you and logs you in.\nFirst, check if you have these two authentication files on your local machine:\n~/.ssh/id_rsa\n~/.ssh/id_rsa.pub\nYou can do so using the ls commmand:\n\n\nTerminal\n\nls -a ~/.ssh\n\nYou most likely do not. If so, you generate authentication keys with the command below. Just press Enter when prompted for a file in which to save the key. Do not enter a passphrase when prompted - just press enter:\n\n\nTerminal\n\nssh-keygen -t rsa\n\nNow use ssh to create a directory ~/.ssh on the cluster (assuming your username on the cluster is &lt;cluster user name&gt;). SSH will prompt you for your password.\n\n\nTerminal\n\nssh &lt;cluster user name&gt;@login.genome.au.dk mkdir -p .ssh\n\nFinally, append the public ssh key on your local machine to the file .ssh/authorized_keys on the cluster and enter your password (replace &lt;cluster user name&gt; with your cluster user name):\n\n\nTerminal\n\ncat ~/.ssh/id_rsa.pub | ssh username@login.genome.au.dk 'cat &gt;&gt; .ssh/authorized_keys'\n\nFrom now on, you can log into the cluster from your local machine without being prompted for a password.\nTry it:\n\n\nTerminal\n\nssh &lt;cluster user name&gt;@login.genome.au.dk\n\n(see, no password).",
    "crumbs": [
      "Key concepts",
      "SSH keys"
    ]
  },
  {
    "objectID": "pages/ssh.html#tldr",
    "href": "pages/ssh.html#tldr",
    "title": "SSH keys",
    "section": "",
    "text": "Firstly, you have to understand what public/private encryption keys are. A private key is a very long, random sequence of bits. A private key is kept secret and never leaves your laptop. A public key is another string of bits that is a derivative of the private key.\nYou can generate a unique public key from the private key but cannot get the private key from a public key: It is a one-way process. You can encrypt (or sign) any message using the public key, and it will only be possible to decrypt it using the private key it is derived from. In other words, anyone with your public key can send you encrypted messages that only you will be able to read.\nSo, if the cluster has your public key saved, it can authenticate you like this: The cluster sends your laptop a message encrypted using the public key. Your laptop then decrypts the message using its private key and sends it back. If the cluster receives a correctly decrypted message it knows it is you and logs you in.\nFirst, check if you have these two authentication files on your local machine:\n~/.ssh/id_rsa\n~/.ssh/id_rsa.pub\nYou can do so using the ls commmand:\n\n\nTerminal\n\nls -a ~/.ssh\n\nYou most likely do not. If so, you generate authentication keys with the command below. Just press Enter when prompted for a file in which to save the key. Do not enter a passphrase when prompted - just press enter:\n\n\nTerminal\n\nssh-keygen -t rsa\n\nNow use ssh to create a directory ~/.ssh on the cluster (assuming your username on the cluster is &lt;cluster user name&gt;). SSH will prompt you for your password.\n\n\nTerminal\n\nssh &lt;cluster user name&gt;@login.genome.au.dk mkdir -p .ssh\n\nFinally, append the public ssh key on your local machine to the file .ssh/authorized_keys on the cluster and enter your password (replace &lt;cluster user name&gt; with your cluster user name):\n\n\nTerminal\n\ncat ~/.ssh/id_rsa.pub | ssh username@login.genome.au.dk 'cat &gt;&gt; .ssh/authorized_keys'\n\nFrom now on, you can log into the cluster from your local machine without being prompted for a password.\nTry it:\n\n\nTerminal\n\nssh &lt;cluster user name&gt;@login.genome.au.dk\n\n(see, no password).",
    "crumbs": [
      "Key concepts",
      "SSH keys"
    ]
  },
  {
    "objectID": "pages/admin_franklin_code.html",
    "href": "pages/admin_franklin_code.html",
    "title": "Code",
    "section": "",
    "text": "import os\n\ndef print_tree(dir_path, prefix=''):\n    entries = sorted(\n        [e for e in os.listdir(dir_path) if not e.startswith('.')]\n    )\n    last_index = len(entries) - 1\n\n    for i, entry in enumerate(entries):\n        path = os.path.join(dir_path, entry)\n        is_last = (i == last_index)\n        connector = '└── ' if is_last else '├── '\n        print(f\"{prefix}{connector}{entry}\")\n\n        if os.path.isdir(path):\n            extension = '    ' if is_last else '│   '\n            print_tree(path, prefix + extension)\n\n# Example usage:\nprint_tree(\".\")\n\n├── admin_components.html\n├── admin_components.qmd\n├── admin_docker.html\n├── admin_docker.qmd\n├── admin_franklin_code.qmd\n├── admin_franklin_code.quarto_ipynb\n├── admin_gitlab.html\n├── admin_gitlab.qmd\n├── computer_setup.html\n├── computer_setup.qmd\n├── developing_exercises.qmd\n├── docker.html\n├── docker.qmd\n├── editing.html\n├── editing.qmd\n├── educator\n│   ├── _quarto.yml\n│   ├── au_fonts\n│   │   ├── AULogoBold.ttf\n│   │   ├── AULogoReg.ttf\n│   │   ├── AUPassata_Bold.ttf\n│   │   ├── AUPassata_Light.ttf\n│   │   ├── AUPassata_Rg.ttf\n│   │   └── AU_Peto.ttf\n│   ├── custom.scss\n│   ├── header_extra.tex\n│   ├── headers.lua\n│   ├── index.html\n│   ├── index.qmd\n│   └── jupyter.html\n├── getting_started.html\n├── getting_started.qmd\n├── git.html\n├── git.qmd\n├── gitlab.html\n├── gitlab.qmd\n├── images\n│   ├── Skærmbillede 2025-04-01 kl. 17.51.22.png\n│   ├── elephant.png\n│   ├── pipeline_example.png\n│   └── pipeline_example_nomenu.png\n├── intalling.qmd\n├── jupyter.html\n├── jupyter.qmd\n├── jupyterlab.html\n├── jupyterlab.ipynb\n├── jupyterlab_files\n│   └── figure-html\n│       ├── 19dd77de-85d6-4148-ad6b-1000e7e630e7-1-3129ad44-07b0-4a54-aab7-112f6b991d3c.png\n│       └── ee2ca318-6497-41ef-87c5-9e306291bbb4-1-114001ce-1f71-49de-972e-7128f491eee4.png\n├── making.html\n├── making.qmd\n├── numpy_pandas.html\n├── numpy_pandas.ipynb\n├── overview.html\n├── overview.qmd\n├── plotting.ipynb\n├── r_to_python.html\n├── r_to_python.ipynb\n├── running.html\n├── running.qmd\n├── sascha_tester.html\n├── sascha_tester.md\n├── ssh.qmd\n├── student\n│   ├── _quarto.yml\n│   ├── au_fonts\n│   │   ├── AULogoBold.ttf\n│   │   ├── AULogoReg.ttf\n│   │   ├── AUPassata_Bold.ttf\n│   │   ├── AUPassata_Light.ttf\n│   │   ├── AUPassata_Rg.ttf\n│   │   └── AU_Peto.ttf\n│   ├── custom.scss\n│   ├── docker.html\n│   ├── docker.qmd\n│   ├── header_extra.tex\n│   ├── headers.lua\n│   ├── index.html\n│   ├── index.qmd\n│   ├── jupyter.html\n│   ├── jupyter.qmd\n│   ├── jupyterlab.html\n│   ├── jupyterlab.ipynb\n│   ├── jupyterlab_files\n│   │   └── figure-html\n│   │       ├── 19dd77de-85d6-4148-ad6b-1000e7e630e7-1-3129ad44-07b0-4a54-aab7-112f6b991d3c.png\n│   │       └── ee2ca318-6497-41ef-87c5-9e306291bbb4-1-114001ce-1f71-49de-972e-7128f491eee4.png\n│   ├── terminal.html\n│   └── terminal.qmd\n├── terminal.qmd\n└── using.qmd\n\n\nsrc/franklin\nfranklin\n|-- __init__.py\n|-- config.py\n|-- crash.py\n|-- cutie.py\n|-- data\n|-- desktop.py\n|-- docker.py\n|-- gitlab.py\n|-- jupyter.py\n|-- logger.py\n|-- options.py\n|-- system.py\n|-- terminal.py\n|-- update.py\n`-- utils.py\n-- data\n   |-- default_user_settings.json\n   |-- gitui\n   |   |-- key_bindings.ron\n   |   |-- key_symbols.ron\n   |   `-- theme.ron\n   |-- README.md\n   `-- template\n       |-- base\n       |   |-- Dockerfile\n       |   |-- entrypoint.sh\n       |   |-- README.md\n       |   `-- tagged-release.sh\n       `-- exercise\n           |-- Dockerfile\n           |-- exercise.ipynb\n           |-- franklin.log\n           |-- pixi.toml\n           `-- README.md"
  },
  {
    "objectID": "pages/student/jupyter.html",
    "href": "pages/student/jupyter.html",
    "title": "Jupyter",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nJupyter Notebooks are an interactive computing environment that allow users to create and share documents containing live code, equations, visualizations, and narrative text. Originally developed as part of the IPython project, Jupyter (short for Julia, Python, R) now supports over 100 programming languages and has become a standard tool in data science, scientific computing, and education.\nAt the core of a Jupyter Notebook is a web-based interface that organizes content into “cells.” These cells can contain code (typically in Python, but also in other languages via kernels), formatted text using Markdown, LaTeX for equations, and embedded multimedia elements. Users execute code in-place, and outputs such as plots or tables appear directly below the corresponding cells. This structure enables exploratory data analysis and facilitates reproducibility by interleaving code and its results with documentation.\nNotebooks are stored in .ipynb files (JSON format), which preserve the code, outputs, and formatting. They can be run locally using the Jupyter server or hosted in cloud environments such as Google Colab or Binder. For scientific workflows, notebooks can integrate with tools for version control, containerization, and workflow management, making them a flexible instrument for open and reproducible research.\nDespite their strengths, Jupyter Notebooks are not without limitations. Version control can be challenging due to the JSON-based format, and improper use (e.g., out-of-order execution) can compromise reproducibility. Nevertheless, their advantages in accessibility, interactivity, and communication have made them central to modern computational work."
  },
  {
    "objectID": "pages/student/jupyterlab.html",
    "href": "pages/student/jupyterlab.html",
    "title": "Jupyterlab",
    "section": "",
    "text": "Introduction to JupyterLab\nJupyterLab is the next-generation web-based user interface for Project Jupyter, designed to offer a flexible and extensible environment for interactive computing. It builds upon the classic Jupyter Notebook interface by integrating a wide range of tools—code consoles, terminals, text editors, data file viewers, and notebooks—into a unified workspace.\nThe JupyterLab interface is organized into a multi-tab layout, resembling an integrated development environment (IDE). Users can open multiple documents side by side (e.g., a Python script next to a Markdown file and a terminal), drag-and-drop tabs, and link interactive views of the same dataset. It supports live code execution, output rendering (including plots and LaTeX equations), and seamless integration with kernels for many languages, though Python is most common.\nKey features of JupyterLab include:\nNotebook authoring: Full support for .ipynb notebooks with executable code cells, Markdown, and rich outputs. Code consoles: Interactive REPLs connected to notebooks or scripts for testing code snippets. Text and code editing: Built-in editor with syntax highlighting, version control integration, and support for many file types. Terminal access: Direct command-line interface within the browser for shell-level operations. Extensibility: Modular architecture that supports plugins for additional language kernels, visualizations, or custom workflows. JupyterLab preserves all the functionality of the classic notebook interface while offering a more powerful and customizable platform suitable for complex data science workflows, scientific research, and reproducible computing. It is widely used in academia, industry, and education due to its interactive nature and support for literate programming principles.\nJupyterLab is a highly extensible, feature-rich notebook authoring application and editing environment, and is a part of Project Jupyter, a large umbrella project centered around the goal of providing tools (and standards) for interactive computing with computational notebooks.\nA computational notebook is a shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, graphs and figures, and interactive controls. A notebook, along with an editor like JupyterLab, provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others.\nJupyterLab is a sibling to other notebook authoring applications under the Project Jupyter umbrella, like Jupyter Notebook and Jupyter Desktop. JupyterLab offers a more advanced, feature rich, customizable experience compared to Jupyter Notebook.MM"
  },
  {
    "objectID": "pages/student/jupyterlab.html#menu-toolbar-context-menu",
    "href": "pages/student/jupyterlab.html#menu-toolbar-context-menu",
    "title": "Jupyterlab",
    "section": "Menu, Toolbar, Context menu",
    "text": "Menu, Toolbar, Context menu"
  },
  {
    "objectID": "pages/student/jupyterlab.html#command-palette-commandctrl-shift-c",
    "href": "pages/student/jupyterlab.html#command-palette-commandctrl-shift-c",
    "title": "Jupyterlab",
    "section": "Command palette: Command/Ctrl Shift C",
    "text": "Command palette: Command/Ctrl Shift C"
  },
  {
    "objectID": "pages/student/jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "href": "pages/student/jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "title": "Jupyterlab",
    "section": "Keyboard short-cuts: Command/Ctrl Shift H",
    "text": "Keyboard short-cuts: Command/Ctrl Shift H"
  },
  {
    "objectID": "pages/student/jupyterlab.html#code-blocks",
    "href": "pages/student/jupyterlab.html#code-blocks",
    "title": "Jupyterlab",
    "section": "Code blocks",
    "text": "Code blocks\n\nx = 0"
  },
  {
    "objectID": "pages/student/jupyterlab.html#last-value-is-displayed",
    "href": "pages/student/jupyterlab.html#last-value-is-displayed",
    "title": "Jupyterlab",
    "section": "Last value is displayed",
    "text": "Last value is displayed\n\nx = 1\nx\n\n1"
  },
  {
    "objectID": "pages/student/jupyterlab.html#everything-is-one-python-process",
    "href": "pages/student/jupyterlab.html#everything-is-one-python-process",
    "title": "Jupyterlab",
    "section": "Everything is one Python process",
    "text": "Everything is one Python process\n\nx += 1\nx\n\n2"
  },
  {
    "objectID": "pages/student/jupyterlab.html#restarting-the-kernel",
    "href": "pages/student/jupyterlab.html#restarting-the-kernel",
    "title": "Jupyterlab",
    "section": "Restarting the kernel",
    "text": "Restarting the kernel"
  },
  {
    "objectID": "pages/student/jupyterlab.html#lists",
    "href": "pages/student/jupyterlab.html#lists",
    "title": "Jupyterlab",
    "section": "Lists",
    "text": "Lists\n\nfoo\nbar\nbaz"
  },
  {
    "objectID": "pages/student/jupyterlab.html#numbered-lists",
    "href": "pages/student/jupyterlab.html#numbered-lists",
    "title": "Jupyterlab",
    "section": "Numbered lists",
    "text": "Numbered lists\n\nfoo\nbar\nbaz"
  },
  {
    "objectID": "pages/student/jupyterlab.html#quotes",
    "href": "pages/student/jupyterlab.html#quotes",
    "title": "Jupyterlab",
    "section": "Quotes",
    "text": "Quotes\n\nThis is a quote"
  },
  {
    "objectID": "pages/student/jupyterlab.html#formulas",
    "href": "pages/student/jupyterlab.html#formulas",
    "title": "Jupyterlab",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)\n\nHTML"
  },
  {
    "objectID": "pages/student/jupyterlab.html#header-2",
    "href": "pages/student/jupyterlab.html#header-2",
    "title": "Jupyterlab",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4"
  },
  {
    "objectID": "pages/student/jupyterlab.html#formulas-1",
    "href": "pages/student/jupyterlab.html#formulas-1",
    "title": "Jupyterlab",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)"
  },
  {
    "objectID": "pages/student/jupyterlab.html#tables",
    "href": "pages/student/jupyterlab.html#tables",
    "title": "Jupyterlab",
    "section": "Tables",
    "text": "Tables\n\n\n\nName\nValue\n\n\n\n\nfoo\n2\n\n\nbar\n3"
  },
  {
    "objectID": "pages/admin_components.html#docker",
    "href": "pages/admin_components.html#docker",
    "title": "Components",
    "section": "Docker",
    "text": "Docker",
    "crumbs": [
      "Development",
      "Components"
    ]
  },
  {
    "objectID": "pages/admin_components.html#pixi",
    "href": "pages/admin_components.html#pixi",
    "title": "Components",
    "section": "Pixi",
    "text": "Pixi",
    "crumbs": [
      "Development",
      "Components"
    ]
  },
  {
    "objectID": "pages/admin_components.html#gitlab",
    "href": "pages/admin_components.html#gitlab",
    "title": "Components",
    "section": "Gitlab",
    "text": "Gitlab",
    "crumbs": [
      "Development",
      "Components"
    ]
  },
  {
    "objectID": "pages/gitlab.html",
    "href": "pages/gitlab.html",
    "title": "Gitlab",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\n\n\n\nalt text\n\n\n\n\n\nalt text\n\n\nIntroduction to GitLab\nGitLab is a web-based DevOps platform that provides a complete suite of tools for software development, version control, and continuous integration/continuous deployment (CI/CD). At its core, GitLab is built around Git, a distributed version control system, but extends far beyond code hosting to support the full software development lifecycle in a single application.\nGitLab enables individuals and teams to collaborate on code by providing:\nGit repository management: Users can host, clone, branch, and merge Git repositories, with integrated access controls and audit trails. Issue tracking and project planning: Built-in tools for task management, including issue boards, milestones, labels, and epics, support Agile and Scrum workflows. CI/CD pipelines: GitLab CI/CD allows automatic building, testing, and deployment of code changes using pipelines defined in .gitlab-ci.yml. These pipelines are deeply integrated with the repository. Code review and collaboration: Merge requests (similar to pull requests) facilitate peer review, code discussion, and automated checks before integration. Security and compliance: GitLab offers features like container scanning, dependency scanning, and license compliance to support secure software supply chains. GitLab is available both as a hosted service (GitLab.com) and as a self-managed solution, which organizations can install on-premises or in private cloud environments. Its open-core model offers a free community edition and paid enterprise features.\nIn summary, GitLab is a comprehensive platform that combines source code management with DevOps capabilities, enabling teams to manage their entire development workflow—from planning and coding to testing, security, and deployment—in a single, cohesive environment.",
    "crumbs": [
      "Key concepts",
      "Gitlab"
    ]
  },
  {
    "objectID": "pages/jupyter.html",
    "href": "pages/jupyter.html",
    "title": "Jupyter",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nJupyter Notebooks are an interactive computing environment that allow users to create and share documents containing live code, equations, visualizations, and narrative text. Originally developed as part of the IPython project, Jupyter (short for Julia, Python, R) now supports over 100 programming languages and has become a standard tool in data science, scientific computing, and education.\nAt the core of a Jupyter Notebook is a web-based interface that organizes content into “cells.” These cells can contain code (typically in Python, but also in other languages via kernels), formatted text using Markdown, LaTeX for equations, and embedded multimedia elements. Users execute code in-place, and outputs such as plots or tables appear directly below the corresponding cells. This structure enables exploratory data analysis and facilitates reproducibility by interleaving code and its results with documentation.\nNotebooks are stored in .ipynb files (JSON format), which preserve the code, outputs, and formatting. They can be run locally using the Jupyter server or hosted in cloud environments such as Google Colab or Binder. For scientific workflows, notebooks can integrate with tools for version control, containerization, and workflow management, making them a flexible instrument for open and reproducible research.\nDespite their strengths, Jupyter Notebooks are not without limitations. Version control can be challenging due to the JSON-based format, and improper use (e.g., out-of-order execution) can compromise reproducibility. Nevertheless, their advantages in accessibility, interactivity, and communication have made them central to modern computational work.",
    "crumbs": [
      "Key concepts",
      "Jupyter"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html",
    "href": "pages/jupyterlab.html",
    "title": "Jupyterlab",
    "section": "",
    "text": "Introduction to JupyterLab\nJupyterLab is the next-generation web-based user interface for Project Jupyter, designed to offer a flexible and extensible environment for interactive computing. It builds upon the classic Jupyter Notebook interface by integrating a wide range of tools—code consoles, terminals, text editors, data file viewers, and notebooks—into a unified workspace.\nThe JupyterLab interface is organized into a multi-tab layout, resembling an integrated development environment (IDE). Users can open multiple documents side by side (e.g., a Python script next to a Markdown file and a terminal), drag-and-drop tabs, and link interactive views of the same dataset. It supports live code execution, output rendering (including plots and LaTeX equations), and seamless integration with kernels for many languages, though Python is most common.\nKey features of JupyterLab include:\nNotebook authoring: Full support for .ipynb notebooks with executable code cells, Markdown, and rich outputs. Code consoles: Interactive REPLs connected to notebooks or scripts for testing code snippets. Text and code editing: Built-in editor with syntax highlighting, version control integration, and support for many file types. Terminal access: Direct command-line interface within the browser for shell-level operations. Extensibility: Modular architecture that supports plugins for additional language kernels, visualizations, or custom workflows. JupyterLab preserves all the functionality of the classic notebook interface while offering a more powerful and customizable platform suitable for complex data science workflows, scientific research, and reproducible computing. It is widely used in academia, industry, and education due to its interactive nature and support for literate programming principles.\nJupyterLab is a highly extensible, feature-rich notebook authoring application and editing environment, and is a part of Project Jupyter, a large umbrella project centered around the goal of providing tools (and standards) for interactive computing with computational notebooks.\nA computational notebook is a shareable document that combines computer code, plain language descriptions, data, rich visualizations like 3D models, charts, graphs and figures, and interactive controls. A notebook, along with an editor like JupyterLab, provides a fast interactive environment for prototyping and explaining code, exploring and visualizing data, and sharing ideas with others.\nJupyterLab is a sibling to other notebook authoring applications under the Project Jupyter umbrella, like Jupyter Notebook and Jupyter Desktop. JupyterLab offers a more advanced, feature rich, customizable experience compared to Jupyter Notebook.MM",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#menu-toolbar-context-menu",
    "href": "pages/jupyterlab.html#menu-toolbar-context-menu",
    "title": "Jupyterlab",
    "section": "Menu, Toolbar, Context menu",
    "text": "Menu, Toolbar, Context menu",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#command-palette-commandctrl-shift-c",
    "href": "pages/jupyterlab.html#command-palette-commandctrl-shift-c",
    "title": "Jupyterlab",
    "section": "Command palette: Command/Ctrl Shift C",
    "text": "Command palette: Command/Ctrl Shift C",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "href": "pages/jupyterlab.html#keyboard-short-cuts-commandctrl-shift-h",
    "title": "Jupyterlab",
    "section": "Keyboard short-cuts: Command/Ctrl Shift H",
    "text": "Keyboard short-cuts: Command/Ctrl Shift H",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#code-blocks",
    "href": "pages/jupyterlab.html#code-blocks",
    "title": "Jupyterlab",
    "section": "Code blocks",
    "text": "Code blocks\n\nx = 0",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#last-value-is-displayed",
    "href": "pages/jupyterlab.html#last-value-is-displayed",
    "title": "Jupyterlab",
    "section": "Last value is displayed",
    "text": "Last value is displayed\n\nx = 1\nx\n\n1",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#everything-is-one-python-process",
    "href": "pages/jupyterlab.html#everything-is-one-python-process",
    "title": "Jupyterlab",
    "section": "Everything is one Python process",
    "text": "Everything is one Python process\n\nx += 1\nx\n\n2",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#restarting-the-kernel",
    "href": "pages/jupyterlab.html#restarting-the-kernel",
    "title": "Jupyterlab",
    "section": "Restarting the kernel",
    "text": "Restarting the kernel",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#lists",
    "href": "pages/jupyterlab.html#lists",
    "title": "Jupyterlab",
    "section": "Lists",
    "text": "Lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#numbered-lists",
    "href": "pages/jupyterlab.html#numbered-lists",
    "title": "Jupyterlab",
    "section": "Numbered lists",
    "text": "Numbered lists\n\nfoo\nbar\nbaz",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#quotes",
    "href": "pages/jupyterlab.html#quotes",
    "title": "Jupyterlab",
    "section": "Quotes",
    "text": "Quotes\n\nThis is a quote",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#formulas",
    "href": "pages/jupyterlab.html#formulas",
    "title": "Jupyterlab",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)\n\nHTML",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#header-2",
    "href": "pages/jupyterlab.html#header-2",
    "title": "Jupyterlab",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nHeader 4",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#formulas-1",
    "href": "pages/jupyterlab.html#formulas-1",
    "title": "Jupyterlab",
    "section": "Formulas",
    "text": "Formulas\n\\(\\sum_{i=0}^n i\\)",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/jupyterlab.html#tables",
    "href": "pages/jupyterlab.html#tables",
    "title": "Jupyterlab",
    "section": "Tables",
    "text": "Tables\n\n\n\nName\nValue\n\n\n\n\nfoo\n2\n\n\nbar\n3",
    "crumbs": [
      "Tutorials",
      "Jupyterlab"
    ]
  },
  {
    "objectID": "pages/git.html",
    "href": "pages/git.html",
    "title": "Git",
    "section": "",
    "text": "This pages are under construction",
    "crumbs": [
      "Key concepts",
      "Git"
    ]
  },
  {
    "objectID": "pages/git.html#tldr",
    "href": "pages/git.html#tldr",
    "title": "Git",
    "section": "TLDR;",
    "text": "TLDR;\nGit is a distributed version control system designed to track changes in source code and facilitate collaboration among multiple developers. Originally created by Linus Torvalds in 2005 for managing the Linux kernel, Git has since become the dominant version control tool in software development, underpinning platforms such as GitHub, GitLab, and Bitbucket.\nIn Git, every working copy of a repository is a full-fledged versioned archive, containing the entire history of the project. This distributed model enhances performance, enables offline work, and provides a robust foundation for branching and merging workflows. Changes are recorded as commits—snapshots of the project at specific points in time—organized in a directed acyclic graph (DAG).\nKey concepts include:\nRepository: A data structure containing all commits, branches, and tags for a project. Commit: A recorded state of the repository, with metadata about the author, timestamp, and parent commits. Branch: A movable pointer to a commit, enabling parallel development paths. Merge: The integration of changes from one branch into another, optionally involving conflict resolution. Remote: A reference to another copy of the repository, typically hosted on a server. Git supports advanced features such as rebasing, cherry-picking, and interactive staging. It also allows for fine-grained control of collaboration through pull requests, code reviews, and access control mechanisms.\nWhile Git has a steep learning curve, especially in conflict resolution and complex branching workflows, its efficiency, reliability, and flexibility make it an indispensable tool in modern software engineering and research computing.",
    "crumbs": [
      "Key concepts",
      "Git"
    ]
  },
  {
    "objectID": "pages/git.html#git-as-journaled-backup",
    "href": "pages/git.html#git-as-journaled-backup",
    "title": "Git",
    "section": "Git as journaled backup",
    "text": "Git as journaled backup\nWhen you are in your &lt;repositoryname&gt; folder, you can run git commands to manage your files, record their changes and sync them to the repository on GitHub for safe keeping. These tutorials are good introductions to git.\nTo journal the creation or modification of a file, you need to add it to git:\n\n\nTerminal\n\ngit add &lt;the_changed_file&gt;\n\nThis “stages” the change. This adds the file to the a “group” of changes that represent some modification to your project. You can add more files to that “group” by running the command again with other files. If you run git status you can see that the files are now staged.\nSo maybe you added or changed two python files addressing some parcitular problem or advancing some part of your project. Now you want to store those of changes to the journal maintained by Git and associate it with a short message describing the changes. For that you use:\n\n\nTerminal\n\ngit commit -m '&lt;message&gt;'\n\nIf you added two python files, your description could be 'Added two python files for my analysis'. If you fixed a bug or added new code to the files, your message should reflect that.\nNow your changes are recorded in the version of the &lt;repositoryname&gt; on the cluster, but that does not serve as a backup in case you accidentally delete your entire folder or the cluster burns down. To backup your repository you need to synchronize your local &lt;repositoryname&gt; repository on the cluster with the &lt;repositoryname&gt; repository on GitHub. To du that use:\n\n\nTerminal\n\ngit push\n\nIn addition to keeping your precious files safe and backed up, your GitHub repository also serve as a journal documenting of your progress. Each commit is a snapshot if your project that can be retrieved at any time.",
    "crumbs": [
      "Key concepts",
      "Git"
    ]
  },
  {
    "objectID": "pages/git.html#git",
    "href": "pages/git.html#git",
    "title": "Git",
    "section": "Git",
    "text": "Git\nThere is a cheat sheet here and some good visual guides here and here.\nThe three most important commands to learn are: git status, git add, git rm, git mv, git commit and git push.\n\nResolving conflicts\nBlah blah…",
    "crumbs": [
      "Key concepts",
      "Git"
    ]
  },
  {
    "objectID": "pages/editing.html",
    "href": "pages/editing.html",
    "title": "Editing exercises",
    "section": "",
    "text": "This pages are under construction",
    "crumbs": [
      "Educator",
      "Editing exercises"
    ]
  },
  {
    "objectID": "pages/making.html",
    "href": "pages/making.html",
    "title": "Making exercises",
    "section": "",
    "text": "This pages are under construction",
    "crumbs": [
      "Educator",
      "Making exercises"
    ]
  },
  {
    "objectID": "pages/admin_docker.html#running-docker-containers",
    "href": "pages/admin_docker.html#running-docker-containers",
    "title": "Docker admin",
    "section": "Running docker containers",
    "text": "Running docker containers",
    "crumbs": [
      "Administration",
      "Docker admin"
    ]
  },
  {
    "objectID": "notebooks/example.html",
    "href": "notebooks/example.html",
    "title": "Workplace interaction",
    "section": "",
    "text": "Import some plotting libraries and set some defaults:\n\nimport sys\nimport numpy as np\nimport pandas as pd\nfrom IPython.display import display, Markdown\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Some description…\n\n\n\n_run\n\n\n\n\n\n\n\nSome description…\n\n\n\nrun\nRuns a container from an image.\n\n\npull\nPull Docker image.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#jupyter",
    "href": "api/index.html#jupyter",
    "title": "Function reference",
    "section": "",
    "text": "Some description…\n\n\n\n_run",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#docker",
    "href": "api/index.html#docker",
    "title": "Function reference",
    "section": "",
    "text": "Some description…\n\n\n\nrun\nRuns a container from an image.\n\n\npull\nPull Docker image.",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/launch_exercise.html",
    "href": "api/launch_exercise.html",
    "title": "launch_exercise",
    "section": "",
    "text": "launch_exercise\nfranklin.jupyter.launch_exercise()"
  },
  {
    "objectID": "api/pull.html",
    "href": "api/pull.html",
    "title": "pull",
    "section": "",
    "text": "franklin.docker.pull(image_url)\nPull Docker image.\n\n\n\nimage_url : str\n\nImage URL.",
    "crumbs": [
      "Docker",
      "pull"
    ]
  },
  {
    "objectID": "api/pull.html#parameters",
    "href": "api/pull.html#parameters",
    "title": "pull",
    "section": "",
    "text": "image_url : str\n\nImage URL.",
    "crumbs": [
      "Docker",
      "pull"
    ]
  },
  {
    "objectID": "api/run.html",
    "href": "api/run.html",
    "title": "run",
    "section": "",
    "text": "franklin.docker.run(image_url)\nRuns a container from an image.\n\n\n\nimage_url : str\n\nImage URL.\n\n\n\n\n\n\n : Tuple[Popen, str]\n\nTuple of subprocess handle for ‘docker run’ and host port used for jupyter display.",
    "crumbs": [
      "Docker",
      "run"
    ]
  },
  {
    "objectID": "api/run.html#parameters",
    "href": "api/run.html#parameters",
    "title": "run",
    "section": "",
    "text": "image_url : str\n\nImage URL.",
    "crumbs": [
      "Docker",
      "run"
    ]
  },
  {
    "objectID": "api/run.html#returns",
    "href": "api/run.html#returns",
    "title": "run",
    "section": "",
    "text": ": Tuple[Popen, str]\n\nTuple of subprocess handle for ‘docker run’ and host port used for jupyter display.",
    "crumbs": [
      "Docker",
      "run"
    ]
  },
  {
    "objectID": "pages/r_to_python.html",
    "href": "pages/r_to_python.html",
    "title": "R to Python",
    "section": "",
    "text": "Task\npandas (Python)\ntidyverse (R)\n\n\n\n\n1. Select columns\ndf[['col1', 'col2']]\ndf %&gt;% select(col1, col2)\n\n\n2. Filter rows\ndf[df['col'] &gt; 10]\ndf %&gt;% filter(col &gt; 10)\n\n\n3. Create new column\ndf['new'] = df['col1'] + df['col2']\ndf %&gt;% mutate(new = col1 + col2)\n\n\n4. Group by and summarize\ndf.groupby('group').agg({'value': 'mean'})\ndf %&gt;% group_by(group) %&gt;% summarize(mean_val = mean(value))\n\n\n5. Sort rows\ndf.sort_values('col', ascending=False)\ndf %&gt;% arrange(desc(col))\n\n\n6. Drop missing values\ndf.dropna()\ndf %&gt;% drop_na()\n\n\n7. Fill missing values\ndf.fillna(0)\ndf %&gt;% replace_na(list(col = 0))\n\n\n8. Reshape from wide to long\ndf.melt(id_vars='id')\ndf %&gt;% pivot_longer(-id, names_to='key', values_to='value')\n\n\n9. Reshape from long to wide\ndf.pivot(index='id', columns='key', values='value')\ndf %&gt;% pivot_wider(names_from='key', values_from='value')\n\n\n10. Join tables\npd.merge(df1, df2, on='id')\nleft_join(df1, df2, by='id')\n\n\n\nBelow is an expanded list of 20 common data manipulation tasks, comparing syntax in Python using pandas and in R using the tidyverse (primarily dplyr and tidyr).\n\n\n\n\n\n\n\n\nTask\npandas (Python)\ntidyverse (R)\n\n\n\n\n1. Select columns\ndf[['col1', 'col2']]\ndf %&gt;% select(col1, col2)\n\n\n2. Filter rows\ndf[df['col'] &gt; 10]\ndf %&gt;% filter(col &gt; 10)\n\n\n3. Create new column\ndf['new'] = df['col1'] + df['col2']\ndf %&gt;% mutate(new = col1 + col2)\n\n\n4. Group by and summarize\ndf.groupby('group').agg({'val': 'mean'})\ndf %&gt;% group_by(group) %&gt;% summarize(mean_val = mean(val))\n\n\n5. Sort rows\ndf.sort_values('col', ascending=False)\ndf %&gt;% arrange(desc(col))\n\n\n6. Drop missing values\ndf.dropna()\ndf %&gt;% drop_na()\n\n\n7. Fill missing values\ndf.fillna(0)\ndf %&gt;% replace_na(list(col = 0))\n\n\n8. Rename columns\ndf.rename(columns={'old': 'new'})\ndf %&gt;% rename(new = old)\n\n\n9. Reshape wide to long\ndf.melt(id_vars='id')\ndf %&gt;% pivot_longer(-id, names_to='key', values_to='value')\n\n\n10. Reshape long to wide\ndf.pivot(index='id', columns='key', values='value')\ndf %&gt;% pivot_wider(names_from=key, values_from=value)\n\n\n11. Remove columns\ndf.drop(['col1', 'col2'], axis=1)\ndf %&gt;% select(-col1, -col2)\n\n\n12. Sample rows\ndf.sample(n=5)\ndf %&gt;% sample_n(5)\n\n\n13. Count unique values\ndf['col'].nunique()\ndf %&gt;% summarize(n_distinct(col))\n\n\n14. Count frequency of values\ndf['col'].value_counts()\ndf %&gt;% count(col)\n\n\n15. Conditional column creation\ndf['new'] = np.where(df['col'] &gt; 0, 'yes', 'no')\ndf %&gt;% mutate(new = if_else(col &gt; 0, 'yes', 'no'))\n\n\n16. String operations\ndf['col'].str.lower()\ndf %&gt;% mutate(col = str_to_lower(col))\n\n\n17. Filter by multiple conditions\ndf[(df['x'] &gt; 0) & (df['y'] &lt; 10)]\ndf %&gt;% filter(x &gt; 0, y &lt; 10)\n\n\n18. Cumulative sum\ndf['cumsum'] = df['val'].cumsum()\ndf %&gt;% mutate(cumsum = cumsum(val))\n\n\n19. Windowed ranking\ndf['rank'] = df['val'].rank()\ndf %&gt;% mutate(rank = rank(val))\n\n\n20. Left join two tables\npd.merge(df1, df2, on='id', how='left')\ndf1 %&gt;% left_join(df2, by='id')\n\n\n\nGive 20 examples of plots using seaborn and ggplot2\n\n\n\n\n\n\n\n\nPlot Type\nSeaborn (Python)\nggplot2 (R)\n\n\n\n\n1. Scatter plot\nsns.scatterplot(x='x', y='y', data=df)\nggplot(df, aes(x, y)) + geom_point()\n\n\n2. Line plot\nsns.lineplot(x='x', y='y', data=df)\nggplot(df, aes(x, y)) + geom_line()\n\n\n3. Histogram\nsns.histplot(x='x', data=df)\nggplot(df, aes(x)) + geom_histogram()\n\n\n4. KDE plot\nsns.kdeplot(x='x', data=df)\nggplot(df, aes(x)) + geom_density()\n\n\n5. Box plot\nsns.boxplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_boxplot()\n\n\n6. Violin plot\nsns.violinplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_violin()\n\n\n7. Bar plot (categorical)\nsns.barplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_bar(stat='identity')\n\n\n8. Count plot\nsns.countplot(x='category', data=df)\nggplot(df, aes(category)) + geom_bar()\n\n\n9. Heatmap\nsns.heatmap(data=corr_matrix)\nggplot(melt(corr_matrix), aes(Var1, Var2, fill=value)) + geom_tile()\n\n\n10. Pair plot\nsns.pairplot(df)\nGGally::ggpairs(df)\n\n\n11. Swarm plot\nsns.swarmplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_jitter(width=0.1)\n\n\n12. Strip plot\nsns.stripplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_jitter()\n\n\n13. Regression plot\nsns.regplot(x='x', y='y', data=df)\nggplot(df, aes(x, y)) + geom_smooth(method='lm') + geom_point()\n\n\n14. Residual plot\nsns.residplot(x='x', y='y', data=df)\nNot directly available; simulate with augment() from broom\n\n\n15. Facet grid\nsns.FacetGrid(df, col='var').map(sns.histplot, 'x')\nggplot(df, aes(x)) + geom_histogram() + facet_wrap(~var)\n\n\n16. Joint plot\nsns.jointplot(x='x', y='y', data=df)\nggExtra::ggMarginal(p, type='histogram')\n\n\n17. Time series plot\nsns.lineplot(x='date', y='value', data=df)\nggplot(df, aes(date, value)) + geom_line()\n\n\n18. Error bars (CI)\nsns.pointplot(x='x', y='y', data=df, ci='sd')\nggplot(df, aes(x, y)) + stat_summary(fun.data=mean_sdl, geom='pointrange')\n\n\n19. Categorical dot plot\nsns.catplot(x='group', y='value', kind='strip', data=df)\nggplot(df, aes(group, value)) + geom_jitter()\n\n\n20. Multi-plot layout\nsns.catplot(x='x', y='y', col='facet', kind='box', data=df)\nggplot(df, aes(x, y)) + geom_boxplot() + facet_wrap(~facet)\n\n\n\nBelow is a comparative list of 20 common plot types using Python’s Seaborn and R’s ggplot2. Each entry includes the plot type and the canonical syntax in both libraries, assuming a data frame df with appropriate columns.\n\n\n\n\n\n\n\n\nPlot Type\nSeaborn (Python)\nggplot2 (R)\n\n\n\n\n1. Scatter plot\nsns.scatterplot(x='x', y='y', data=df)\nggplot(df, aes(x, y)) + geom_point()\n\n\n2. Line plot\nsns.lineplot(x='x', y='y', data=df)\nggplot(df, aes(x, y)) + geom_line()\n\n\n3. Histogram\nsns.histplot(x='x', data=df)\nggplot(df, aes(x)) + geom_histogram()\n\n\n4. KDE plot\nsns.kdeplot(x='x', data=df)\nggplot(df, aes(x)) + geom_density()\n\n\n5. Box plot\nsns.boxplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_boxplot()\n\n\n6. Violin plot\nsns.violinplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_violin()\n\n\n7. Bar plot (categorical)\nsns.barplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_bar(stat='identity')\n\n\n8. Count plot\nsns.countplot(x='category', data=df)\nggplot(df, aes(category)) + geom_bar()\n\n\n9. Heatmap\nsns.heatmap(data=corr_matrix)\nggplot(melt(corr_matrix), aes(Var1, Var2, fill=value)) + geom_tile()\n\n\n10. Pair plot\nsns.pairplot(df)\nGGally::ggpairs(df)\n\n\n11. Swarm plot\nsns.swarmplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_jitter(width=0.1)\n\n\n12. Strip plot\nsns.stripplot(x='group', y='value', data=df)\nggplot(df, aes(group, value)) + geom_jitter()\n\n\n13. Regression plot\nsns.regplot(x='x', y='y', data=df)\nggplot(df, aes(x, y)) + geom_smooth(method='lm') + geom_point()\n\n\n14. Residual plot\nsns.residplot(x='x', y='y', data=df)\nNot directly available; simulate with augment() from broom\n\n\n15. Facet grid\nsns.FacetGrid(df, col='var').map(sns.histplot, 'x')\nggplot(df, aes(x)) + geom_histogram() + facet_wrap(~var)\n\n\n16. Joint plot\nsns.jointplot(x='x', y='y', data=df)\nggExtra::ggMarginal(p, type='histogram')\n\n\n17. Time series plot\nsns.lineplot(x='date', y='value', data=df)\nggplot(df, aes(date, value)) + geom_line()\n\n\n18. Error bars (CI)\nsns.pointplot(x='x', y='y', data=df, ci='sd')\nggplot(df, aes(x, y)) + stat_summary(fun.data=mean_sdl, geom='pointrange')\n\n\n19. Categorical dot plot\nsns.catplot(x='group', y='value', kind='strip', data=df)\nggplot(df, aes(group, value)) + geom_jitter()\n\n\n20. Multi-plot layout\nsns.catplot(x='x', y='y', col='facet', kind='box', data=df)\nggplot(df, aes(x, y)) + geom_boxplot() + facet_wrap(~facet)\n\n\n\n\nNotes:\n\nsns stands for seaborn.\nIn ggplot2, stat='identity' must be specified when y-values are given (not counts).\nggExtra, GGally, and broom are part of the broader tidyverse ecosystem but may require additional installation.\n\nThis comparison covers common visualization tasks across exploratory data analysis and statistical modeling workflows.\n\nRPython\n\n\nfizz_buzz &lt;- function(fbnums = 1:50) {\n  output &lt;- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n\n\n\n\nRPython\n\n\nfizz_buzz &lt;- function(fbnums = 1:50) {\n  output &lt;- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)",
    "crumbs": [
      "Tutorials",
      "R to Python"
    ]
  },
  {
    "objectID": "pages/overview.html#purpose",
    "href": "pages/overview.html#purpose",
    "title": "Franklin overview",
    "section": "Purpose",
    "text": "Purpose",
    "crumbs": [
      "Overview",
      "Franklin overview"
    ]
  },
  {
    "objectID": "pages/overview.html#git",
    "href": "pages/overview.html#git",
    "title": "Franklin overview",
    "section": "Git",
    "text": "Git",
    "crumbs": [
      "Overview",
      "Franklin overview"
    ]
  },
  {
    "objectID": "pages/overview.html#gitlab",
    "href": "pages/overview.html#gitlab",
    "title": "Franklin overview",
    "section": "GitLab",
    "text": "GitLab\n\nAU hosting\n\n\nGitLab Franklin group\n\n\nGitLab Course subgroups\n\n\nGitLab exercise repositories",
    "crumbs": [
      "Overview",
      "Franklin overview"
    ]
  },
  {
    "objectID": "pages/overview.html#authentication",
    "href": "pages/overview.html#authentication",
    "title": "Franklin overview",
    "section": "Authentication",
    "text": "Authentication\nWeb GUI: UNI-AD login\n\nAdmin\nKasper (and someone else for backup)\nssh keys\n\n\nVIP\nssh keys\n\n\nStudents\nRead-only token distributed with franklin.",
    "crumbs": [
      "Overview",
      "Franklin overview"
    ]
  },
  {
    "objectID": "pages/overview.html#docker",
    "href": "pages/overview.html#docker",
    "title": "Franklin overview",
    "section": "Docker",
    "text": "Docker\n\nImage hierarchy\n\nBase images maintained in the Base\nCourse base images only refer to a versioned base image\n\n\n\nTemplates\n\nEvery course has a repo template with a docker file that that refers to the course base image\nThese templates are forked from franklin/base-templates/base-template\n\n\n\nTag policy\n\nFranklin base images are versioned and must referred to with their version tag\nCourse base images are tagged latest so that courses always pulls updated version.\nExercise images are always tagged latest, which is the tag franklin pulls",
    "crumbs": [
      "Overview",
      "Franklin overview"
    ]
  },
  {
    "objectID": "pages/overview.html#container-registry",
    "href": "pages/overview.html#container-registry",
    "title": "Franklin overview",
    "section": "Container registry",
    "text": "Container registry",
    "crumbs": [
      "Overview",
      "Franklin overview"
    ]
  },
  {
    "objectID": "pages/running.html",
    "href": "pages/running.html",
    "title": "Running exercises",
    "section": "",
    "text": "This pages are under construction"
  },
  {
    "objectID": "pages/admin_gitlab.html#permissions",
    "href": "pages/admin_gitlab.html#permissions",
    "title": "GitLab admin",
    "section": "Permissions",
    "text": "Permissions",
    "crumbs": [
      "Administration",
      "GitLab admin"
    ]
  },
  {
    "objectID": "pages/admin_gitlab.html#tokens",
    "href": "pages/admin_gitlab.html#tokens",
    "title": "GitLab admin",
    "section": "Tokens",
    "text": "Tokens",
    "crumbs": [
      "Administration",
      "GitLab admin"
    ]
  },
  {
    "objectID": "pages/admin_gitlab.html#pipelines",
    "href": "pages/admin_gitlab.html#pipelines",
    "title": "GitLab admin",
    "section": "Pipelines",
    "text": "Pipelines",
    "crumbs": [
      "Administration",
      "GitLab admin"
    ]
  },
  {
    "objectID": "pages/docker.html",
    "href": "pages/docker.html",
    "title": "Docker",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nHow Docker Bridges Operating Systems (Layman’s Explanation)\nImagine you have a piece of software that works perfectly on your computer, but when you give it to someone else, it breaks—maybe because they use a different version of Windows, macOS, or Linux, or they’re missing some necessary software. This is a common problem in software development, and Docker solves it by creating a kind of “portable box” for software.\nHere’s how it works in simple terms:\nDocker puts your software, along with everything it needs to run (like tools, libraries, and settings), into a container. Think of it like packing a suitcase that has exactly what your app needs—no more, no less. This container always behaves the same, no matter where you run it: your laptop, a colleague’s machine, a server in the cloud. That’s because Docker doesn’t rely on the local operating system to provide the right setup—it brings its own setup. Even if your computer runs macOS and someone else uses Linux, the Docker container will still work, because Docker acts like a translator. It uses the host system’s resources (CPU, memory, etc.), but keeps the software environment inside the container separate and consistent. Unlike virtual machines, which need to boot an entire operating system, Docker shares the core parts of the host OS, making containers much faster and lighter. In short: Docker bridges operating systems by wrapping your software in a self-contained box that includes everything it needs to run, and then letting that box run on almost any computer without worrying about differences between systems.\nDocker is an open-source platform that automates the deployment, scaling, and management of applications using containerization. Containers are lightweight, standalone, and executable software packages that include everything needed to run an application—code, runtime, system tools, libraries, and settings. This ensures that software behaves the same regardless of the environment in which it is executed.\nUnlike virtual machines, which replicate entire operating systems, Docker containers share the host OS kernel and isolate applications at the process level. This makes containers more efficient in terms of performance and resource utilization. Docker uses a layered filesystem and image caching to further optimize deployment speed and storage.\nDocker’s core components include:\nDocker Engine: The runtime that builds and runs containers. Docker Images: Immutable templates used to create containers, typically defined via Dockerfile scripts. Docker Containers: Instances of images that are executed with an isolated filesystem and environment. Docker Hub: A public registry for sharing and retrieving Docker images. Docker Compose: A tool for defining and running multi-container applications using YAML configuration. Docker is widely adopted in both development and production environments due to its ability to ensure reproducibility, simplify dependency management, and support scalable microservice architectures. It integrates with orchestration systems like Kubernetes and is a foundational technology in continuous integration and deployment (CI/CD) pipelines.\nDespite its benefits, Docker introduces complexity related to security, networking, and persistent storage, especially in distributed settings. Nonetheless, it remains a key tool for encapsulating environments and streamlining software delivery across heterogeneous computing platforms.",
    "crumbs": [
      "Key concepts",
      "Docker"
    ]
  },
  {
    "objectID": "pages/educator/index.html",
    "href": "pages/educator/index.html",
    "title": "Welcome",
    "section": "",
    "text": "Download the HTML course website for offline viewing at the exam (unzip once downloaded and double-click index.html).\nDownload the HTML Python documentation for offline viewing at the exam (unzip once downloaded and double-click index.html)."
  },
  {
    "objectID": "pages/educator/index.html#course-description",
    "href": "pages/educator/index.html#course-description",
    "title": "Welcome",
    "section": "Course description",
    "text": "Course description\nAfter the course, the participants will have basic knowledge of computer methods and applications for analyzing biological sequence data and insight into principles and techniques for constructing simple programs. Participants will acquire practical experience with analyzing problems in bioinformatics and related fields and implementing programs to solve such problems using the Python programming language.\nThe participants must, at the end of the course, be able to:\n\nApply fundamental constructs of a programming language.\nAnalyse data and construct data structures for the representation of data.\nAnalyse simple computational problems and construct programs for their solution.\nDescribe and relate essential methods in bioinformatics analysis.\nApply bioinformatics software to biological data.\nJudge the reliability of results obtained using Bioinformatics software."
  },
  {
    "objectID": "pages/educator/index.html#course-contents",
    "href": "pages/educator/index.html#course-contents",
    "title": "Welcome",
    "section": "Course contents",
    "text": "Course contents\nThe course introduces programming and its practical applications in bioinformatics. The course also outlines and discusses bioinformatics algorithms, and the most common tools for bioinformatics analysis of sequence data are presented and demo nstrated. The participant will acquire and train basic programming skills during the first seven weeks. The last seven weeks introduce key topics in bioinformatics, focusing on applying bioinformatical software and developing programming skills. Subjects for lectures and exercises include bioinformatics databases, sequence alignment, genome annotation, sequence evolution, and phylogenetic analysis."
  },
  {
    "objectID": "pages/numpy_pandas.html",
    "href": "pages/numpy_pandas.html",
    "title": "Numpy and Pandas",
    "section": "",
    "text": "Fast computation using vectors and matrices\nlist1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\nsummed = []\nfor i in range(len(list1)):\n    summed.append(list1[i] + list2[i])\nsummed\n\n[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#arrays",
    "href": "pages/numpy_pandas.html#arrays",
    "title": "Numpy and Pandas",
    "section": "Arrays",
    "text": "Arrays\n\nimport numpy as np\n\n\na = np.array(list1)\nb = np.array(list2)\na, b\n\n(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#broadcasting",
    "href": "pages/numpy_pandas.html#broadcasting",
    "title": "Numpy and Pandas",
    "section": "Broadcasting",
    "text": "Broadcasting\n\na + b\n\narray([9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\n\n\na * b\n\narray([ 0,  8, 14, 18, 20, 20, 18, 14,  8,  0])\n\n\n\na - 10\n\narray([-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1])\n\n\n\na.sum()\n\n45\n\n\n\na.mean()\n\n4.5",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#multidimentional-arrays",
    "href": "pages/numpy_pandas.html#multidimentional-arrays",
    "title": "Numpy and Pandas",
    "section": "Multidimentional arrays",
    "text": "Multidimentional arrays\n\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist_of_lists\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nlist_of_lists[1][1]\n\n5\n\n\n\nmatrix = np.array(list_of_lists)\nmatrix\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\nmatrix[1][1] # not efficient\n\n5\n\n\n\nmatrix[1, 1] # efficient\n\n5\n\n\n\nmatrix - 10\n\narray([[-9, -8, -7],\n       [-6, -5, -4],\n       [-3, -2, -1]])\n\n\n\nmatrix.sum()\n\n45\n\n\n\nlist_of_lists_of_lists = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\nlist_of_lists_of_lists\n\n[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\n\n\ntensor = np.array(list_of_lists_of_lists)\ntensor\n\narray([[[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]],\n\n       [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]])\n\n\n\ntensor[1, 1, 1]\n\n5",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#dataframe",
    "href": "pages/numpy_pandas.html#dataframe",
    "title": "Numpy and Pandas",
    "section": "DataFrame",
    "text": "DataFrame\n\ndf = pd.DataFrame({'name': ['Mike', 'Mia', 'Jake'], 'weight': [82, 62, 75]})\ndf\n\n\n\n\n\n\n\n\nname\nweight\n\n\n\n\n0\nMike\n82\n\n\n1\nMia\n62\n\n\n2\nJake\n75\n\n\n\n\n\n\n\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n\ndf = pd.DataFrame(dict(name=['Mike', 'Mia', 'Jake'], weight=[82, 62, 75]))\ndf\n\n\n\n\n\n\n\n\nname\nweight\n\n\n\n\n0\nMike\n82\n\n\n1\nMia\n62\n\n\n2\nJake\n75\n\n\n\n\n\n\n\n\nrecords = [('Mike', 82), ('Mia', 62), ('Jake', 75)]\n\ndf = pd.DataFrame().from_records(records, columns=['age', 'weight'])\ndf\n\n\n\n\n\n\n\n\nage\nweight\n\n\n\n\n0\nMike\n82\n\n\n1\nMia\n62\n\n\n2\nJake\n75\n\n\n\n\n\n\n\n\ndf.index\n\nRangeIndex(start=0, stop=3, step=1)\n\n\n\ndf.index.values\n\narray([0, 1, 2])\n\n\n\ndf.columns\n\nIndex(['age', 'weight'], dtype='object')\n\n\n\ndf.dtypes\n\nage       object\nweight     int64\ndtype: object\n\n\nAdd a column to an existing dataframe:\n\ndf['height'] = [182.5, 173.0, 192.5]\ndf\n\n\n\n\n\n\n\n\nage\nweight\nheight\n\n\n\n\n0\nMike\n82\n182.5\n\n\n1\nMia\n62\n173.0\n\n\n2\nJake\n75\n192.5\n\n\n\n\n\n\n\nAdd another, categorical, column:\n\ndf['sex'] = pd.Categorical(['male', 'female', 'male'], categories=['female', 'male'], ordered=True)\ndf\n\n\n\n\n\n\n\n\nage\nweight\nheight\nsex\n\n\n\n\n0\nMike\n82\n182.5\nmale\n\n\n1\nMia\n62\n173.0\nfemale\n\n\n2\nJake\n75\n192.5\nmale\n\n\n\n\n\n\n\n\ndf.dtypes\n\nage         object\nweight       int64\nheight     float64\nsex       category\ndtype: object\n\n\nA Series just wraps an array:\n\ndf.height.to_numpy()\n\narray([182.5, 173. , 192.5])",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#example-penguin-data-set",
    "href": "pages/numpy_pandas.html#example-penguin-data-set",
    "title": "Numpy and Pandas",
    "section": "Example penguin data set",
    "text": "Example penguin data set\n\nimport seaborn as sns\n\npenguins = sns.load_dataset('penguins')\n\n\npenguins\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFemale\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMale\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFemale\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMale\n\n\n\n\n344 rows × 7 columns\n\n\n\n\npenguins.dtypes\n\nspecies               object\nisland                object\nbill_length_mm       float64\nbill_depth_mm        float64\nflipper_length_mm    float64\nbody_mass_g          float64\nsex                   object\ndtype: object\n\n\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\n\n\n\n\n\n\n\n\npenguins.tail()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFemale\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMale\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFemale\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMale",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#series",
    "href": "pages/numpy_pandas.html#series",
    "title": "Numpy and Pandas",
    "section": "Series",
    "text": "Series\n\npenguins['flipper_length_mm']\n\n0      181.0\n1      186.0\n2      195.0\n3        NaN\n4      193.0\n       ...  \n339      NaN\n340    215.0\n341    222.0\n342    212.0\n343    213.0\nName: flipper_length_mm, Length: 344, dtype: float64\n\n\n\npenguins.flipper_length_mm\n\n0      181.0\n1      186.0\n2      195.0\n3        NaN\n4      193.0\n       ...  \n339      NaN\n340    215.0\n341    222.0\n342    212.0\n343    213.0\nName: flipper_length_mm, Length: 344, dtype: float64\n\n\n\ntype(penguins.flipper_length_mm)\n\npandas.core.series.Series",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#broadcasting-1",
    "href": "pages/numpy_pandas.html#broadcasting-1",
    "title": "Numpy and Pandas",
    "section": "Broadcasting",
    "text": "Broadcasting\n\npenguins.bill_depth_mm - 1000\n\n0     -981.3\n1     -982.6\n2     -982.0\n3        NaN\n4     -980.7\n       ...  \n339      NaN\n340   -985.7\n341   -984.3\n342   -985.2\n343   -983.9\nName: bill_depth_mm, Length: 344, dtype: float64\n\n\n\npenguins.bill_depth_mm * penguins.flipper_length_mm\n\n0      3384.7\n1      3236.4\n2      3510.0\n3         NaN\n4      3724.9\n        ...  \n339       NaN\n340    3074.5\n341    3485.4\n342    3137.6\n343    3429.3\nLength: 344, dtype: float64",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#indexing",
    "href": "pages/numpy_pandas.html#indexing",
    "title": "Numpy and Pandas",
    "section": "Indexing",
    "text": "Indexing\n\nGet a cell\n\npenguins.loc[4, 'island']\n\n'Torgersen'\n\n\n\n\nGet a row\n\npenguins.loc[4]\n\nspecies                 Adelie\nisland               Torgersen\nbill_length_mm            36.7\nbill_depth_mm             19.3\nflipper_length_mm        193.0\nbody_mass_g             3450.0\nsex                     Female\nName: 4, dtype: object\n\n\n\n\nGet a column\n\npenguins['bill_depth_mm']\n\n0      18.7\n1      17.4\n2      18.0\n3       NaN\n4      19.3\n       ... \n339     NaN\n340    14.3\n341    15.7\n342    14.8\n343    16.1\nName: bill_depth_mm, Length: 344, dtype: float64\n\n\n\npenguins.bill_depth_mm\n\n0      18.7\n1      17.4\n2      18.0\n3       NaN\n4      19.3\n       ... \n339     NaN\n340    14.3\n341    15.7\n342    14.8\n343    16.1\nName: bill_depth_mm, Length: 344, dtype: float64\n\n\n\n\nGet a range of rows and multiple columns\n\npenguins.loc[40:45, ['island', 'body_mass_g']]\n\n\n\n\n\n\n\n\nisland\nbody_mass_g\n\n\n\n\n40\nDream\n3150.0\n\n\n41\nDream\n3900.0\n\n\n42\nDream\n3100.0\n\n\n43\nDream\n4400.0\n\n\n44\nDream\n3000.0\n\n\n45\nDream\n4600.0\n\n\n\n\n\n\n\n\n\nUse boolean series as index to subset data\n\nidx = penguins.bill_length_mm &gt; 55\nidx\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n339    False\n340    False\n341    False\n342    False\n343    False\nName: bill_length_mm, Length: 344, dtype: bool\n\n\n\npenguins.loc[idx]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n169\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nFemale\n\n\n215\nChinstrap\nDream\n55.8\n19.8\n207.0\n4000.0\nMale\n\n\n253\nGentoo\nBiscoe\n59.6\n17.0\n230.0\n6050.0\nMale\n\n\n321\nGentoo\nBiscoe\n55.9\n17.0\n228.0\n5600.0\nMale\n\n\n335\nGentoo\nBiscoe\n55.1\n16.0\n230.0\n5850.0\nMale\n\n\n\n\n\n\n\n\npenguins.loc[(penguins.bill_length_mm &gt; 55) & (penguins.sex == 'Female')]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n169\nChinstrap\nDream\n58.0\n17.8\n181.0\n3700.0\nFemale\n\n\n\n\n\n\n\n\n\nSetting and resetting the index\n\npenguins\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMale\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFemale\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFemale\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFemale\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFemale\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMale\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFemale\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMale\n\n\n\n\n344 rows × 7 columns\n\n\n\n\ndf = penguins.set_index(['species', 'sex', 'island'])\ndf.head(10)\n\n\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\nspecies\nsex\nisland\n\n\n\n\n\n\n\n\nAdelie\nMale\nTorgersen\n39.1\n18.7\n181.0\n3750.0\n\n\nFemale\nTorgersen\n39.5\n17.4\n186.0\n3800.0\n\n\nTorgersen\n40.3\n18.0\n195.0\n3250.0\n\n\nNaN\nTorgersen\nNaN\nNaN\nNaN\nNaN\n\n\nFemale\nTorgersen\n36.7\n19.3\n193.0\n3450.0\n\n\nMale\nTorgersen\n39.3\n20.6\n190.0\n3650.0\n\n\nFemale\nTorgersen\n38.9\n17.8\n181.0\n3625.0\n\n\nMale\nTorgersen\n39.2\n19.6\n195.0\n4675.0\n\n\nNaN\nTorgersen\n34.1\n18.1\n193.0\n3475.0\n\n\nTorgersen\n42.0\n20.2\n190.0\n4250.0\n\n\n\n\n\n\n\n\ndf.reset_index()\n\n\n\n\n\n\n\n\nspecies\nsex\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\n0\nAdelie\nMale\nTorgersen\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie\nFemale\nTorgersen\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie\nFemale\nTorgersen\n40.3\n18.0\n195.0\n3250.0\n\n\n3\nAdelie\nNaN\nTorgersen\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nFemale\nTorgersen\n36.7\n19.3\n193.0\n3450.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nGentoo\nNaN\nBiscoe\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nFemale\nBiscoe\n46.8\n14.3\n215.0\n4850.0\n\n\n341\nGentoo\nMale\nBiscoe\n50.4\n15.7\n222.0\n5750.0\n\n\n342\nGentoo\nFemale\nBiscoe\n45.2\n14.8\n212.0\n5200.0\n\n\n343\nGentoo\nMale\nBiscoe\n49.9\n16.1\n213.0\n5400.0\n\n\n\n\n344 rows × 7 columns",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#sorting-rows",
    "href": "pages/numpy_pandas.html#sorting-rows",
    "title": "Numpy and Pandas",
    "section": "Sorting rows",
    "text": "Sorting rows\n\nsorted_df = penguins.sort_values(by=\"bill_length_mm\")\nsorted_df.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n142\nAdelie\nDream\n32.1\n15.5\n188.0\n3050.0\nFemale\n\n\n98\nAdelie\nDream\n33.1\n16.1\n178.0\n2900.0\nFemale\n\n\n70\nAdelie\nTorgersen\n33.5\n19.0\n190.0\n3600.0\nFemale\n\n\n92\nAdelie\nDream\n34.0\n17.1\n185.0\n3400.0\nFemale\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n\n\n\n\n\n\n\n\nsorted_df.index.values\n\narray([142,  98,  70,  92,   8,  18,  54,  80,  14, 100,  52,  83, 124,\n        25,  66,  74, 136,  60,  90, 118,  68,  22,  42,  48, 150, 148,\n        78,  94, 120,  86,  34,  64,  58,  40,  15, 147,   4,  82, 132,\n        87,  44, 138,  77,  31, 144, 117,  84,  47, 133,  62,  38,  59,\n        21, 121, 102, 103,  10,  20,  11, 149, 104,  28,  96, 108, 134,\n       110, 107,  23,  88, 130,  13, 106, 116,  16,  24, 126,  36,  89,\n         6, 128, 145,  56,   0,  35, 146,   7,   5,  30,   1,  32, 114,\n        45,  50,  72,  93, 112, 105, 139,  71,  39,  51, 137, 140, 122,\n        97,   2,  27,  29, 125, 141,  26,  57, 143,  95,  41, 230, 182,\n        33,  76, 101, 135, 119,  46,  63,  91,  67,  12,  61,  85, 123,\n        55, 127, 151,  65, 326,  69, 236,  53,   9,  79, 113,  37,  49,\n       172, 184, 206,  17, 256, 115, 260,  75, 251,  81, 244, 131, 278,\n       109, 174,  99, 228, 328, 306, 216, 332, 288, 265, 276, 258, 129,\n        43, 257, 246, 336, 314, 268, 304, 275, 241, 252, 272, 208, 298,\n       299, 269, 342, 157, 280, 262, 226, 155, 232, 277, 195, 312, 266,\n       111, 211, 214, 204, 282,  73, 284, 234, 166, 160,  19, 158, 245,\n       220, 286, 238, 334, 281, 193, 243, 170, 180, 291, 294, 293, 225,\n       274, 152, 242, 162, 270, 227, 176, 325, 229, 340, 213, 317, 190,\n       164, 338, 322, 324, 250, 302, 310, 296, 187, 308, 188, 224, 290,\n       247, 329, 202, 248, 292, 318, 233, 255, 271, 173, 320, 295, 259,\n       239, 222, 337, 192, 199, 231, 300, 323, 254, 171, 237, 235, 209,\n       316, 313, 179, 287, 263, 261, 217, 186, 331, 201, 285, 343, 303,\n       153, 221, 223, 249, 198, 273, 210, 219, 240, 168, 279, 341, 267,\n       330, 167, 178, 264, 175, 289, 205, 305, 218, 197, 315, 196, 194,\n       185, 297, 319, 154, 159, 161, 307, 203, 333, 200, 163, 212, 165,\n       177, 189, 309, 207, 311, 301, 156, 181, 327, 191, 183, 283, 335,\n       215, 321, 169, 253,   3, 339])\n\n\nClick to the left of an output cell to enable/disable scrolling of the output (usefull for large amounts of output).\n\nsorted_df.loc[0]\n\nspecies                 Adelie\nisland               Torgersen\nbill_length_mm            39.1\nbill_depth_mm             18.7\nflipper_length_mm        181.0\nbody_mass_g             3750.0\nsex                       Male\nName: 0, dtype: object\n\n\n\nsorted_df.flipper_length_mm[0]\n\n181.0\n\n\n\nsorted_df.iloc[0] # iloc !!!\n\nspecies              Adelie\nisland                Dream\nbill_length_mm         32.1\nbill_depth_mm          15.5\nflipper_length_mm     188.0\nbody_mass_g          3050.0\nsex                  Female\nName: 142, dtype: object\n\n\n\nsorted_df.flipper_length_mm.iloc[0]\n\n188.0",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#summary-stats",
    "href": "pages/numpy_pandas.html#summary-stats",
    "title": "Numpy and Pandas",
    "section": "Summary stats",
    "text": "Summary stats\n\npenguins.describe()\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\ncount\n342.000000\n342.000000\n342.000000\n342.000000\n\n\nmean\n43.921930\n17.151170\n200.915205\n4201.754386\n\n\nstd\n5.459584\n1.974793\n14.061714\n801.954536\n\n\nmin\n32.100000\n13.100000\n172.000000\n2700.000000\n\n\n25%\n39.225000\n15.600000\n190.000000\n3550.000000\n\n\n50%\n44.450000\n17.300000\n197.000000\n4050.000000\n\n\n75%\n48.500000\n18.700000\n213.000000\n4750.000000\n\n\nmax\n59.600000\n21.500000\n231.000000\n6300.000000\n\n\n\n\n\n\n\n\npenguins.bill_length_mm.mean()\n\n43.9219298245614\n\n\n\npenguins.bill_length_mm.count()\n\n342",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/numpy_pandas.html#grouping",
    "href": "pages/numpy_pandas.html#grouping",
    "title": "Numpy and Pandas",
    "section": "Grouping",
    "text": "Grouping\n\npenguins.groupby('island')\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x15cc9e5e0&gt;\n\n\n\nAggregate\nAggregating produces a single value for each variable in each group:\nMeans for all numeric variables for each island:\n\npenguins.groupby('island').aggregate(\"mean\", numeric_only=True)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\nisland\n\n\n\n\n\n\n\n\nBiscoe\n45.257485\n15.874850\n209.706587\n4716.017964\n\n\nDream\n44.167742\n18.344355\n193.072581\n3712.903226\n\n\nTorgersen\n38.950980\n18.429412\n191.196078\n3706.372549\n\n\n\n\n\n\n\n\npenguins.groupby('island').mean(numeric_only=True)\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\nisland\n\n\n\n\n\n\n\n\nBiscoe\n45.257485\n15.874850\n209.706587\n4716.017964\n\n\nDream\n44.167742\n18.344355\n193.072581\n3712.903226\n\n\nTorgersen\n38.950980\n18.429412\n191.196078\n3706.372549\n\n\n\n\n\n\n\nMeans for bill_length_mm and flipper_length_mm:\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].mean()\n\n\n\n\n\n\n\n\nbill_length_mm\nflipper_length_mm\n\n\nisland\n\n\n\n\n\n\nBiscoe\n45.257485\n209.706587\n\n\nDream\n44.167742\n193.072581\n\n\nTorgersen\n38.950980\n191.196078\n\n\n\n\n\n\n\nJust for flipper_length_mm:\n\npenguins.groupby('island').flipper_length_mm.mean()\n\nisland\nBiscoe       209.706587\nDream        193.072581\nTorgersen    191.196078\nName: flipper_length_mm, dtype: float64\n\n\n\n\nTransform\nTransforming produces new colums with the same length as the input:\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].transform(\"mean\")\n\n\n\n\n\n\n\n\nbill_length_mm\nflipper_length_mm\n\n\n\n\n0\n38.950980\n191.196078\n\n\n1\n38.950980\n191.196078\n\n\n2\n38.950980\n191.196078\n\n\n3\n38.950980\n191.196078\n\n\n4\n38.950980\n191.196078\n\n\n...\n...\n...\n\n\n339\n45.257485\n209.706587\n\n\n340\n45.257485\n209.706587\n\n\n341\n45.257485\n209.706587\n\n\n342\n45.257485\n209.706587\n\n\n343\n45.257485\n209.706587\n\n\n\n\n344 rows × 2 columns\n\n\n\n\ndef z_value(sr):\n    return (sr - sr.mean()) / sr.std()\n\npenguins.groupby('island')[['bill_length_mm', 'flipper_length_mm']].transform(z_value)\n\n\n\n\n\n\n\n\nbill_length_mm\nflipper_length_mm\n\n\n\n\n0\n0.049258\n-1.636022\n\n\n1\n0.181475\n-0.833742\n\n\n2\n0.445910\n0.610362\n\n\n3\nNaN\nNaN\n\n\n4\n-0.744048\n0.289450\n\n\n...\n...\n...\n\n\n339\nNaN\nNaN\n\n\n340\n0.323193\n0.374297\n\n\n341\n1.077478\n0.869267\n\n\n342\n-0.012044\n0.162167\n\n\n343\n0.972717\n0.232877\n\n\n\n\n344 rows × 2 columns\n\n\n\n\n\nApply\nFlexible method allowing any operation on grouped data.\nReturn a single value:\n\ndef fun(df):\n    return df.bill_length_mm + df.flipper_length_mm.mean() / df.body_mass_g\n\npenguins.groupby('island').apply(fun)#.to_frame('my_stat')\n\nisland        \nBiscoe     20     37.861678\n           21     37.758252\n           22     35.955186\n           23     38.253090\n           24     38.855186\n                    ...    \nTorgersen  127    41.544464\n           128    39.062687\n           129    44.147799\n           130    38.557503\n           131    43.154627\nLength: 344, dtype: float64\n\n\nReturn a dataframe:\n\ndef fun(df):\n    return pd.DataFrame({'sqrt_bill': np.sqrt(df.bill_length_mm),\n                         'bill_squared': df.bill_length_mm**2})\n\npenguins.groupby('island').apply(fun)\n\n\n\n\n\n\n\n\n\nsqrt_bill\nbill_squared\n\n\nisland\n\n\n\n\n\n\n\nBiscoe\n20\n6.148170\n1428.84\n\n\n21\n6.140033\n1421.29\n\n\n22\n5.991661\n1288.81\n\n\n23\n6.180615\n1459.24\n\n\n24\n6.228965\n1505.44\n\n\n...\n...\n...\n...\n\n\nTorgersen\n127\n6.442049\n1722.25\n\n\n128\n6.244998\n1521.00\n\n\n129\n6.640783\n1944.81\n\n\n130\n6.204837\n1482.25\n\n\n131\n6.565059\n1857.61\n\n\n\n\n344 rows × 2 columns",
    "crumbs": [
      "Tutorials",
      "Numpy and Pandas"
    ]
  },
  {
    "objectID": "pages/getting_started.html",
    "href": "pages/getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "These pages are under construction\nfranklin lets you …\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#installation",
    "href": "pages/getting_started.html#installation",
    "title": "Getting started",
    "section": "Installation",
    "text": "Installation\nconda install munch-group::franklin",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#install-python",
    "href": "pages/getting_started.html#install-python",
    "title": "Getting started",
    "section": "Install Python",
    "text": "Install Python\n\n\n\n\n\n\nInstall miniforge not miniconda",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#basic-use",
    "href": "pages/getting_started.html#basic-use",
    "title": "Getting started",
    "section": "Basic use",
    "text": "Basic use\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#including-bibtex-references",
    "href": "pages/getting_started.html#including-bibtex-references",
    "title": "Getting started",
    "section": "Including BibTex references",
    "text": "Including BibTex references\nThere are many ways to manage BibTex references. In ReadCube Papers, you just right-click to select Copy...&gt;BibTex entry and paste it into your BibTex file (I also have a script that formats your entire Papers library for BibTex with meaningful labels).\nYou can render citations in different ways to accommodate their sentence. Skov et al. reported strong selection on the human X chromosome [-@Skov2023]. Lineages in small populations have shorter coalescence times [see @NielsenSlatkin2016, chap. 1]. The Neanderthal genome has been sequenced [@Prufer2012]. The X chromosome is subject to recurrent sweeps [@Nam2015; @Dutheil2015]. Following @Munch2014, we blah blah…",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#images",
    "href": "pages/getting_started.html#images",
    "title": "Getting started",
    "section": "images",
    "text": "images\nYou can see an elephant in Figure 1.\n\n\n\n\n\n\nFigure 1: Some caption for an illustration showing an elephant\n\n\n\nElephants are big (Figure 2):\n\n\n\n\n\n\nFigure 2\n\n\n\nThere are two elephants in Figure 3. The elephants in Figure 3 (a) and Figure 3 (b) look similar.\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFigure 3: Some caption you wrote for an illustration of two elephants.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#footnotes",
    "href": "pages/getting_started.html#footnotes",
    "title": "Getting started",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nElephants have long trunks and big ears if they are African. The one on the picture is Indian.↩︎",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#asides",
    "href": "pages/getting_started.html#asides",
    "title": "Getting started",
    "section": "Asides",
    "text": "Asides\nIf you like, you can make comments in the margin without footnote a reference.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#diagrams",
    "href": "pages/getting_started.html#diagrams",
    "title": "Getting started",
    "section": "Diagrams",
    "text": "Diagrams\nDiagram in Figure 4.\n\n\n\n\ngraph G {\n  layout=neato\n  run -- intr;\n  intr -- runbl;\n  runbl -- run;\n  run -- kernel;\n  kernel -- zombie;\n  kernel -- sleep;\n  kernel -- runmem;\n  sleep -- swap;\n  swap -- runswap;\n  runswap -- new;\n  runswap -- runmem;\n  new -- runmem;\n  sleep -- runmem;\n}\n\n\n\n\n\n\n\nG\n\n\n\nrun\n\nrun\n\n\n\nintr\n\nintr\n\n\n\nrun--intr\n\n\n\n\nkernel\n\nkernel\n\n\n\nrun--kernel\n\n\n\n\nrunbl\n\nrunbl\n\n\n\nintr--runbl\n\n\n\n\nrunbl--run\n\n\n\n\nzombie\n\nzombie\n\n\n\nkernel--zombie\n\n\n\n\nsleep\n\nsleep\n\n\n\nkernel--sleep\n\n\n\n\nrunmem\n\nrunmem\n\n\n\nkernel--runmem\n\n\n\n\nsleep--runmem\n\n\n\n\nswap\n\nswap\n\n\n\nsleep--swap\n\n\n\n\nrunswap\n\nrunswap\n\n\n\nswap--runswap\n\n\n\n\nrunswap--runmem\n\n\n\n\nnew\n\nnew\n\n\n\nrunswap--new\n\n\n\n\nnew--runmem\n\n\n\n\n\n\n\n(a) This is a simple graphviz graph.\n\n\n\n\n\n\n\nFigure 4\n\n\n\n\nflowchart LR\n  A[Beginning] --&gt; B[Middle]\n  B --&gt; C[End]\n\n\n\n\nflowchart LR\n  A[Beginning] --&gt; B[Middle]\n  B --&gt; C[End]",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#margin-content",
    "href": "pages/getting_started.html#margin-content",
    "title": "Getting started",
    "section": "Margin content",
    "text": "Margin content\n\n\n\nflowchart LR\n  A[Beginning] --&gt; B[Middle]\n  B --&gt; C[End]\n\n\n\n\nflowchart LR\n  A[Beginning] --&gt; B[Middle]\n  B --&gt; C[End]\n\n\n\n\n\n\nThis is a flow chart.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#code",
    "href": "pages/getting_started.html#code",
    "title": "Getting started",
    "section": "Code",
    "text": "Code\nExecuted but hide code and any output:\nShow and execute Python code:\n\nx = 5\n\nValues can be embedded in the text, too. The value of x is 5.\nShown, not executed, Python code:\ny = 4\n\n\nA for loop:\nfor i in range(10):\n    print(i)\nShown, not executed, R code:\nz &lt;- 7",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#math",
    "href": "pages/getting_started.html#math",
    "title": "Getting started",
    "section": "Math",
    "text": "Math\nThis is calculated as \\(\\pi_k = \\prod_{i=1}^K x_i\\). You can crossref formulas (Equation 1).\n\\[\n\\lambda = \\sum_{k=1}^N \\pi_k\n\\tag{1}\\]\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#bold-and-italics",
    "href": "pages/getting_started.html#bold-and-italics",
    "title": "Getting started",
    "section": "Bold and italics",
    "text": "Bold and italics\nThis is bold, so is this. This is italics, so is this. This is both, so is this.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/getting_started.html#section",
    "href": "pages/getting_started.html#section",
    "title": "Getting started",
    "section": "Section",
    "text": "Section\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n\nSubsection\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n\n\nSubsubsection\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sagittis posuere ligula sit amet lacinia. Duis dignissim pellentesque magna, rhoncus congue sapien finibus mollis. Ut eu sem laoreet, vehicula ipsum in, convallis erat. Vestibulum magna sem, blandit pulvinar augue sit amet, auctor malesuada sapien. Nullam faucibus leo eget eros hendrerit, non laoreet ipsum lacinia. Curabitur cursus diam elit, non tempus ante volutpat a. Quisque hendrerit blandit purus non fringilla. Integer sit amet elit viverra ante dapibus semper. Vestibulum viverra rutrum enim, at luctus enim posuere eu. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
    "crumbs": [
      "Getting started"
    ]
  },
  {
    "objectID": "pages/student/docker.html",
    "href": "pages/student/docker.html",
    "title": "Docker",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nHow Docker Bridges Operating Systems (Layman’s Explanation)\nImagine you have a piece of software that works perfectly on your computer, but when you give it to someone else, it breaks—maybe because they use a different version of Windows, macOS, or Linux, or they’re missing some necessary software. This is a common problem in software development, and Docker solves it by creating a kind of “portable box” for software.\nHere’s how it works in simple terms:\nDocker puts your software, along with everything it needs to run (like tools, libraries, and settings), into a container. Think of it like packing a suitcase that has exactly what your app needs—no more, no less. This container always behaves the same, no matter where you run it: your laptop, a colleague’s machine, a server in the cloud. That’s because Docker doesn’t rely on the local operating system to provide the right setup—it brings its own setup. Even if your computer runs macOS and someone else uses Linux, the Docker container will still work, because Docker acts like a translator. It uses the host system’s resources (CPU, memory, etc.), but keeps the software environment inside the container separate and consistent. Unlike virtual machines, which need to boot an entire operating system, Docker shares the core parts of the host OS, making containers much faster and lighter. In short: Docker bridges operating systems by wrapping your software in a self-contained box that includes everything it needs to run, and then letting that box run on almost any computer without worrying about differences between systems.\nDocker is an open-source platform that automates the deployment, scaling, and management of applications using containerization. Containers are lightweight, standalone, and executable software packages that include everything needed to run an application—code, runtime, system tools, libraries, and settings. This ensures that software behaves the same regardless of the environment in which it is executed.\nUnlike virtual machines, which replicate entire operating systems, Docker containers share the host OS kernel and isolate applications at the process level. This makes containers more efficient in terms of performance and resource utilization. Docker uses a layered filesystem and image caching to further optimize deployment speed and storage.\nDocker’s core components include:\nDocker Engine: The runtime that builds and runs containers. Docker Images: Immutable templates used to create containers, typically defined via Dockerfile scripts. Docker Containers: Instances of images that are executed with an isolated filesystem and environment. Docker Hub: A public registry for sharing and retrieving Docker images. Docker Compose: A tool for defining and running multi-container applications using YAML configuration. Docker is widely adopted in both development and production environments due to its ability to ensure reproducibility, simplify dependency management, and support scalable microservice architectures. It integrates with orchestration systems like Kubernetes and is a foundational technology in continuous integration and deployment (CI/CD) pipelines.\nDespite its benefits, Docker introduces complexity related to security, networking, and persistent storage, especially in distributed settings. Nonetheless, it remains a key tool for encapsulating environments and streamlining software delivery across heterogeneous computing platforms."
  },
  {
    "objectID": "pages/student/index.html",
    "href": "pages/student/index.html",
    "title": "Welcome",
    "section": "",
    "text": "Download the HTML course website for offline viewing at the exam (unzip once downloaded and double-click index.html).\nDownload the HTML Python documentation for offline viewing at the exam (unzip once downloaded and double-click index.html)."
  },
  {
    "objectID": "pages/student/index.html#course-description",
    "href": "pages/student/index.html#course-description",
    "title": "Welcome",
    "section": "Course description",
    "text": "Course description\nAfter the course, the participants will have basic knowledge of computer methods and applications for analyzing biological sequence data and insight into principles and techniques for constructing simple programs. Participants will acquire practical experience with analyzing problems in bioinformatics and related fields and implementing programs to solve such problems using the Python programming language.\nThe participants must, at the end of the course, be able to:\n\nApply fundamental constructs of a programming language.\nAnalyse data and construct data structures for the representation of data.\nAnalyse simple computational problems and construct programs for their solution.\nDescribe and relate essential methods in bioinformatics analysis.\nApply bioinformatics software to biological data.\nJudge the reliability of results obtained using Bioinformatics software."
  },
  {
    "objectID": "pages/student/index.html#course-contents",
    "href": "pages/student/index.html#course-contents",
    "title": "Welcome",
    "section": "Course contents",
    "text": "Course contents\nThe course introduces programming and its practical applications in bioinformatics. The course also outlines and discusses bioinformatics algorithms, and the most common tools for bioinformatics analysis of sequence data are presented and demo nstrated. The participant will acquire and train basic programming skills during the first seven weeks. The last seven weeks introduce key topics in bioinformatics, focusing on applying bioinformatical software and developing programming skills. Subjects for lectures and exercises include bioinformatics databases, sequence alignment, genome annotation, sequence evolution, and phylogenetic analysis."
  },
  {
    "objectID": "pages/student/terminal.html",
    "href": "pages/student/terminal.html",
    "title": "The terminal",
    "section": "",
    "text": "This pages are under construction\n\n\n\n\n\n\nA terminal is a text-based interface that allows users to interact with the operating system by typing commands. It provides direct access to the system shell—a program that interprets user input and executes corresponding instructions.\nHistorically, “terminals” referred to physical devices (e.g., teletypewriters or CRT monitors) connected to mainframe computers. In modern computing, a terminal is typically a software application (e.g., Terminal on macOS, GNOME Terminal on Linux, Command Prompt or PowerShell on Windows) that emulates this interface.\nKey characteristics of a terminal include:\nCommand-Line Interface (CLI): Unlike graphical user interfaces (GUIs), a terminal requires textual input and returns textual output. Shell Access: The terminal runs a shell such as bash, zsh, or fish, which interprets and executes user commands (e.g., file manipulation, process control, networking). Script Execution: Users can run scripts, automate tasks, and chain commands using control operators (e.g., &&, |, &gt;, etc.). Remote Access: Terminals can be used to log into remote systems via protocols such as SSH, providing a low-overhead method for remote system administration and programming. The terminal is a powerful tool, particularly in software development, system administration, and high-performance computing. It enables reproducibility, fine-grained control, and automation, though it requires users to become familiar with a command language and often lacks the immediate feedback and discoverability of graphical interfaces."
  },
  {
    "objectID": "pages/using.html",
    "href": "pages/using.html",
    "title": "Using Franklin",
    "section": "",
    "text": "This pages are under construction",
    "crumbs": [
      "Overview",
      "Using Franklin"
    ]
  },
  {
    "objectID": "pages/developing_exercises.html",
    "href": "pages/developing_exercises.html",
    "title": "Developing exercises",
    "section": "",
    "text": "conda create -n franklin -c conda-forge munch-group::franklin\nconda activate franklin\n\nfranklin exercise down\ncd &lt;repo&gt;\nfranklin jupyter run\nfranklin up\ncd ..",
    "crumbs": [
      "Tutorials",
      "Developing exercises"
    ]
  },
  {
    "objectID": "pages/developing_exercises.html#tldr",
    "href": "pages/developing_exercises.html#tldr",
    "title": "Developing exercises",
    "section": "",
    "text": "conda create -n franklin -c conda-forge munch-group::franklin\nconda activate franklin\n\nfranklin exercise down\ncd &lt;repo&gt;\nfranklin jupyter run\nfranklin up\ncd ..",
    "crumbs": [
      "Tutorials",
      "Developing exercises"
    ]
  },
  {
    "objectID": "pages/developing_exercises.html#create-an-exercise-repository",
    "href": "pages/developing_exercises.html#create-an-exercise-repository",
    "title": "Developing exercises",
    "section": "Create an exercise repository",
    "text": "Create an exercise repository\nA git repository is where an exercise lives\n\nexercise.ipynb:: blah blah\nDockerfile: blah blah\nREADME.md:: blah blah\ndocker-entrypoint.sh:: blah blah\ntagged-release.sh:: blah blah",
    "crumbs": [
      "Tutorials",
      "Developing exercises"
    ]
  },
  {
    "objectID": "pages/developing_exercises.html#developchange-a-new-exercise-on-gitlab",
    "href": "pages/developing_exercises.html#developchange-a-new-exercise-on-gitlab",
    "title": "Developing exercises",
    "section": "Develop/change a new exercise on GitLab",
    "text": "Develop/change a new exercise on GitLab",
    "crumbs": [
      "Tutorials",
      "Developing exercises"
    ]
  }
]