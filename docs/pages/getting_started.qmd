---
title: Getting started
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">


::: {.panel-tabset}

### As a Student

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

### As an Educator

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

:::

### Installing

##### Install Python

If you have not done so already, you should [install a modern version of Python](Installing_python.qmd). 

##### Install Chrome

Franklin is built to interact with the Chrome browser. So you need to make sure that is installed on your computer. If not, you can download it [here](https://www.google.com/intl/en_uk/chrome/).

##### Install Docker Desktop

Docker is a tool that can run a small linux world in your computer. Franklin uses it to make sure Jupyter runs your exercise in exactly the same way, no matter which kind of computer you have. You do not need to known anything about Docker. Franklin will take care of the whole thing for you. If you are interested, though, you can have a look at this [brief introduction to Docker](docker.html).

Before you to download docker, make sure the operating system on your computer has been updated. For docker to run on your device you will have to have Windows newer than Windows 10 or newer than macOS11 (Big Sur) on mac. If you are downloading docker on a AU computer remember to activate admin privileges by activating Heimdal. 

If you are unsure of how to activate Heimdal, follow the instructions given on [this page](https://medarbejdere.au.dk/administration/it/vejledninger/sikkerhed/aktiver-administratorrettigheder-paa-medarbejdercomputer-heimdal)

Go to [this page](https://www.docker.com/products/docker-desktop/) and press on "Download Docker Desktop". When you have done that you will be presented with different options which depends on which chip your computer has. On a Mac, you can find the name of your chip by clicking the apple icon in the upper left corner and choose "about this mac" in the dropdown menu. Apple silicon chips include M1, M2 and M3. Apple intel chips are named intel.

![alt text](<images/Skærmbillede 2025-06-03 kl. 13.28.40.png>)

On Windows, you can find the name of your chip by right clicking on the start button and click system. Under device specifications look for processor. This will tell you the chip name and whether it is a AMD chip or an ARM chip.

Download the version of Docker Desktop that matches your operating system and computer chip. Once downloaded, follow the installation instructions for your device. You have to click accept when your computer asks you if you trust the provider. When docker desktop opens, a window pops up and asks if you want to sign in or create and account. An account is not necessary for using docker with franklin, so you can just click "skip" when prompted. 

When the installation procedure is complete and Docker is done starting up, you must it down. Just closing the blue Docker Dashboard window does not shut down Docker. You need to explicitly quit the program. To make sure it has quit, you can look for the little docker whale icon. In Mac is it in the menu bar. On Windows it is in the small popup menu at the right end of you task bar. If you see a small whale, Docker is still running. Click the whale icon and quit Docker.

![alt text](<images/Skærmbillede 2025-06-03 kl. 14.27.12.png>)

::: callout-tip

## WSL

On Windows, Docker Desktop may give you an error message saying "WSL 2 is required". In that case, install WSL by running the following command into your terminal:

```{.bash filename="Terminal"}
wsl --install
```

:::


<!-- 
### Create a conda environment for Franklin

<img src="https://docs.conda.io/en/latest/_images/conda_logo.svg" align="right" width="200" height="100" />

You must install packages and programs for your analyses and pipelines. Sometimes, however, the packages you need for one project conflict with the ones you need for other projects you work on in parallel. Such conflicts seem like an unsolvable problem. Would it not be fantastic if you could create a small world insulated from the rest of your Anaconda installation? Then, that small world would only contain the packages you needed for a single project. If each project had its isolated world, then there would be no such conflicts. 

Fortunately, a tool lets you do just that, and its name is Conda. Conda's small worlds are called "environments," and you can create as many as you like. You can then switch between them as you switch between your bioinformatics projects. Conda also downloads and installs the packages for you, ensuring that the packages you install in each environment are compatible. It even makes sure to install packages (dependencies) required by the packages you install. By creating an environment for each project, the libraries installed for each project do not interfere. You can read more about conda environments and how to use them in [this introduction](conda.html).

Create an environment called franklin with franklin installed.

```{.bash filename="Terminal"}
conda create -y -n franklin -c conda-forge -c munch-group franklin
```

::: callout-important

## For educators

Educators should also install `franklin-educator` like this:

```{.bash filename="Terminal"}
conda create -y -n franklin -c conda-forge -c munch-group franklin franklin-educator
```

:::

## Test your setup

If you succesfully completed all the above steps, you should now be able to activate your franklin environment:

```{.bash filename="Terminal"}
conda activate franklin
```

and run this command to update franklin to its newest version:

```{.bash filename="Terminal"}
franklin update
```

You can learn about how to use franklin on [this page](commands_core.html).
 -->


Franklin uses [Pixi](https://pixi.sh/latest/), a modern, fast package manager that's fully compatible with conda packages but offers better performance and reliability. If you already installed Miniforge Python as described in the [Installing Python](installing_python.qmd) tutorial, you already have Conda installed, but you may need to install Pixi. To learn about Pixi or Conda, visit the tutorial on [pixi and conda](pixi_and_conda.qmd).

**With Pixi (recommended):**

::: {.panel-tabset}

### Install as Student

```{.bash}
pixi global install franklin --channel conda-forge --channel munch-group
```

Verify installation:

```{.bash}
franklin --version
```

### Install as Educator

Educators also include the educator tools in their installation:

```{.bash}
pixi global install franklin franklin-educator --channel conda-forge --channel munch-group
```

Verify installation:

```{.bash}
franklin --version
franklin exercise --help
```

:::

**With Conda:**

::: {.panel-tabset}

### Install as Students

Activate your conda environment and run:

```{.bash}
conda install -c conda-forge -c munch-group franklin
```

Verify installation:

```{.bash}
franklin --version
```

### Install as Educator

Educators also include the educator tools in their installation. Activate your conda environment and run:

```{.bash}
pixi global install franklin franklin-educator --channel conda-forge --channel munch-group
```

Verify installation:

```{.bash}
franklin --version
franklin exercise --help
```

:::

## Using Franklin

Simple and robust command line interface in Terminal/PowerShell:

::: {.panel-tabset}

### Students

<i class="bi bi-terminal"></i> **Download an exercise**:

1. Run `franklin download`
2. Select your course
3. Select the exercise notebook to download

<i class="bi bi-terminal"></i> **Start working**: 

1. Run `franklin jupyter`
2. Select your course and exercise to make JupyterLab opens in the Chrome browser.
3. Work on the exercise
4. Save your progress
5. Close browser window to stop Franklin.

See [Franklin core commands](core_commands.qmd) for the full documentation.

### Educators

<i class="bi bi-terminal"></i> **Create a new exercise from an example template**:

1. Run `franklin exercise new`
2. Select your course and name exercise
3. Edit exercise visibility in browser window.
4. Wait a few minutes while the new image builds.

<i class="bi bi-terminal"></i> **Edit exercise notebook**:

1. Run `franklin exercise edit`
2. Select your course and exercise to clone the repository pull image.
3. Edit notebook in JupyterLab opening in Chrome.
4. Save your work.
5. Closing the browser window will add, commit, and push your changes to the GitLab exercise repository and initiate the building of an updated Docker image.

See [Core commands](commands_core.qmd), [Educator commands](commands_edu.qmd), and [Admin commands](commands_admin.qmd) for the full documentation.

:::

