---
title: Core Commands
subtitle: Complete Franklin Command Reference
---

Franklin is a command-line tool that manages Jupyter notebook exercises through Docker containers. This reference provides detailed documentation for every Franklin command and option.

## Overview

Franklin uses a hierarchical command structure:

```bash
franklin [GLOBAL OPTIONS] COMMAND [COMMAND OPTIONS] [ARGUMENTS]
```

Global options apply to all commands, while command-specific options apply only to individual commands.

## Global Options

### `--version`
Shows the installed Franklin version and exits.

```bash
franklin --version
```

**Output example:**
```
franklin, version 0.25.1
```

### `--update / --no-update`
Controls automatic updates when Franklin starts.

```bash
franklin --update          # Force update check (default)
franklin --no-update       # Skip update check
```

**Default:** Enabled. Franklin checks for updates on each run.

### `--help`
Shows help message for Franklin or any subcommand.

```bash
franklin --help            # Show main help
franklin download --help   # Show download command help
```

## Main Commands

## `franklin download`

Downloads an exercise repository from GitLab to your local machine.

### Usage

```bash
franklin download [OPTIONS] [URL]
```

### Arguments

- `URL` (optional): Direct GitLab repository URL to download. If not provided, interactive selection menus will appear.

### Options

- `--help`: Show help message for the download command

### Interactive Mode (No URL)

When run without a URL, `download` presents interactive menus:

1. **Course Selection**: Choose from available courses
2. **Exercise Selection**: Choose from exercises in the selected course

```bash
franklin download
```

**What happens:**
- Fetches available courses from GitLab registry
- Shows numbered list of courses
- After course selection, fetches exercises for that course
- Shows numbered list of exercises
- Clones the selected exercise repository
- Removes instructor-only files (solutions, etc.)
- Creates exercise folder in current directory

### Direct Mode (With URL)

Downloads a specific exercise directly:

```bash
franklin download https://gitlab.au.dk/course-name/exercise-name.git
```

**What happens:**
- Validates the URL format
- Checks access permissions
- Clones the repository
- Removes instructor-only files
- Creates exercise folder in current directory

### Behind the Scenes

<details>
<summary>Technical details of the download process</summary>

1. **Registry Discovery**: Queries GitLab API for available courses in the Franklin group
2. **Image Matching**: Matches Docker images in the registry to exercise repositories
3. **Permission Check**: Verifies user has access to selected repository
4. **Repository Clone**: Uses git to clone the exercise repository
5. **Cleanup**: Removes `.git` folder, solution files, and instructor notes
6. **Validation**: Ensures exercise contains required files (Dockerfile, notebook, etc.)

</details>

### Common Issues

- **"You have subdirectories"**: Run from an empty folder or the parent directory
- **"Access denied"**: You don't have permission to access this exercise
- **"Repository not found"**: The URL might be incorrect or the exercise was removed

---

## `franklin jupyter`

Launches JupyterLab in a Docker container configured for the current exercise.

### Usage

```bash
franklin jupyter [OPTIONS] [IMAGE_URL]
```

### Arguments

- `IMAGE_URL` (optional): Direct Docker image URL. If not provided, Franklin detects the exercise or shows selection menu.

### Options

- `--allow-subdirs-at-your-own-risk`: Bypass the subdirectory safety check (not recommended)
- `--help`: Show help message

### Automatic Mode (In Exercise Folder)

When run inside a downloaded exercise folder:

```bash
cd my-exercise
franklin jupyter
```

**What happens:**
- Detects exercise configuration from current folder
- Pulls corresponding Docker image if needed
- Starts container with exercise dependencies
- Mounts current folder into container
- Launches JupyterLab in browser
- Waits for browser to close
- Cleans up container

### Interactive Mode (No Exercise Detected)

When run outside an exercise folder without an image URL:

```bash
franklin jupyter
```

**What happens:**
- Shows course selection menu
- Shows exercise selection menu
- Pulls selected Docker image
- Continues as automatic mode

### Direct Mode (With Image URL)

Launches specific Docker image:

```bash
franklin jupyter registry.gitlab.au.dk/franklin/course/exercise:latest
```

### Port Management

Franklin automatically finds an available port starting from 8888:
- First tries port 8888
- If occupied, tries 8889, 8890, etc.
- Shows the selected port in terminal output

### Behind the Scenes

<details>
<summary>Technical details of the jupyter process</summary>

1. **Docker Check**: Ensures Docker Desktop is installed and running
2. **Disk Space**: Verifies at least 5GB free space
3. **Image Pull**: Downloads Docker image if not cached locally
4. **Container Start**: Launches container with:
   - Current directory mounted at `/home/jovyan/work`
   - Port forwarding for Jupyter
   - Isolated environment with exercise dependencies
5. **Browser Launch**: Opens Chrome/default browser to Jupyter URL
6. **Token Handling**: Automatically includes authentication token
7. **Cleanup**: Stops container when browser closes

</details>

### Common Issues

- **"Docker is not running"**: Start Docker Desktop first
- **"Port already in use"**: Franklin will try the next port automatically
- **"Insufficient disk space"**: Need at least 5GB free space
- **"You have subdirectories"**: For security, run from exercise folder or use `--allow-subdirs-at-your-own-risk`

---

## `franklin update`

Updates Franklin and related packages to the latest version.

### Usage

```bash
franklin update [OPTIONS]
```

### Options

- `--check`: Only check for updates without installing
- `--force`: Force update even if current version is latest
- `--help`: Show help message

### Default Behavior

```bash
franklin update
```

**What happens:**
- Detects installation method (Conda, Pixi, or pip)
- Checks for latest version
- If update available, installs it
- Updates franklin-educator if installed
- Updates franklin-admin if installed
- Restarts Franklin if updated

### Check Mode

See if updates are available without installing:

```bash
franklin update --check
```

**Output example:**
```
Current version: 0.25.1
Latest version: 0.25.2
Update available! Run 'franklin update' to install.
```

### Force Mode

Force reinstall even if up-to-date:

```bash
franklin update --force
```

### Package Detection

Franklin automatically detects how it was installed:
- **Conda**: Uses `conda update` or `mamba update`
- **Pixi**: Uses `pixi update` or `pixi global update`
- **Pip**: Uses `pip install --upgrade`

### Behind the Scenes

<details>
<summary>Technical details of the update process</summary>

1. **Installation Detection**: Checks Python executable path for conda/pixi markers
2. **Version Query**: Fetches latest version from package repository
3. **Comparison**: Compares installed vs. available versions
4. **Update Execution**: Runs appropriate package manager command
5. **Plugin Check**: Looks for educator/admin plugins to update
6. **Cache Management**: Updates are cached for 6 hours to avoid repeated checks

</details>

---

## `franklin cleanup`

Removes Docker images and containers to free disk space.

### Usage

```bash
franklin cleanup [OPTIONS]
```

### Options

- `--help`: Show help message

### Interactive Cleanup

```bash
franklin cleanup
```

**What happens:**
- Starts Docker if not running
- Lists all Franklin-related Docker images
- Shows multi-select menu (y/n for each)
- Removes selected images
- Optionally prunes Docker system cache
- Shows space freed

### Selection Process

The cleanup command shows each image with:
- Image name and tag
- Size on disk
- Last used date

**Example interaction:**
```
Select containers to remove (y/n for each):
  registry.gitlab.au.dk/franklin/bio/exercise1:latest (2.3 GB)? y
  registry.gitlab.au.dk/franklin/chem/exercise2:latest (1.8 GB)? n
  registry.gitlab.au.dk/franklin/math/exercise3:latest (3.1 GB)? y

Removed 2 images, freed 5.4 GB
```

### What Gets Removed

- **Docker Images**: Downloaded exercise environments
- **Stopped Containers**: Leftover containers from previous runs
- **Docker Cache**: Build cache and dangling images (optional)

### What Is Preserved

- Your exercise files and notebooks
- Any changes you made to exercises
- Running containers (won't be stopped)

### Behind the Scenes

<details>
<summary>Technical details of the cleanup process</summary>

1. **Image Discovery**: Lists all Docker images matching Franklin patterns
2. **Container Check**: Identifies stopped containers from those images
3. **Space Calculation**: Computes disk space for each image
4. **Safe Removal**: Only removes images not currently in use
5. **Cache Pruning**: Optionally runs `docker system prune`

</details>

---

## `franklin show`

Display information about Docker resources on your system.

### Usage

```bash
franklin show SUBCOMMAND [OPTIONS]
```

### Subcommands

### `franklin show images`

Lists all Docker images on your system.

```bash
franklin show images
```

**Output includes:**
- Image repository and tag
- Image ID
- Creation date
- Size on disk

**Example output:**
```
REPOSITORY                                          TAG      SIZE
registry.gitlab.au.dk/franklin/bio/exercise1       latest   2.3GB
registry.gitlab.au.dk/franklin/chem/exercise2      latest   1.8GB
python                                              3.11     889MB
```

### `franklin show containers`

Lists all Docker containers (running and stopped).

```bash
franklin show containers
```

**Output includes:**
- Container ID
- Image name
- Status (running/exited)
- Ports
- Name

**Example output:**
```
CONTAINER ID   IMAGE                                    STATUS
a1b2c3d4e5f6   registry.gitlab.au.dk/.../exercise1    Up 2 hours
f6e5d4c3b2a1   registry.gitlab.au.dk/.../exercise2    Exited
```

### `franklin show storage`

Shows Docker disk usage summary.

```bash
franklin show storage
```

**Output includes:**
- Total space used by images
- Space used by containers
- Space used by volumes
- Build cache size
- Reclaimable space

**Example output:**
```
TYPE            TOTAL     ACTIVE    RECLAIMABLE
Images          15.3GB    8.2GB     7.1GB
Containers      248MB     0B        248MB
Volumes         1.2GB     450MB     750MB
Build Cache     3.5GB     0B        3.5GB
----------------------------------------------
Total           20.2GB    8.6GB     11.6GB
```

### Behind the Scenes

<details>
<summary>Technical details of the show commands</summary>

1. **Docker API**: Queries Docker daemon for resource information
2. **Filtering**: Identifies Franklin-related resources by naming patterns
3. **Size Calculation**: Computes actual disk usage (not virtual sizes)
4. **Status Check**: Determines container states and image usage

</details>

---

## `franklin docker`

Advanced Docker management commands (hidden by default).

### Usage

```bash
franklin docker SUBCOMMAND [OPTIONS]
```

### Subcommands

### `franklin docker ps`

Lists running containers (similar to `docker ps`).

```bash
franklin docker ps
```

### `franklin docker images`

Lists Docker images (similar to `docker images`).

```bash
franklin docker images
```

### `franklin docker stop`

Stops running containers.

```bash
franklin docker stop [CONTAINER_ID]
```

### `franklin docker remove`

Removes stopped containers or images.

```bash
franklin docker remove [RESOURCE_ID]
```

### Why Hidden?

These commands are hidden because:
- They duplicate Docker's native commands
- They're primarily for debugging
- Regular users should use `cleanup` and `show` instead

To see hidden commands:

```bash
franklin docker --help
```

---

## Configuration

Franklin's behavior can be configured through environment variables.

### Environment Variables

All Franklin environment variables start with `FRANKLIN_`:

```bash
export FRANKLIN_AUTO_UPDATE=false    # Disable automatic updates
export FRANKLIN_DOCKER_TIMEOUT=120   # Docker startup timeout (seconds)
export FRANKLIN_BROWSER=chrome       # Preferred browser for Jupyter
```

### Common Variables

- `FRANKLIN_AUTO_UPDATE`: Enable/disable automatic updates (true/false)
- `FRANKLIN_GITLAB_TOKEN`: GitLab API token for private repositories
- `FRANKLIN_DOCKER_TIMEOUT`: Timeout for Docker operations (seconds)
- `FRANKLIN_JUPYTER_PORT`: Preferred port for Jupyter (default: 8888)
- `FRANKLIN_LOG_LEVEL`: Logging verbosity (DEBUG, INFO, WARNING, ERROR)

### Configuration Files

Franklin looks for configuration in:
1. Environment variables (highest priority)
2. `.franklin/config.json` in user home directory
3. Default settings (lowest priority)

---

## Troubleshooting

### Common Problems and Solutions

#### Docker Issues

**Problem**: "Docker is not running"
```bash
# Solution: Start Docker Desktop
# On macOS:
open -a Docker
# On Windows:
# Start Docker Desktop from Start Menu
# On Linux:
sudo systemctl start docker
```

**Problem**: "Cannot connect to Docker daemon"
```bash
# Solution: Ensure user is in docker group (Linux)
sudo usermod -aG docker $USER
# Log out and back in
```

#### Permission Issues

**Problem**: "Permission denied" when downloading
```bash
# Solution: Check GitLab access
# Ensure you're logged into GitLab
# Verify course enrollment
```

**Problem**: "Cannot write to directory"
```bash
# Solution: Check folder permissions
ls -la .
# Ensure you own the current directory
```

#### Network Issues

**Problem**: "Cannot reach GitLab"
```bash
# Solution: Check network connection
ping gitlab.au.dk
# Check if behind proxy/firewall
```

**Problem**: "Image pull failed"
```bash
# Solution: Retry with cleanup
franklin cleanup  # Remove corrupted images
franklin jupyter  # Try again
```

#### Space Issues

**Problem**: "No space left on device"
```bash
# Solution: Free up Docker space
franklin cleanup           # Interactive cleanup
docker system prune -a    # Nuclear option (removes everything)
```

### Debug Mode

Enable debug output for troubleshooting:

```bash
export FRANKLIN_LOG_LEVEL=DEBUG
franklin jupyter  # Now shows detailed logs
```

### Getting Help

1. **Built-in Help**: `franklin COMMAND --help`
2. **Documentation**: Visit the Franklin documentation site
3. **Issue Tracker**: Report bugs on GitHub
4. **Support**: Contact course instructors for exercise-specific issues

---

## Tips and Best Practices

### Workflow Tips

1. **Create a dedicated folder** for exercises:
   ```bash
   mkdir ~/exercises
   cd ~/exercises
   franklin download
   ```

2. **Regular cleanup** to save disk space:
   ```bash
   # Weekly cleanup routine
   franklin cleanup
   franklin show storage
   ```

3. **Update before semester** starts:
   ```bash
   franklin update --force
   ```

### Performance Tips

1. **Keep Docker running** during work sessions to avoid startup time
2. **Download exercises in advance** when on fast internet
3. **Close unused Jupyter tabs** to free memory
4. **Use cleanup regularly** - images can be re-downloaded

### Security Tips

1. **Never run from system directories** (/, /usr, etc.)
2. **Don't use `--allow-subdirs-at-your-own-risk`** unless necessary
3. **Keep Franklin updated** for security patches
4. **Be cautious with unknown exercise URLs**

### Organization Tips

1. **One folder per course**:
   ```
   ~/exercises/
   ├── biology/
   │   ├── exercise1/
   │   ├── exercise2/
   ├── chemistry/
   │   ├── lab1/
   │   ├── lab2/
   ```

2. **Use descriptive names** when saving notebooks
3. **Commit your work** to git if you know how
4. **Backup important exercises** before cleanup

---

## Command Summary

| Command | Purpose | Common Usage |
|---------|---------|--------------|
| `download` | Get exercise from GitLab | `franklin download` |
| `jupyter` | Start JupyterLab | `franklin jupyter` |
| `update` | Update Franklin | `franklin update` |
| `cleanup` | Free disk space | `franklin cleanup` |
| `show images` | List Docker images | `franklin show images` |
| `show containers` | List containers | `franklin show containers` |
| `show storage` | Show disk usage | `franklin show storage` |

---

## Version History

Franklin follows semantic versioning (MAJOR.MINOR.PATCH):
- **MAJOR**: Breaking changes requiring user action
- **MINOR**: New features, backward compatible
- **PATCH**: Bug fixes and minor improvements

To see your version:
```bash
franklin --version
```

To see what's new:
```bash
franklin update --check
```