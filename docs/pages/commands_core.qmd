---
title: Student/Core Commands
---

Franklin is a command-line tool that manages Jupyter notebook exercises through Docker containers.

## Overview

Franklin uses a hierarchical command structure:

```bash
franklin [GLOBAL OPTIONS] COMMAND [COMMAND OPTIONS] [ARGUMENTS]
```

Global options:
- `--version` shows the installed Franklin version and exits
- `--help` shows help message for Franklin or any subcommand

Example:
```bash
franklin --help            # Show main help
franklin download --help   # Show download command help
```

## Main Commands

### Download an exercise

This command downloads an exercise repository to your computer.

```bash
franklin download
```

::: {.panel-tabset}

# This happens

1. You are prompted to select your course
2. You are prompted to select the exercise to download  
3. Franklin downloads the exercise to a subfolder of your current folder
4. Instructor-only files (solutions, etc.) are removed

# Tips  

- Run from an empty folder or a dedicated exercises directory
- Create one folder per course to keep exercises organized
- The exercise will be downloaded into a new subfolder named after the exercise

:::

<details>
<summary>Technical details of the process</summary>

1. **Registry Discovery**: Queries GitLab API for available courses in the Franklin group
2. **Image Matching**: Matches Docker images in the registry to exercise repositories
3. **Permission Check**: Verifies user has access to selected repository
4. **Repository Clone**: Uses git to clone the exercise repository
5. **Cleanup**: Removes `.git` folder, solution files, and instructor notes
6. **Validation**: Ensures exercise contains required files (Dockerfile, notebook, etc.)

</details>

#### Download with URL

You can download a specific exercise directly using its GitLab URL.

```bash
franklin download https://gitlab.au.dk/course-name/exercise-name.git
```

::: {.panel-tabset}

# This happens

1. Franklin validates the URL format
2. Checks your access permissions
3. Downloads the exercise to a subfolder of your current folder

# Tips

- Get the URL from your course page or instructor
- The URL must be a GitLab repository URL
- You need access rights to the repository

:::

### Launch Jupyter

This command launches JupyterLab in a Docker container configured for the current exercise.

```bash
franklin jupyter
```

::: {.panel-tabset}

# This happens

1. Detects exercise in current folder (or prompts for selection)
2. Pulls Docker image with exercise dependencies if needed
3. Starts container and mounts current folder
4. Opens JupyterLab in your browser
5. Waits for you to close the browser
6. Cleans up the container

# Tips

- Run from inside the exercise folder for automatic detection
- Franklin finds an available port starting from 8888
- Keep Docker Desktop running during work sessions
- Your work is saved in the exercise folder, not the container

:::

<details>
<summary>Technical details of the process</summary>

1. **Docker Check**: Ensures Docker Desktop is installed and running
2. **Disk Space**: Verifies at least 5GB free space
3. **Image Pull**: Downloads Docker image if not cached locally
4. **Container Start**: Launches container with current directory mounted at `/home/jovyan/work`
5. **Port Management**: Finds available port starting from 8888
6. **Browser Launch**: Opens Chrome/default browser with authentication token
7. **Cleanup**: Stops container when browser closes

</details>

#### Launch with image URL

You can launch a specific Docker image directly.

```bash
franklin jupyter registry.gitlab.au.dk/franklin/course/exercise:latest
```

::: {.panel-tabset}

# This happens

1. Pulls the specified Docker image
2. Starts container with current folder mounted
3. Opens JupyterLab in browser

# Tips

- Use when you know the exact image you need
- Useful for testing or special configurations
- The image URL is shown in exercise documentation

:::

#### Options

- `--allow-subdirs-at-your-own-risk`: Bypass subdirectory safety check (not recommended)

### Update Franklin

This command updates Franklin to the latest version.

```bash
franklin update
```

::: {.panel-tabset}

# This happens

1. Detects how Franklin was installed (Conda, Pixi, or pip)
2. Checks for available updates
3. Updates Franklin and any installed plugins
4. Restarts Franklin if updated

# Tips

- Franklin checks for updates automatically when started
- Updates are cached for 6 hours to avoid repeated checks
- Update before each semester for the latest features
- The update includes franklin-educator and franklin-admin if installed

:::

<details>
<summary>Technical details of the process</summary>

1. **Installation Detection**: Checks Python executable path for conda/pixi markers
2. **Version Query**: Fetches latest version from package repository
3. **Package Manager**: Uses appropriate command (conda update, pixi update, or pip install --upgrade)
4. **Plugin Updates**: Also updates franklin-educator and franklin-admin if installed
5. **Cache Management**: Updates are cached to avoid repeated version checks

</details>

#### Check for updates

Check for updates without installing them.

```bash
franklin update --check
```

::: {.panel-tabset}

# This happens

1. Queries the package repository for latest version
2. Compares with your installed version
3. Reports if an update is available

# Tips

- Use to see if updates are available before installing
- No changes are made to your system
- Shows version numbers for comparison

:::

#### Force update

Force a reinstall even if already up-to-date.

```bash
franklin update --force
```

::: {.panel-tabset}

# This happens

1. Reinstalls Franklin regardless of version
2. Useful for fixing corrupted installations
3. Also reinstalls plugins if present

# Tips

- Use when Franklin is behaving strangely
- Fixes most installation-related issues
- Takes longer than a regular update

:::

### Clean up Docker images

This command removes Docker images and containers to free disk space.

```bash
franklin cleanup
```

::: {.panel-tabset}

# This happens

1. Lists all Franklin-related Docker images
2. Shows size of each image
3. Lets you select which to remove (y/n for each)
4. Removes selected images
5. Shows total space freed

# Tips

- Images can be re-downloaded when needed
- Your exercise files are never deleted
- Run weekly to keep disk usage under control
- Consider removing old course images at semester end

:::

<details>
<summary>Technical details of the process</summary>

1. **Image Discovery**: Lists all Docker images matching Franklin patterns
2. **Container Check**: Identifies stopped containers from those images
3. **Space Calculation**: Computes disk space for each image
4. **Safe Removal**: Only removes images not currently in use
5. **Cache Pruning**: Optionally runs `docker system prune` for additional cleanup

</details>

### Show Docker resources

#### Show images

List all Docker images on your system.

```bash
franklin show images
```

::: {.panel-tabset}

# This happens

1. Queries Docker for all images
2. Displays them in a formatted table
3. Shows repository, tag, ID, and size

# Tips

- Use before cleanup to see what's installed
- Large images (>2GB) are exercise environments
- Small images (<1GB) are usually base images

:::

#### Show containers

List all Docker containers (running and stopped).

```bash
franklin show containers
```

::: {.panel-tabset}

# This happens

1. Queries Docker for all containers
2. Shows both running and stopped containers
3. Displays ID, image, status, and ports

# Tips

- Running containers show "Up" status
- Stopped containers show "Exited" status
- Use to check if Jupyter is still running

:::

#### Show storage

Display Docker disk usage summary.

```bash
franklin show storage
```

::: {.panel-tabset}

# This happens

1. Calculates space used by images
2. Calculates space used by containers
3. Shows total and reclaimable space

# Tips

- Use before and after cleanup to see space saved
- Check when Docker seems slow
- Large build cache can often be cleared safely

:::

## Troubleshooting

### Docker not running

**Problem:** "Docker is not running"

**Solution:** Start Docker Desktop
- **macOS**: Open Docker from Applications or run `open -a Docker`
- **Windows**: Start Docker Desktop from Start Menu
- **Linux**: Run `sudo systemctl start docker`

### Permission denied

**Problem:** "Permission denied" when downloading

**Solution:** Check GitLab access
- Ensure you're logged into GitLab
- Verify course enrollment with instructor
- Check that repository is public or you have access

### No space left

**Problem:** "No space left on device"

**Solution:** Free up Docker space
```bash
franklin cleanup           # Interactive cleanup
docker system prune -a    # Nuclear option (removes everything)
```

### Network issues

**Problem:** "Cannot reach GitLab" or "Image pull failed"

**Solution:** Check network and retry
- Check network connection: `ping gitlab.au.dk`
- Check if behind proxy/firewall
- Run `franklin cleanup` to remove corrupted images
- Try again with `franklin jupyter`

### Debug mode

Enable detailed logging for troubleshooting:
```bash
export FRANKLIN_LOG_LEVEL=DEBUG
franklin jupyter  # Now shows detailed logs
```

## Tips and Best Practices

### Organization

Create a dedicated folder structure:
```
~/exercises/
├── biology/
│   ├── exercise1/
│   ├── exercise2/
├── chemistry/
│   ├── lab1/
│   ├── lab2/
```

### Workflow

1. **Start of semester**: Update Franklin
   ```bash
   franklin update --force
   ```

2. **Weekly routine**: Clean up Docker images
   ```bash
   franklin cleanup
   franklin show storage
   ```

3. **Before exercises**: Ensure Docker is running
   ```bash
   open -a Docker  # macOS
   ```

### Performance

- Keep Docker Desktop running during work sessions
- Download exercises when on fast internet
- Close unused Jupyter tabs to free memory
- Use cleanup regularly - images can be re-downloaded

### Security

- Never run from system directories (/, /usr, etc.)
- Don't use `--allow-subdirs-at-your-own-risk` unless necessary
- Keep Franklin updated for security patches
- Be cautious with unknown exercise URLs

## Environment Variables

Configure Franklin's behavior:

```bash
export FRANKLIN_AUTO_UPDATE=false    # Disable automatic updates
export FRANKLIN_DOCKER_TIMEOUT=120   # Docker startup timeout (seconds)
export FRANKLIN_BROWSER=chrome       # Preferred browser for Jupyter
export FRANKLIN_JUPYTER_PORT=8888    # Preferred Jupyter port
export FRANKLIN_LOG_LEVEL=DEBUG      # Enable debug logging
```

Add to your shell profile (`~/.bashrc` or `~/.zshrc`) to make permanent.

## Getting Help

1. **Built-in help**: `franklin COMMAND --help`
2. **Documentation**: This guide and other resources
3. **Course support**: Contact your instructor for exercise-specific issues
4. **Bug reports**: Report issues to the Franklin development team