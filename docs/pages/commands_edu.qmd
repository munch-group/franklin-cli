---
title: Developing exercises
---

The `franklin-educator` plugin.

```{.bash filename="Terminal"}
conda install -c conda-forge -c munch-group franklin-educator
```

```{.bash filename="Terminal"}
pixi workspace channel add munch-group
pixi add franklin-educator
```

## Create a new exercise 

To create a new exercise you will need to use the command 

franklin exercise

When you run this command a new page of commands will show. 
![alt text](<images/SkÃ¦rmbillede 2025-05-29 kl. 16.19.09.png>)

In order to create a new exercise you use the command 


```{.bash filename="Terminal"}
franklin exercise new
```

The command presents you with menus to select the course and exercise you 

A selection menu then appears and you choose the course you want to make an exercise for. Franklin then asks you to make make a short descriptive label of your exercise. This will be the title of the exercise. When you have named your exercise press enter

## Exercise edit workflow




## Exercise down / up



## Clone exercise


## GitUI

Git gui opens up a page with 4 section: unstaged changes, staged changed commit box and modified, not staged.

Git gui can be used for version control, meaning if you an another educator is editing the same exercise at the same time, Git Gui can help you select which changes you want to keep, if you have editet the exact same assignment or it will allow you to merge both your changes into the new version of the assignment


### Git clone


This command below clones an exercise git repository into a folder with the same name as the repository. 

```{.bash filename="Terminal"}
franklin exercise clone
```

if the repository is called `data-exercise`, you can open it in vscode like this:

```{.bash filename="Terminal"}
code data-exercise
```

::: callout-important

## For Mac users

On Macs, the `code` command line utility needs to be installed first. Launch vscode and open the Command Palette (Cmd+Shift+P), type 'shell command', select  "Shell Command: Install 'code' command in PATH command" and hit Enter.

![alt text](images/shell-command.png)

Restart the terminal for the change to take effect. 

:::


::: callout-tip

You can run `code` followed by a folder name to edit files in that folder. To edit files in your current folder, run

in any folder to start editing files in that folder.

```{.bash filename="Terminal"}
code data-exercise
```

'''

Once you have opened the folder with the repository in vscode, you need to reopen it in the linux container used for the exercise. To do that, you open the Command Palette (Cmd+Shift+P) and type "reopen" to find "Reopen in container":

![alt text](<images/Screenshot 2025-05-31 at 11.05.53.png>)

When you select that and hit Enter, vscode builds the container (which takes a while). 

<!-- FIXME: make sure docker images built this way are also visible and cleaned up by franklin cleanup  -->


### GitUI

    git clone git@github.com:munch-group/arg-dashboard.git

    code arg-dashboard

Cmd-Shift-P, "Reopen in container"

To add dependencies (e.g. scipy), open terminal in vscode and install pixi:

    ./install_pixi.sh

Then add the package:

    pixi add --feature exercise --platform linux-64 scipy
 

[Using notebooks in vscode]https://code.visualstudio.com/docs/datascience/jupyter-notebooks)

### Git add


### Git commit


### Git push


## Removing (archiving) an exercise 

