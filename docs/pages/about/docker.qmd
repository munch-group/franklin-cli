---
title: Docker virtualization
---

::: {.callout-caution }
## This pages are under construction

:::

How Docker Bridges Operating Systems (Layman's Explanation)

Imagine you have a piece of software that works perfectly on your computer, but when you give it to someone else, it breaks—maybe because they use a different version of Windows, macOS, or Linux, or they’re missing some necessary software. This is a common problem in software development, and Docker solves it by creating a kind of “portable box” for software.

Here’s how it works in simple terms:

Docker puts your software, along with everything it needs to run (like tools, libraries, and settings), into a container. Think of it like packing a suitcase that has exactly what your app needs—no more, no less.
This container always behaves the same, no matter where you run it: your laptop, a colleague’s machine, a server in the cloud. That’s because Docker doesn’t rely on the local operating system to provide the right setup—it brings its own setup.
Even if your computer runs macOS and someone else uses Linux, the Docker container will still work, because Docker acts like a translator. It uses the host system’s resources (CPU, memory, etc.), but keeps the software environment inside the container separate and consistent.
Unlike virtual machines, which need to boot an entire operating system, Docker shares the core parts of the host OS, making containers much faster and lighter.
In short: Docker bridges operating systems by wrapping your software in a self-contained box that includes everything it needs to run, and then letting that box run on almost any computer without worrying about differences between systems.


Docker is an open-source platform that automates the deployment, scaling, and management of applications using containerization. Containers are lightweight, standalone, and executable software packages that include everything needed to run an application—code, runtime, system tools, libraries, and settings. This ensures that software behaves the same regardless of the environment in which it is executed.

Unlike virtual machines, which replicate entire operating systems, Docker containers share the host OS kernel and isolate applications at the process level. This makes containers more efficient in terms of performance and resource utilization. Docker uses a layered filesystem and image caching to further optimize deployment speed and storage.

Docker’s core components include:

Docker Engine: The runtime that builds and runs containers.
Docker Images: Immutable templates used to create containers, typically defined via Dockerfile scripts.
Docker Containers: Instances of images that are executed with an isolated filesystem and environment.
Docker Hub: A public registry for sharing and retrieving Docker images.
Docker Compose: A tool for defining and running multi-container applications using YAML configuration.
Docker is widely adopted in both development and production environments due to its ability to ensure reproducibility, simplify dependency management, and support scalable microservice architectures. It integrates with orchestration systems like Kubernetes and is a foundational technology in continuous integration and deployment (CI/CD) pipelines.

Despite its benefits, Docker introduces complexity related to security, networking, and persistent storage, especially in distributed settings. Nonetheless, it remains a key tool for encapsulating environments and streamlining software delivery across heterogeneous computing platforms.




### What do i need franklin and docker for?

Docker is a tool that makes sure everyone runs the exact same version of a program, no matter what kind of computer they have. When students work on coding assignments, things can sometimes break if they have different versions of Python or other software installed. Docker solves this by creating a special “container” that holds everything the assignment needs — like a mini computer inside your computer. For teachers, this means you don’t have to worry about installing the right packages on every student’s device or assignments suddenly breaking because something got updated. Installing Docker is the first step to making sure your assignments work the same for everyone, every time.

Franklin helps you navigate these containers so that the right "mini computer" is activated when the student works on the exercises that needs that particular enviroment to run

### Install Docker Desktop

In order for franklin to work you also have to download docker desktop

Before you try to download docker, make sure the operating system on your computer has been updated. For docker to run on your device you will have to have Windows newer than Windows 10 or newer than macOS11 (Big Sur) on mac.

If you are downloading docker on a AU computer remember to activate admin priviliges by activating heimdal. 

If you are unsure of how to activate Heimdal follow the instructions given on [this page](https://medarbejdere.au.dk/administration/it/vejledninger/sikkerhed/aktiver-administratorrettigheder-paa-medarbejdercomputer-heimdal)

### Download Docker Desktop on a mac

Go to [this page](https://www.docker.com/products/docker-desktop/) and press on "Download Docker Desktop". When you have done that you will be presented with different options which depends on which chip your computer has. If you do not know, you can find the name of your chip by clicking the apple icon in the upper left corner and choose "about this mac" in the dropdown menu
![alt text](<images/Skærmbillede 2025-06-03 kl. 13.28.40.png>)

Apple silicon chips include M1, M2 and M3. 
Apple intel chips are named intel.

Back on the docker desktop download page you choose the one that matches your computer chip and follows the instruction on your device. You have to click accept when your computer asks you if you trust the provider. When docker desktop opens a window pops up and asks if you want to sign in or create and account. You can just press skip on these. An account is not necessary for using docker in franklin.

When docker desktop is done downloading shut down the program. Make sure that it has been compleately shut down by checking the top right corner of your device. If there is an icon that looks like a small cargo ship click on it and choose "Quit Docker Desktop" in the dropdown menu
![alt text](<images/Skærmbillede 2025-06-03 kl. 14.27.12.png>)

### Download Docker Desktop on a Windows

Go to [this page](https://www.docker.com/products/docker-desktop/) and press on "Download Docker Desktop". When you have done that you will be presented with different options which depends on which chip your computer has. If you do not know, you can find the name of your chip by right clicking on the start button and click system. Under device specifications look for processor. This will tell you the chip name and whether it is a AMD chip or an ARM chip

Back on the docker desktop download page you choose the one that matches your computer chip and follows the instruction on your device. You have to click accept when your computer asks you if you trust the provider. When docker desktop opens a window pops up and asks if you want to sign in or create and account. You can just press skip on these. An account is not necessary for using docker in franklin.

When docker desktop is done installing make sure the program is compleately shut down. You do this by going to "Taskmanager" and search for "docker" in the search bar in taskmanager. If there is any tasks open where docker is involved click "End task"

If docker desktop comes with the error message "WSL 2 is required"
Install WSL via copying the following command into your terminal:

wsl --install