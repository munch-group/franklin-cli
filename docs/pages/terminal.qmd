---
title: "Introduction to the Terminal"
subtitle: "Your Command Line Interface"
---

## What is a Terminal?

A terminal (also called command line, shell, or console) is a text-based interface for interacting with your computer. Instead of clicking buttons and icons, you type commands to tell the computer what to do. While it might seem intimidating at first, the terminal is an incredibly powerful tool that gives you precise control over your system.

### Why Learn the Terminal?

- **Power**: Many tasks are faster and more efficient in the terminal
- **Automation**: Chain commands together and create scripts
- **Remote Access**: Control servers and other computers remotely
- **Development**: Essential for programming and data science
- **Franklin**: Many Franklin commands work best from the terminal

## Opening Your Terminal

::: {.panel-tabset}

### macOS

1. Press `Cmd + Space` to open Spotlight
2. Type "Terminal" and press Enter
3. Or: Find Terminal in Applications → Utilities

You'll see something like:
```bash
username@MacBook-Pro ~ %
```

### Windows

1. Press `Windows Key`
2. Type "PowerShell" or "Command Prompt"
3. Or: Right-click Start Menu → Windows Terminal

You'll see something like:
```powershell
PS C:\Users\username>
```

### Linux

1. Press `Ctrl + Alt + T` (most distributions)
2. Or: Find Terminal in your applications menu

You'll see something like:
```bash
username@computer:~$
```

:::

## Understanding the Prompt

The prompt shows you important information:

```bash
username@hostname:current_directory$
```

- **username**: Your user account name
- **hostname**: Your computer's name
- **current_directory**: Where you are in the file system
- **$** or **%**: Indicates you can type a command

## Essential Navigation Commands

### Where Am I? (`pwd`)

The `pwd` command (print working directory) shows your current location:

```bash
pwd
# Output: /Users/username/Documents
```

### What's Here? (`ls`)

The `ls` command lists files and folders:

```bash
# Basic listing
ls

# Detailed listing with sizes and dates
ls -l

# Show hidden files (starting with .)
ls -a

# Human-readable file sizes
ls -lh
```

### Moving Around (`cd`)

The `cd` command (change directory) moves between folders:

```bash
# Go to a specific folder
cd Documents

# Go to home directory
cd ~
# or just
cd

# Go up one level
cd ..

# Go up two levels
cd ../..

# Go to previous directory
cd -

# Use absolute path
cd /Users/username/Documents

# Use relative path
cd ./subfolder
```

## Working with Files and Folders

### Creating Files and Folders

```bash
# Create a new folder
mkdir my_project
mkdir -p projects/python/data_analysis  # Create nested folders

# Create an empty file
touch notes.txt

# Create and write to a file
echo "Hello World" > greeting.txt

# Append to a file
echo "Another line" >> greeting.txt
```

### Viewing File Contents

```bash
# View entire file
cat filename.txt

# View with pagination
less filename.txt  # Press 'q' to quit

# View first 10 lines
head filename.txt

# View last 10 lines
tail filename.txt

# View last lines as file updates (great for logs)
tail -f logfile.log
```

### Copying, Moving, and Deleting

```bash
# Copy file
cp source.txt destination.txt

# Copy folder recursively
cp -r source_folder destination_folder

# Move/rename file or folder
mv old_name.txt new_name.txt
mv file.txt /path/to/destination/

# Delete file
rm file.txt

# Delete empty folder
rmdir empty_folder

# Delete folder and contents (careful!)
rm -r folder_name

# Delete with confirmation
rm -i file.txt
```

## Useful Shortcuts and Tips

### Keyboard Shortcuts

| Shortcut | Action |
|----------|--------|
| `Tab` | Auto-complete file/folder names |
| `↑` / `↓` | Navigate command history |
| `Ctrl + C` | Cancel current command |
| `Ctrl + A` | Go to beginning of line |
| `Ctrl + E` | Go to end of line |
| `Ctrl + L` | Clear screen (or use `clear`) |
| `Ctrl + R` | Search command history |
| `Ctrl + D` | Exit terminal |

### Command History

```bash
# View command history
history

# Run previous command
!!

# Run command from history
!123  # Run command number 123

# Search history
history | grep "git"
```

### Wildcards and Patterns

```bash
# * matches any characters
ls *.txt           # All .txt files
rm temp_*          # All files starting with temp_

# ? matches single character
ls file?.txt       # Matches file1.txt, file2.txt, etc.

# [...] matches any character in brackets
ls file[123].txt   # Matches file1.txt, file2.txt, file3.txt
```

## Finding Things

### Finding Files

```bash
# Find files by name
find . -name "*.py"

# Find folders
find . -type d -name "data"

# Find files modified in last 24 hours
find . -mtime -1

# Find and execute command
find . -name "*.txt" -exec cat {} \;
```

### Searching File Contents

```bash
# Search for text in file
grep "search term" file.txt

# Search recursively in all files
grep -r "TODO" .

# Case-insensitive search
grep -i "python" file.txt

# Show line numbers
grep -n "error" logfile.log

# Search for files containing text
grep -l "import pandas" *.py
```

## Working with Processes

### Running Programs

```bash
# Run a Python script
python script.py

# Run in background
python long_script.py &

# Run and disconnect from terminal
nohup python script.py &
```

### Managing Processes

```bash
# List running processes
ps aux

# Find specific process
ps aux | grep python

# Kill a process
kill 1234  # Kill process with ID 1234

# Force kill
kill -9 1234

# Interactive process viewer
top  # Press 'q' to quit
```

## Input/Output Redirection

### Redirecting Output

```bash
# Redirect output to file
ls > file_list.txt

# Append to file
ls >> file_list.txt

# Redirect errors
command 2> errors.txt

# Redirect both output and errors
command &> all_output.txt
```

### Pipes

Chain commands together:

```bash
# Count Python files
ls | grep ".py" | wc -l

# Find and sort
find . -name "*.txt" | sort

# View processes using most memory
ps aux | sort -k4 -r | head
```

## Environment Variables

```bash
# View all environment variables
env

# View specific variable
echo $PATH
echo $HOME

# Set temporary variable
export MY_VAR="value"

# Add to PATH
export PATH=$PATH:/new/path
```

## Franklin in the Terminal

Franklin is designed to work seamlessly from the terminal:

```bash
# Check Franklin installation
franklin --version

# Download exercises
franklin download

# Start Jupyter
franklin jupyter

# Get help
franklin --help
franklin jupyter --help
```

### Common Franklin Workflows

```bash
# Student workflow
cd ~/Documents/Courses
franklin download
cd "Exercise Name"
franklin jupyter

# Educator workflow
franklin exercise new
cd my-exercise
franklin exercise edit
franklin exercise test
franklin exercise publish
```

## Terminal for Different Shells

::: {.panel-tabset}

### Bash (Linux/Mac)

Most common shell with extensive features:

```bash
# Check current shell
echo $SHELL

# Bash-specific features
alias ll='ls -la'
source ~/.bashrc
```

### Zsh (Mac default)

Enhanced Bash with better completion:

```bash
# Zsh configuration
~/.zshrc

# Powerful tab completion
cd /u/l/b<Tab>  # Expands to /usr/local/bin
```

### PowerShell (Windows)

Object-oriented shell:

```powershell
# PowerShell commands
Get-ChildItem  # Like ls
Set-Location   # Like cd
Get-Content    # Like cat

# Aliases work too
ls
cd
cat
```

:::

## Terminal Customization

### Creating Aliases

Make shortcuts for common commands:

```bash
# Add to ~/.bashrc or ~/.zshrc
alias ll='ls -la'
alias gs='git status'
alias jp='franklin jupyter'
alias py='python'

# Reload configuration
source ~/.bashrc
```

### Customizing Prompt

```bash
# Simple prompt
PS1='\u@\h:\w\$ '

# Colorful prompt
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
```

## Best Practices

### Safety First
- ✅ Use `ls` before `rm` to verify what you're deleting
- ✅ Use `-i` flag with `rm` for confirmation
- ✅ Make backups before major operations
- ✅ Test commands on sample data first

### Efficiency Tips
- ✅ Use Tab completion extensively
- ✅ Create aliases for repetitive commands
- ✅ Learn keyboard shortcuts
- ✅ Use command history

### Organization
- ✅ Use descriptive file and folder names
- ✅ Organize projects in dedicated directories
- ✅ Keep your home directory clean
- ✅ Use version control (Git) for code

## Common Terminal Tasks

### Quick File Backup

```bash
# Backup single file
cp important.txt important_backup.txt

# Backup with date
cp important.txt important_$(date +%Y%m%d).txt

# Backup entire folder
tar -czf backup.tar.gz my_folder/
```

### Batch Operations

```bash
# Rename multiple files
for file in *.txt; do
    mv "$file" "backup_$file"
done

# Convert all CSV to lowercase names
for file in *.CSV; do
    mv "$file" "${file,,}"
done
```

### Quick System Info

```bash
# Disk usage
df -h

# Folder sizes
du -sh *

# Memory usage
free -h  # Linux
top      # Mac/Linux

# Network info
ifconfig  # or ip addr
```

## Troubleshooting Common Issues

### Permission Denied

```bash
# Check permissions
ls -l file.txt

# Make executable
chmod +x script.sh

# Change ownership
sudo chown username file.txt
```

### Command Not Found

```bash
# Check if program installed
which python

# Check PATH
echo $PATH

# Install missing command
# Mac: brew install program
# Linux: apt install program
# Windows: winget install program
```

### Stuck Terminal

- **Ctrl + C**: Stop current command
- **Ctrl + D**: Exit/logout
- **Ctrl + Z**: Suspend process (use `fg` to resume)
- **Ctrl + L**: Clear screen

## Resources for Learning More

### Interactive Tutorials
- [Command Line Tutorial](https://ubuntu.com/tutorials/command-line-for-beginners)
- [Learn Shell](https://www.learnshell.org/)
- [Bash Guide](https://mywiki.wooledge.org/BashGuide)

### Practice
1. Start with navigation: `pwd`, `ls`, `cd`
2. Create and manipulate files
3. Learn one new command per day
4. Automate repetitive tasks

## Summary

The terminal is your direct line of communication with the computer. While graphical interfaces are convenient, the terminal offers:

- **Speed**: Type faster than you can click
- **Power**: Access to thousands of commands
- **Automation**: Script repetitive tasks
- **Remote Access**: Work on distant servers
- **Development**: Essential for programming

Start with basic navigation, gradually add commands to your toolkit, and soon you'll wonder how you ever lived without it!