---
title: "The Terminal"
subtitle: "Your Command Line Interface"
---

## What is a Terminal?

A terminal (also called command line, shell, or console) is a text-based interface for interacting with your computer. Instead of clicking buttons and icons, you type commands to tell the computer what to do. While it might seem intimidating at first, the terminal is an incredibly powerful tool that gives you precise control over your system. 

::: {.tab-set}

## Mac

On Mac, it is called *Terminal*. You can find it by typing "Terminal" in Spotlight Search. When you start, you will see something like @fig-terminal. You may be presented with the following text:

```
The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
```

Do __*not*__ update your account to zsh! (If you did so by mistake, you change back using this command: `chsh -s /bin/bash`).

![The Terminal app on Mac](./images/terminal.png){#fig-terminal width=85%} 

## Windows

On Windows, the tool you need is called the Anaconda Powershell Prompt, which was installed along with Anaconda Python. You should be able to find it from the Start menu. If you open *Powershell*, you should see something like @fig-anacondaprompt.

![Anaconda Powershell Prompt app on Windows](./images/powershellprompt.png){#fig-anacondaprompt width=75%}

:::

What is *Powershell* and this *Terminal* thing? Both programs are what we call *terminal emulators*. They are used to run other programs, like  the ones you will write yourself. We informally refer to both *Terminal* and *Powershell* as "the terminal or "the shell". So if you read something like "open the terminal," you should open *Powershell* if you are running Windows and the *Terminal* application if you are running OS X.

To use the terminal, you need to know a few basics. First of all, a terminal lets you execute commands on your computer. You type the command you want and then hit enter. The place where you type is called a prompt (or command prompt), and it may look a little different depending on which terminal emulator you use. In this book, we represent the prompt with the character `$`. So, a command in the examples below is the line of text to the left of the `$`. When you open the terminal, you'll be redirected to a folder. You can see which folder you are in by typing `pwd`, and then press `Enter` on the keyboard. When you press `Enter`, you tell the terminal to execute your written command. In this case, the command you typed tells you the path to the folder we are in. If I do it, I get:

```bash
$ pwd
/Users/kasper/programming
```

If I had been on a Windows machine, it would have looked something like this: 

```bash
$ cd
C:\Users\kasper\programming
```

## Navigating folders

So, right now, I am in the `programming` folder. `/Users/kasper/programming` is the folder's path or "full address" with dashes (or backslashes on Windows) separating nested folders. So `programming` is a subfolder of `kasper`, a subfolder of `Users`. That way, you know which folder you are in and where that folder is. Let us see what is in this folder. You can use the `ls` command (l as in Lima and s as in Sierra). When I do that and press `Enter` I get the following:

```bash
$ ls
notes projects
```

There seem to be two other folders, one called `notes` and another called `projects`. If you are curious about what is inside the `notes` folder, you can "walk" into the folder with the `cd` command. To use this command, you must specify which folder you want to walk into (in this case, `notes`). We do this by typing `cd`, then a space, and then the folder's name. When I press `Enter` I get the following:

```bash
$ cd notes
$
```

It seems that nothing really happened, but if I run the `pwd` command now to see which folder I am in, I get the following:

```bash
$ pwd
/Users/kasper/programming/notes
```

Just to keep track of what is happening: before we ran the `cd` command, we were in the directory `/Users/kasper/programming` folder, and now we're in `/Users/kasper/programming/notes`. This means that we can now use the `ls` command to see what is in the `notes` folder:

```bash
$ ls
$
```

Again, it seems like nothing happened. Well, `ls` and `dir` do not show anything if the folder we are in is empty. So `notes` must be empty. Let us go back to where we came from. To walk "back" or "up" to `/Users/kasper/programming`, we again use the `cd` command, but we do not need to name a folder this time. Instead, we use the special name `..` to say that we wish to go to the parent folder called `programming`, i.e., the folder we just came from:

```bash
$ cd ..
$ pwd
/Users/kasper/programming
```

When we run the `pwd` command, we see that we are back where we started. Let us see if the two folders are still there:

```bash
$ ls
notes projects
```

They are! 

## Working with Files and Folders

Create a new folder:

```bash
mkdir my_project
```

View entire file:

```bash
cat filename.txt
```

Copy file:

```bash
cp source.txt destination.txt
```

Copy folder recursively:

```bash
cp -r source_folder destination_folder
```

Move/rename file or folder:

```bash
mv old_name.txt new_name.txt
mv file.txt /path/to/destination/
```

Delete file:

```bash
rm file.txt
```

Delete with confirmation:

```bash
rm -i file.txt
```

Delete *empty* folder:

```bash
rmdir empty_folder
```

Delete folder *and* all of its content:

```bash
rm -r folder_name
```

> **Careful with this command!** if you delete some important folder, like your user folder, the command *will* delete it along with everything inside it - without asking for confirmation! 

## Tips and Tricks

### Keyboard Shortcuts

| Shortcut | Action |
|----------|--------|
| `Tab` | Auto-complete file/folder names |
| `↑` / `↓` | Navigate command history |
| `Ctrl + C` | Cancel current command |
| `Ctrl + A` | Go to beginning of line |
| `Ctrl + E` | Go to end of line |
| `Ctrl + L` | Clear screen (or use `clear`) |
| `Ctrl + R` | Search command history |
| `Ctrl + D` | Exit terminal |

### Stuck Terminal
- **Ctrl + C**: Stop current command
- **Ctrl + D**: Exit/logout

### Safety First
- Use `ls` before `rm` to verify what you're deleting
- Use `-i` flag with `rm` for confirmation
- Make backups before major operations
- Test commands on sample data first

### Efficiency
- Use Tab completion extensively
- Create aliases for repetitive commands
- Learn keyboard shortcuts
- Use command history

### Organization
- Use descriptive file and folder names
- Organize projects in dedicated directories
- Keep your home directory clean


## Resources for Learning More

- [Command Line Tutorial](https://ubuntu.com/tutorials/command-line-for-beginners)
- [Learn Shell](https://www.learnshell.org/)
- [Bash Guide](https://mywiki.wooledge.org/BashGuide)
