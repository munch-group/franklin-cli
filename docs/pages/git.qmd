---
title: Git version control
---

::: {.callout-caution }  
## Under development  
The content of this page is being developed.  
:::

## TLDR;

Git is a distributed version control system designed to track changes in source code and facilitate collaboration among multiple developers. Originally created by Linus Torvalds in 2005 for managing the Linux kernel, Git has since become the dominant version control tool in software development, underpinning platforms such as GitHub, GitLab, and Bitbucket.

In Git, every working copy of a repository is a full-fledged versioned archive, containing the entire history of the project. This distributed model enhances performance, enables offline work, and provides a robust foundation for branching and merging workflows. Changes are recorded as commits—snapshots of the project at specific points in time—organized in a directed acyclic graph (DAG).

Key concepts include:

Repository: A data structure containing all commits, branches, and tags for a project.
Commit: A recorded state of the repository, with metadata about the author, timestamp, and parent commits.
Branch: A movable pointer to a commit, enabling parallel development paths.
Merge: The integration of changes from one branch into another, optionally involving conflict resolution.
Remote: A reference to another copy of the repository, typically hosted on a server.
Git supports advanced features such as rebasing, cherry-picking, and interactive staging. It also allows for fine-grained control of collaboration through pull requests, code reviews, and access control mechanisms.

While Git has a steep learning curve, especially in conflict resolution and complex branching workflows, its efficiency, reliability, and flexibility make it an indispensable tool in modern software engineering and research computing.

# Version control {#sec-git-101}

## Git as journaled backup

When you are in your `<repositoryname>` folder, you can run git commands to manage your files, record their changes and sync them to the repository on GitHub for safe keeping. [These tutorials](https://www.atlassian.com/git) are good introductions to git. 

To journal the creation or modification of a file, you need to `add` it to git:

```{.bash filename="Terminal"}
git add <the_changed_file>
```

 This "stages" the change. This adds the file to the a "group" of changes that represent some modification to your project. You can add more files to that "group" by running the command again with other files. If you run `git status` you can see that the files are now staged.

So maybe you added or changed two python files addressing some parcitular problem or advancing some part of your project. Now you want to store those of changes to the journal maintained by Git and associate it with a short message describing the changes. For that you use:

```{.bash filename="Terminal"}
git commit -m '<message>'
```
    
If you added two python files, your description could be `'Added two python files for my analysis'`. If you fixed a bug or added new code to the files, your message should reflect that. 

Now your changes are recorded in the version of the `<repositoryname>` *on the cluster*, but that does not serve as a backup in case you accidentally delete your entire folder or the cluster burns down. To backup your repository you need to synchronize your *local* `<repositoryname>` repository on the cluster with the `<repositoryname>` repository *on GitHub*. To du that use:

```{.bash filename="Terminal"}
git push
```

In addition to keeping your precious files safe and backed up, your GitHub repository also serve as a journal documenting of your progress. Each commit is a snapshot if your project that can be retrieved at any time.

## Git 


There is a cheat sheet [here](https://training.github.com/downloads/github-git-cheat-sheet/) and some good visual guides [here](https://ndpsoftware.com/git-cheatsheet.html) and [here](https://marklodato.github.io/visual-git-guide/index-en.html).


The three most important commands to learn are: [git status](https://git-scm.com/docs/git-status), [git add](https://git-scm.com/docs/git-add), [git rm](https://git-scm.com/docs/git-rm), [git mv](https://git-scm.com/docs/git-mv), [git commit](https://git-scm.com/docs/git-commit) and [git push](https://git-scm.com/docs/git-push). 


### Resolving conflicts

Blah blah...