---
title: "Introduction to Git"
subtitle: "Version Control for Your Code"
---

## What is Git?

Git is a **version control system** that tracks changes to your files over time. Think of it as a sophisticated "undo" system that remembers every version of your work, allows you to collaborate with others, and helps you organize your coding projects.

### Why Do You Need Git?

Imagine you're writing an essay:
- You save multiple versions: `essay_v1.doc`, `essay_v2.doc`, `essay_final.doc`, `essay_final_REALLY_final.doc`
- You accidentally delete an important paragraph
- You want to see what you changed between versions
- You're working with a classmate and need to combine your changes

Git solves all these problems elegantly for code (and any text files).

## Core Concepts

### Repository (Repo)
A repository is a folder that Git tracks. It contains all your project files and the entire history of changes.

```bash
# Turn any folder into a Git repository
git init
```

### Commits
A commit is a snapshot of your work at a specific point in time. Each commit has:
- A unique ID (hash)
- Author information
- Timestamp
- A message describing the changes

```bash
# Create a commit
git add myfile.py          # Stage the file
git commit -m "Add data analysis function"  # Commit with message
```

### The Three States

Files in Git exist in three states:

```mermaid
graph LR
    A[Working Directory] -->|git add| B[Staging Area]
    B -->|git commit| C[Repository]
    C -->|git checkout| A
```

1. **Working Directory**: Where you edit files
2. **Staging Area**: Where you prepare changes for commit
3. **Repository**: Where Git permanently stores snapshots

## Essential Git Commands

### Starting a Project

```bash
# Create a new repository
git init

# Clone an existing repository
git clone https://github.com/username/project.git

# Check repository status
git status
```

### Making Changes

```bash
# Stage specific files
git add filename.py
git add data.csv

# Stage all changes
git add .

# Commit staged changes
git commit -m "Describe what you changed"

# See what changed
git diff                    # Changes not yet staged
git diff --staged          # Changes staged for commit
```

### Viewing History

```bash
# View commit history
git log

# View history with graph
git log --oneline --graph --all

# View specific commit
git show abc123

# See who changed what
git blame filename.py
```

### Undoing Changes

```bash
# Discard changes in working directory
git checkout -- filename.py

# Unstage a file
git reset HEAD filename.py

# Undo last commit (keep changes)
git reset --soft HEAD~1

# Undo last commit (discard changes)
git reset --hard HEAD~1
```

## Branching and Merging

Branches allow you to work on different features without affecting the main code.

### Working with Branches

```bash
# Create new branch
git branch feature-name

# Switch to branch
git checkout feature-name

# Create and switch in one command
git checkout -b feature-name

# List branches
git branch

# Delete branch
git branch -d feature-name
```

### Merging Changes

```bash
# Merge feature branch into current branch
git merge feature-name

# Resolve merge conflicts manually, then:
git add conflicted-file.py
git commit -m "Resolve merge conflict"
```

## Remote Repositories

Remote repositories (like GitHub, GitLab) allow you to:
- Back up your code
- Collaborate with others
- Share your work

### Working with Remotes

```bash
# Add remote repository
git remote add origin https://github.com/username/repo.git

# View remotes
git remote -v

# Push to remote
git push origin main

# Pull from remote
git pull origin main

# Fetch without merging
git fetch origin
```

## Git with Franklin

Franklin exercises are Git repositories, making version control seamless:

### Student Workflow

```bash
# After downloading an exercise
cd "Exercise Name"

# Check git status
git status

# Save your work
git add exercise.ipynb
git commit -m "Complete part 1 of exercise"

# Create your own backup
git remote add backup https://github.com/yourusername/solutions.git
git push backup main
```

### Educator Workflow

```bash
# Creating an exercise
franklin exercise new

# Track changes
git add -A
git commit -m "Add exercise instructions"

# Update exercise
git commit -m "Clarify problem 3"
franklin exercise publish
```

## Best Practices

### Commit Messages

Write clear, descriptive commit messages:

```bash
# Good commit messages
git commit -m "Add data validation to user input"
git commit -m "Fix bug in sorting algorithm"
git commit -m "Update documentation for API endpoints"

# Bad commit messages
git commit -m "Fixed stuff"
git commit -m "asdf"
git commit -m "Monday's work"
```

### Commit Frequency

- Commit **often**: Small, logical changes
- Commit **working code**: Don't break the build
- Commit **related changes**: One commit = one purpose

### .gitignore

Use `.gitignore` to exclude files from version control:

```bash
# .gitignore file
*.pyc               # Python compiled files
__pycache__/        # Python cache directory
.DS_Store           # Mac system files
*.log               # Log files
secrets.txt         # Sensitive information
venv/               # Virtual environment
```

## Common Scenarios

### Scenario 1: Accidentally Committed a Large File

```bash
# Remove file from history
git rm --cached large_file.zip
git commit -m "Remove large file"

# Add to .gitignore
echo "*.zip" >> .gitignore
git add .gitignore
git commit -m "Ignore zip files"
```

### Scenario 2: Need to Switch Tasks Quickly

```bash
# Save current work without committing
git stash

# Work on urgent fix
git checkout main
# ... make fixes ...
git commit -m "Emergency fix"

# Return to previous work
git checkout feature-branch
git stash pop
```

### Scenario 3: Made Changes to Wrong Branch

```bash
# Save changes
git stash

# Switch to correct branch
git checkout correct-branch

# Apply changes
git stash pop
```

## Git vs GitHub/GitLab

**Git** is the version control system that runs on your computer.

**GitHub/GitLab** are web services that host Git repositories and add features like:
- Web interface
- Issue tracking
- Pull/Merge requests
- Collaboration tools
- CI/CD pipelines

## Visual Git Tools

While command line is powerful, visual tools can help:

### GUI Applications
- **GitKraken**: User-friendly, cross-platform
- **SourceTree**: Free, comprehensive
- **GitHub Desktop**: Simple, integrated with GitHub
- **VS Code**: Built-in Git support

### VS Code Git Integration

VS Code has excellent Git integration:
- See changes in the sidebar
- Stage/unstage with clicks
- Commit with UI
- View diffs visually
- Resolve merge conflicts

## Quick Reference

| Command | Purpose |
|---------|---------|
| `git init` | Start tracking a folder |
| `git clone [url]` | Copy a repository |
| `git add [file]` | Stage changes |
| `git commit -m "[message]"` | Save snapshot |
| `git status` | Check what's changed |
| `git log` | View history |
| `git branch [name]` | Create branch |
| `git checkout [branch]` | Switch branches |
| `git merge [branch]` | Combine branches |
| `git push` | Upload to remote |
| `git pull` | Download from remote |

## Learning Resources

### Interactive Tutorials
- [Learn Git Branching](https://learngitbranching.js.org/) - Visual and interactive
- [GitHub's Git Tutorial](https://try.github.io/) - Step-by-step guide
- [Atlassian Git Tutorial](https://www.atlassian.com/git/tutorials) - Comprehensive guide

### Practice
The best way to learn Git is to use it:
1. Start with a personal project
2. Make commits for every change
3. Try branching for new features
4. Push to GitHub/GitLab for backup

## Summary

Git might seem complex at first, but you only need a few commands to get started:
1. `git add` and `git commit` to save your work
2. `git status` to see what's happening
3. `git push` and `git pull` to sync with remote

As you become comfortable with these basics, you can gradually explore more advanced features. Remember: Git is a safety net for your codeâ€”it's there to help, not to complicate your workflow.