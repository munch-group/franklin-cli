---
title: "Franklin Commands"
subtitle: "All Commands at a Glance"
---

::: {.panel-tabset}

## Core Commands

### Basic Operations
```bash
franklin --version              # Check version
franklin --help                 # Show help
franklin update                 # Update Franklin
```

### Working with Exercises
```bash
franklin download               # Download exercise (interactive)
franklin jupyter                # Launch Jupyter for exercise
franklin list                   # List available exercises
franklin cleanup                # Remove old containers
```

## Educator Commands

### Exercise Management
```bash
franklin exercise new           # Create new exercise
franklin exercise edit          # Edit existing exercise
franklin exercise list          # List your exercises
franklin exercise publish       # Publish to students
franklin exercise test          # Test exercise locally
```

### Exercise Development Workflow
```bash
# 1. Create new exercise
franklin exercise new
> Course: Introduction to Python
> Exercise: Variables and Types
> Template: default

# 2. Edit exercise
cd "Variables and Types"
jupyter lab exercise.ipynb

# 3. Test locally
pixi run test-notebook

# 4. Publish for students
franklin exercise publish
```

:::

### Git Integration
```bash
franklin exercise clone <url>   # Clone exercise repository
franklin exercise push          # Push changes to GitLab
franklin exercise pull          # Pull latest changes
franklin exercise status        # Check git status
```


## Jupyter Magic Commands

Inside Jupyter notebooks:

```python
# Load Franklin magic
%load_ext magic

# Install packages
%franklin numpy pandas matplotlib
%pixi_install scikit-learn tensorflow

# Install specific versions
%franklin numpy==1.24.0 pandas>=2.0

# Install from different channels
%franklin -c pytorch pytorch torchvision
```


### Exercise Structure
```
exercise-name/
├── Dockerfile                  # Container configuration
├── pixi.toml                  # Dependencies
├── exercise.ipynb             # Main notebook
├── README.md                  # Instructions
├── data/                      # Data files
├── tests/                     # Test files
└── .gitlab-ci.yml            # CI/CD pipeline
```

## Pixi Commands

### In Exercise Directory
```bash
pixi install                    # Install dependencies
pixi add numpy                  # Add package
pixi remove pandas              # Remove package
pixi list                       # List installed packages
pixi run test-notebook          # Run tests
pixi shell                      # Activate environment
```

### Global Pixi
```bash
pixi global install jupyter     # Install globally
pixi global list               # List global packages
pixi global update             # Update all packages
```

## Git Commands for Exercises

```bash
# Check status
git status

# Save your work
git add -A
git commit -m "Complete exercise 1"

# Create your own repository
git remote add personal https://github.com/you/solutions
git push personal main

# Get updates
git pull origin main

# View history
git log --oneline
```

## Troubleshooting Commands

### Diagnostic Commands
```bash
franklin doctor                 # System diagnostics
franklin doctor --verbose       # Detailed diagnostics

# Check components
docker --version
git --version
python --version
pixi --version
```

### Reset and Repair
```bash
# Reset Franklin configuration
franklin reset --config

# Clear cache
franklin cache clear

# Reinstall Franklin
conda remove franklin
conda install -c conda-forge -c munch-group franklin

# Fix permissions (Linux/Mac)
sudo chown -R $USER:$USER ~/.franklin
```

### Logs and Debugging
```bash
# View logs
franklin logs                   # Recent logs
franklin logs --tail 50         # Last 50 lines
franklin logs --follow          # Follow log output

# Debug mode
FRANKLIN_DEBUG=1 franklin download

# Verbose output
franklin --verbose jupyter
```

## Keyboard Shortcuts

### JupyterLab
```
Shift+Enter    Run cell and move to next
Ctrl+Enter     Run cell
Alt+Enter      Run cell and insert below
Esc           Command mode
Enter         Edit mode
A             Insert cell above
B             Insert cell below
DD            Delete cell
Z             Undo cell deletion
Ctrl+S        Save notebook
```

### Terminal (During Franklin Prompts)
```
↑/↓           Navigate options
Enter         Select option
Ctrl+C        Cancel operation
Tab           Auto-complete
Ctrl+L        Clear screen
```

## Common Workflows

### Student Workflow
```bash
# 1. Download exercise
franklin download

# 2. Work on exercise
franklin jupyter

# 3. Save and submit
# (Work is auto-saved in exercise folder)
```

### Educator Workflow
```bash
# 1. Create exercise
franklin exercise new

# 2. Develop and test
cd exercise-folder
jupyter lab
pixi run test-notebook

# 3. Publish
franklin exercise publish
```

### Administrator Workflow
```bash
# 1. Setup course
franklin grant educator prof@university.edu
franklin grant ta assistant@university.edu

# 2. Add students
franklin grant student --file roster.csv

# 3. Monitor usage
franklin stats --course "CS101"
```

## Package Management

### Adding Dependencies to Exercise
```bash
# In exercise directory
pixi add numpy pandas           # Add to pixi.toml

# Or in notebook
%franklin numpy pandas

# For specific versions
pixi add "numpy>=1.24,<2.0"
```

### Creating Requirements File
```bash
# Export from pixi
pixi list --export > requirements.txt

# Export from conda
conda env export > environment.yml
```

## CI/CD Integration

### GitLab CI
```yaml
# .gitlab-ci.yml in exercise
test:
  image: registry.gitlab.com/franklin/base:latest
  script:
    - pixi install
    - pixi run test-notebook
```

### GitHub Actions
```yaml
# .github/workflows/test.yml
name: Test Exercise
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          pixi install
          pixi run test-notebook
```

## Help and Support

```bash
# Get help
franklin --help                 # General help
franklin download --help        # Command-specific help

# Version information
franklin --version

# Submit issues
# https://github.com/munch-group/franklin/issues

# Documentation
# https://munch-group.org/franklin
```